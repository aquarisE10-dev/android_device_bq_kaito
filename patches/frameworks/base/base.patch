From 81ec9950406acd27b3b83adde67e891968397380 Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Wed, 27 May 2015 23:19:26 +0200
Subject: [PATCH 01/12] Revert "opengl: Un-hide GLES31 and GLES31Ext classes"

This reverts commit 3683e0a34b94cbbe4e4a6e49a789db416e5c40bb [formerly 61b2dfe224db012ea9492738ac7ab5cb0629e6c0].


Former-commit-id: ae77862c28e3d575fb7f725edb08e0500a6d88ca
---
 api/current.txt                           | 526 ----------------------
 opengl/java/android/opengl/GLES31.java    |   1 +
 opengl/java/android/opengl/GLES31Ext.java |   1 +
 3 files changed, 2 insertions(+), 526 deletions(-)

diff --git a/api/current.txt b/api/current.txt
index 35423fdcbfe32..871328ba57859 100644
--- a/api/current.txt
+++ b/api/current.txt
@@ -20640,532 +20640,6 @@ package android.opengl {
     field public static final int GL_WAIT_FAILED = 37149; // 0x911d
   }
 
-  public class GLES31 extends android.opengl.GLES30 {
-    method public static void glActiveShaderProgram(int, int);
-    method public static void glBindImageTexture(int, int, int, boolean, int, int, int);
-    method public static void glBindProgramPipeline(int);
-    method public static void glBindVertexBuffer(int, int, long, int);
-    method public static int glCreateShaderProgramv(int, java.lang.String[]);
-    method public static void glDeleteProgramPipelines(int, int[], int);
-    method public static void glDeleteProgramPipelines(int, java.nio.IntBuffer);
-    method public static void glDispatchCompute(int, int, int);
-    method public static void glDispatchComputeIndirect(long);
-    method public static void glDrawArraysIndirect(int, long);
-    method public static void glDrawElementsIndirect(int, int, long);
-    method public static void glFramebufferParameteri(int, int, int);
-    method public static void glGenProgramPipelines(int, int[], int);
-    method public static void glGenProgramPipelines(int, java.nio.IntBuffer);
-    method public static void glGetBooleani_v(int, int, boolean[], int);
-    method public static void glGetBooleani_v(int, int, java.nio.IntBuffer);
-    method public static void glGetFramebufferParameteriv(int, int, int[], int);
-    method public static void glGetFramebufferParameteriv(int, int, java.nio.IntBuffer);
-    method public static void glGetMultisamplefv(int, int, float[], int);
-    method public static void glGetMultisamplefv(int, int, java.nio.FloatBuffer);
-    method public static void glGetProgramInterfaceiv(int, int, int, int[], int);
-    method public static void glGetProgramInterfaceiv(int, int, int, java.nio.IntBuffer);
-    method public static java.lang.String glGetProgramPipelineInfoLog(int);
-    method public static void glGetProgramPipelineiv(int, int, int[], int);
-    method public static void glGetProgramPipelineiv(int, int, java.nio.IntBuffer);
-    method public static int glGetProgramResourceIndex(int, int, java.lang.String);
-    method public static int glGetProgramResourceLocation(int, int, java.lang.String);
-    method public static java.lang.String glGetProgramResourceName(int, int, int);
-    method public static void glGetProgramResourceiv(int, int, int, int, int[], int, int, int[], int, int[], int);
-    method public static void glGetProgramResourceiv(int, int, int, int, java.nio.IntBuffer, int, java.nio.IntBuffer, java.nio.IntBuffer);
-    method public static void glGetTexLevelParameterfv(int, int, int, float[], int);
-    method public static void glGetTexLevelParameterfv(int, int, int, java.nio.FloatBuffer);
-    method public static void glGetTexLevelParameteriv(int, int, int, int[], int);
-    method public static void glGetTexLevelParameteriv(int, int, int, java.nio.IntBuffer);
-    method public static boolean glIsProgramPipeline(int);
-    method public static void glMemoryBarrier(int);
-    method public static void glMemoryBarrierByRegion(int);
-    method public static void glProgramUniform1f(int, int, float);
-    method public static void glProgramUniform1fv(int, int, int, float[], int);
-    method public static void glProgramUniform1fv(int, int, int, java.nio.FloatBuffer);
-    method public static void glProgramUniform1i(int, int, int);
-    method public static void glProgramUniform1iv(int, int, int, int[], int);
-    method public static void glProgramUniform1iv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniform1ui(int, int, int);
-    method public static void glProgramUniform1uiv(int, int, int, int[], int);
-    method public static void glProgramUniform1uiv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniform2f(int, int, float, float);
-    method public static void glProgramUniform2fv(int, int, int, float[], int);
-    method public static void glProgramUniform2fv(int, int, int, java.nio.FloatBuffer);
-    method public static void glProgramUniform2i(int, int, int, int);
-    method public static void glProgramUniform2iv(int, int, int, int[], int);
-    method public static void glProgramUniform2iv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniform2ui(int, int, int, int);
-    method public static void glProgramUniform2uiv(int, int, int, int[], int);
-    method public static void glProgramUniform2uiv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniform3f(int, int, float, float, float);
-    method public static void glProgramUniform3fv(int, int, int, float[], int);
-    method public static void glProgramUniform3fv(int, int, int, java.nio.FloatBuffer);
-    method public static void glProgramUniform3i(int, int, int, int, int);
-    method public static void glProgramUniform3iv(int, int, int, int[], int);
-    method public static void glProgramUniform3iv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniform3ui(int, int, int, int, int);
-    method public static void glProgramUniform3uiv(int, int, int, int[], int);
-    method public static void glProgramUniform3uiv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniform4f(int, int, float, float, float, float);
-    method public static void glProgramUniform4fv(int, int, int, float[], int);
-    method public static void glProgramUniform4fv(int, int, int, java.nio.FloatBuffer);
-    method public static void glProgramUniform4i(int, int, int, int, int, int);
-    method public static void glProgramUniform4iv(int, int, int, int[], int);
-    method public static void glProgramUniform4iv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniform4ui(int, int, int, int, int, int);
-    method public static void glProgramUniform4uiv(int, int, int, int[], int);
-    method public static void glProgramUniform4uiv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniformMatrix2fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix2fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix2x3fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix2x3fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix2x4fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix2x4fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix3fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix3fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix3x2fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix3x2fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix3x4fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix3x4fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix4fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix4fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix4x2fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix4x2fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix4x3fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix4x3fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glSampleMaski(int, int);
-    method public static void glTexStorage2DMultisample(int, int, int, int, int, boolean);
-    method public static void glUseProgramStages(int, int, int);
-    method public static void glValidateProgramPipeline(int);
-    method public static void glVertexAttribBinding(int, int);
-    method public static void glVertexAttribFormat(int, int, int, boolean, int);
-    method public static void glVertexAttribIFormat(int, int, int, int);
-    method public static void glVertexBindingDivisor(int, int);
-    field public static final int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 37593; // 0x92d9
-    field public static final int GL_ACTIVE_PROGRAM = 33369; // 0x8259
-    field public static final int GL_ACTIVE_RESOURCES = 37621; // 0x92f5
-    field public static final int GL_ACTIVE_VARIABLES = 37637; // 0x9305
-    field public static final int GL_ALL_SHADER_BITS = -1; // 0xffffffff
-    field public static final int GL_ARRAY_SIZE = 37627; // 0x92fb
-    field public static final int GL_ARRAY_STRIDE = 37630; // 0x92fe
-    field public static final int GL_ATOMIC_COUNTER_BARRIER_BIT = 4096; // 0x1000
-    field public static final int GL_ATOMIC_COUNTER_BUFFER = 37568; // 0x92c0
-    field public static final int GL_ATOMIC_COUNTER_BUFFER_BINDING = 37569; // 0x92c1
-    field public static final int GL_ATOMIC_COUNTER_BUFFER_INDEX = 37633; // 0x9301
-    field public static final int GL_ATOMIC_COUNTER_BUFFER_SIZE = 37571; // 0x92c3
-    field public static final int GL_ATOMIC_COUNTER_BUFFER_START = 37570; // 0x92c2
-    field public static final int GL_BLOCK_INDEX = 37629; // 0x92fd
-    field public static final int GL_BUFFER_BINDING = 37634; // 0x9302
-    field public static final int GL_BUFFER_DATA_SIZE = 37635; // 0x9303
-    field public static final int GL_BUFFER_UPDATE_BARRIER_BIT = 512; // 0x200
-    field public static final int GL_BUFFER_VARIABLE = 37605; // 0x92e5
-    field public static final int GL_COMMAND_BARRIER_BIT = 64; // 0x40
-    field public static final int GL_COMPUTE_SHADER = 37305; // 0x91b9
-    field public static final int GL_COMPUTE_SHADER_BIT = 32; // 0x20
-    field public static final int GL_COMPUTE_WORK_GROUP_SIZE = 33383; // 0x8267
-    field public static final int GL_DEPTH_STENCIL_TEXTURE_MODE = 37098; // 0x90ea
-    field public static final int GL_DISPATCH_INDIRECT_BUFFER = 37102; // 0x90ee
-    field public static final int GL_DISPATCH_INDIRECT_BUFFER_BINDING = 37103; // 0x90ef
-    field public static final int GL_DRAW_INDIRECT_BUFFER = 36671; // 0x8f3f
-    field public static final int GL_DRAW_INDIRECT_BUFFER_BINDING = 36675; // 0x8f43
-    field public static final int GL_FRAGMENT_SHADER_BIT = 2; // 0x2
-    field public static final int GL_FRAMEBUFFER_BARRIER_BIT = 1024; // 0x400
-    field public static final int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 37652; // 0x9314
-    field public static final int GL_FRAMEBUFFER_DEFAULT_HEIGHT = 37649; // 0x9311
-    field public static final int GL_FRAMEBUFFER_DEFAULT_SAMPLES = 37651; // 0x9313
-    field public static final int GL_FRAMEBUFFER_DEFAULT_WIDTH = 37648; // 0x9310
-    field public static final int GL_IMAGE_2D = 36941; // 0x904d
-    field public static final int GL_IMAGE_2D_ARRAY = 36947; // 0x9053
-    field public static final int GL_IMAGE_3D = 36942; // 0x904e
-    field public static final int GL_IMAGE_BINDING_ACCESS = 36670; // 0x8f3e
-    field public static final int GL_IMAGE_BINDING_FORMAT = 36974; // 0x906e
-    field public static final int GL_IMAGE_BINDING_LAYER = 36669; // 0x8f3d
-    field public static final int GL_IMAGE_BINDING_LAYERED = 36668; // 0x8f3c
-    field public static final int GL_IMAGE_BINDING_LEVEL = 36667; // 0x8f3b
-    field public static final int GL_IMAGE_BINDING_NAME = 36666; // 0x8f3a
-    field public static final int GL_IMAGE_CUBE = 36944; // 0x9050
-    field public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 37065; // 0x90c9
-    field public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 37064; // 0x90c8
-    field public static final int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 37063; // 0x90c7
-    field public static final int GL_INT_IMAGE_2D = 36952; // 0x9058
-    field public static final int GL_INT_IMAGE_2D_ARRAY = 36958; // 0x905e
-    field public static final int GL_INT_IMAGE_3D = 36953; // 0x9059
-    field public static final int GL_INT_IMAGE_CUBE = 36955; // 0x905b
-    field public static final int GL_INT_SAMPLER_2D_MULTISAMPLE = 37129; // 0x9109
-    field public static final int GL_IS_ROW_MAJOR = 37632; // 0x9300
-    field public static final int GL_LOCATION = 37646; // 0x930e
-    field public static final int GL_MATRIX_STRIDE = 37631; // 0x92ff
-    field public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 37596; // 0x92dc
-    field public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 37592; // 0x92d8
-    field public static final int GL_MAX_COLOR_TEXTURE_SAMPLES = 37134; // 0x910e
-    field public static final int GL_MAX_COMBINED_ATOMIC_COUNTERS = 37591; // 0x92d7
-    field public static final int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 37585; // 0x92d1
-    field public static final int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 33382; // 0x8266
-    field public static final int GL_MAX_COMBINED_IMAGE_UNIFORMS = 37071; // 0x90cf
-    field public static final int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 36665; // 0x8f39
-    field public static final int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 37084; // 0x90dc
-    field public static final int GL_MAX_COMPUTE_ATOMIC_COUNTERS = 33381; // 0x8265
-    field public static final int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 33380; // 0x8264
-    field public static final int GL_MAX_COMPUTE_IMAGE_UNIFORMS = 37309; // 0x91bd
-    field public static final int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 37083; // 0x90db
-    field public static final int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 33378; // 0x8262
-    field public static final int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 37308; // 0x91bc
-    field public static final int GL_MAX_COMPUTE_UNIFORM_BLOCKS = 37307; // 0x91bb
-    field public static final int GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 33379; // 0x8263
-    field public static final int GL_MAX_COMPUTE_WORK_GROUP_COUNT = 37310; // 0x91be
-    field public static final int GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 37099; // 0x90eb
-    field public static final int GL_MAX_COMPUTE_WORK_GROUP_SIZE = 37311; // 0x91bf
-    field public static final int GL_MAX_DEPTH_TEXTURE_SAMPLES = 37135; // 0x910f
-    field public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 37590; // 0x92d6
-    field public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 37584; // 0x92d0
-    field public static final int GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 37070; // 0x90ce
-    field public static final int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 37082; // 0x90da
-    field public static final int GL_MAX_FRAMEBUFFER_HEIGHT = 37654; // 0x9316
-    field public static final int GL_MAX_FRAMEBUFFER_SAMPLES = 37656; // 0x9318
-    field public static final int GL_MAX_FRAMEBUFFER_WIDTH = 37653; // 0x9315
-    field public static final int GL_MAX_IMAGE_UNITS = 36664; // 0x8f38
-    field public static final int GL_MAX_INTEGER_SAMPLES = 37136; // 0x9110
-    field public static final int GL_MAX_NAME_LENGTH = 37622; // 0x92f6
-    field public static final int GL_MAX_NUM_ACTIVE_VARIABLES = 37623; // 0x92f7
-    field public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 36447; // 0x8e5f
-    field public static final int GL_MAX_SAMPLE_MASK_WORDS = 36441; // 0x8e59
-    field public static final int GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 37086; // 0x90de
-    field public static final int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 37085; // 0x90dd
-    field public static final int GL_MAX_UNIFORM_LOCATIONS = 33390; // 0x826e
-    field public static final int GL_MAX_VERTEX_ATOMIC_COUNTERS = 37586; // 0x92d2
-    field public static final int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 37580; // 0x92cc
-    field public static final int GL_MAX_VERTEX_ATTRIB_BINDINGS = 33498; // 0x82da
-    field public static final int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 33497; // 0x82d9
-    field public static final int GL_MAX_VERTEX_ATTRIB_STRIDE = 33509; // 0x82e5
-    field public static final int GL_MAX_VERTEX_IMAGE_UNIFORMS = 37066; // 0x90ca
-    field public static final int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 37078; // 0x90d6
-    field public static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 36446; // 0x8e5e
-    field public static final int GL_NAME_LENGTH = 37625; // 0x92f9
-    field public static final int GL_NUM_ACTIVE_VARIABLES = 37636; // 0x9304
-    field public static final int GL_OFFSET = 37628; // 0x92fc
-    field public static final int GL_PIXEL_BUFFER_BARRIER_BIT = 128; // 0x80
-    field public static final int GL_PROGRAM_INPUT = 37603; // 0x92e3
-    field public static final int GL_PROGRAM_OUTPUT = 37604; // 0x92e4
-    field public static final int GL_PROGRAM_PIPELINE_BINDING = 33370; // 0x825a
-    field public static final int GL_PROGRAM_SEPARABLE = 33368; // 0x8258
-    field public static final int GL_READ_ONLY = 35000; // 0x88b8
-    field public static final int GL_READ_WRITE = 35002; // 0x88ba
-    field public static final int GL_REFERENCED_BY_COMPUTE_SHADER = 37643; // 0x930b
-    field public static final int GL_REFERENCED_BY_FRAGMENT_SHADER = 37642; // 0x930a
-    field public static final int GL_REFERENCED_BY_VERTEX_SHADER = 37638; // 0x9306
-    field public static final int GL_SAMPLER_2D_MULTISAMPLE = 37128; // 0x9108
-    field public static final int GL_SAMPLE_MASK = 36433; // 0x8e51
-    field public static final int GL_SAMPLE_MASK_VALUE = 36434; // 0x8e52
-    field public static final int GL_SAMPLE_POSITION = 36432; // 0x8e50
-    field public static final int GL_SHADER_STORAGE_BARRIER_BIT = 8192; // 0x2000
-    field public static final int GL_SHADER_STORAGE_BLOCK = 37606; // 0x92e6
-    field public static final int GL_SHADER_STORAGE_BUFFER = 37074; // 0x90d2
-    field public static final int GL_SHADER_STORAGE_BUFFER_BINDING = 37075; // 0x90d3
-    field public static final int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 37087; // 0x90df
-    field public static final int GL_SHADER_STORAGE_BUFFER_SIZE = 37077; // 0x90d5
-    field public static final int GL_SHADER_STORAGE_BUFFER_START = 37076; // 0x90d4
-    field public static final int GL_STENCIL_INDEX = 6401; // 0x1901
-    field public static final int GL_TEXTURE_2D_MULTISAMPLE = 37120; // 0x9100
-    field public static final int GL_TEXTURE_ALPHA_SIZE = 32863; // 0x805f
-    field public static final int GL_TEXTURE_ALPHA_TYPE = 35859; // 0x8c13
-    field public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE = 37124; // 0x9104
-    field public static final int GL_TEXTURE_BLUE_SIZE = 32862; // 0x805e
-    field public static final int GL_TEXTURE_BLUE_TYPE = 35858; // 0x8c12
-    field public static final int GL_TEXTURE_COMPRESSED = 34465; // 0x86a1
-    field public static final int GL_TEXTURE_DEPTH = 32881; // 0x8071
-    field public static final int GL_TEXTURE_DEPTH_SIZE = 34890; // 0x884a
-    field public static final int GL_TEXTURE_DEPTH_TYPE = 35862; // 0x8c16
-    field public static final int GL_TEXTURE_FETCH_BARRIER_BIT = 8; // 0x8
-    field public static final int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 37127; // 0x9107
-    field public static final int GL_TEXTURE_GREEN_SIZE = 32861; // 0x805d
-    field public static final int GL_TEXTURE_GREEN_TYPE = 35857; // 0x8c11
-    field public static final int GL_TEXTURE_HEIGHT = 4097; // 0x1001
-    field public static final int GL_TEXTURE_INTERNAL_FORMAT = 4099; // 0x1003
-    field public static final int GL_TEXTURE_RED_SIZE = 32860; // 0x805c
-    field public static final int GL_TEXTURE_RED_TYPE = 35856; // 0x8c10
-    field public static final int GL_TEXTURE_SAMPLES = 37126; // 0x9106
-    field public static final int GL_TEXTURE_SHARED_SIZE = 35903; // 0x8c3f
-    field public static final int GL_TEXTURE_STENCIL_SIZE = 35057; // 0x88f1
-    field public static final int GL_TEXTURE_UPDATE_BARRIER_BIT = 256; // 0x100
-    field public static final int GL_TEXTURE_WIDTH = 4096; // 0x1000
-    field public static final int GL_TOP_LEVEL_ARRAY_SIZE = 37644; // 0x930c
-    field public static final int GL_TOP_LEVEL_ARRAY_STRIDE = 37645; // 0x930d
-    field public static final int GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 2048; // 0x800
-    field public static final int GL_TRANSFORM_FEEDBACK_VARYING = 37620; // 0x92f4
-    field public static final int GL_TYPE = 37626; // 0x92fa
-    field public static final int GL_UNIFORM = 37601; // 0x92e1
-    field public static final int GL_UNIFORM_BARRIER_BIT = 4; // 0x4
-    field public static final int GL_UNIFORM_BLOCK = 37602; // 0x92e2
-    field public static final int GL_UNSIGNED_INT_ATOMIC_COUNTER = 37595; // 0x92db
-    field public static final int GL_UNSIGNED_INT_IMAGE_2D = 36963; // 0x9063
-    field public static final int GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 36969; // 0x9069
-    field public static final int GL_UNSIGNED_INT_IMAGE_3D = 36964; // 0x9064
-    field public static final int GL_UNSIGNED_INT_IMAGE_CUBE = 36966; // 0x9066
-    field public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 37130; // 0x910a
-    field public static final int GL_VERTEX_ATTRIB_BINDING = 33492; // 0x82d4
-    field public static final int GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 33493; // 0x82d5
-    field public static final int GL_VERTEX_BINDING_BUFFER = 36687; // 0x8f4f
-    field public static final int GL_VERTEX_BINDING_DIVISOR = 33494; // 0x82d6
-    field public static final int GL_VERTEX_BINDING_OFFSET = 33495; // 0x82d7
-    field public static final int GL_VERTEX_BINDING_STRIDE = 33496; // 0x82d8
-    field public static final int GL_VERTEX_SHADER_BIT = 1; // 0x1
-    field public static final int GL_WRITE_ONLY = 35001; // 0x88b9
-  }
-
-  public class GLES31Ext {
-    method public static void glBlendBarrierKHR();
-    method public static void glBlendEquationSeparateiEXT(int, int, int);
-    method public static void glBlendEquationiEXT(int, int);
-    method public static void glBlendFuncSeparateiEXT(int, int, int, int, int);
-    method public static void glBlendFunciEXT(int, int, int);
-    method public static void glColorMaskiEXT(int, boolean, boolean, boolean, boolean);
-    method public static void glCopyImageSubDataEXT(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int);
-    method public static void glDebugMessageCallbackKHR(android.opengl.GLES31Ext.DebugProcKHR);
-    method public static void glDebugMessageControlKHR(int, int, int, int, int[], int, boolean);
-    method public static void glDebugMessageControlKHR(int, int, int, int, java.nio.IntBuffer, boolean);
-    method public static void glDebugMessageInsertKHR(int, int, int, int, java.lang.String);
-    method public static void glDisableiEXT(int, int);
-    method public static void glEnableiEXT(int, int);
-    method public static void glFramebufferTextureEXT(int, int, int, int);
-    method public static android.opengl.GLES31Ext.DebugProcKHR glGetDebugMessageCallbackKHR();
-    method public static int glGetDebugMessageLogKHR(int, int, int[], int, int[], int, int[], int, int[], int, int[], int, byte[], int);
-    method public static int glGetDebugMessageLogKHR(int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer);
-    method public static java.lang.String[] glGetDebugMessageLogKHR(int, int[], int, int[], int, int[], int, int[], int);
-    method public static java.lang.String[] glGetDebugMessageLogKHR(int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer);
-    method public static java.lang.String glGetObjectLabelKHR(int, int);
-    method public static java.lang.String glGetObjectPtrLabelKHR(long);
-    method public static void glGetSamplerParameterIivEXT(int, int, int[], int);
-    method public static void glGetSamplerParameterIivEXT(int, int, java.nio.IntBuffer);
-    method public static void glGetSamplerParameterIuivEXT(int, int, int[], int);
-    method public static void glGetSamplerParameterIuivEXT(int, int, java.nio.IntBuffer);
-    method public static void glGetTexParameterIivEXT(int, int, int[], int);
-    method public static void glGetTexParameterIivEXT(int, int, java.nio.IntBuffer);
-    method public static void glGetTexParameterIuivEXT(int, int, int[], int);
-    method public static void glGetTexParameterIuivEXT(int, int, java.nio.IntBuffer);
-    method public static boolean glIsEnablediEXT(int, int);
-    method public static void glMinSampleShadingOES(float);
-    method public static void glObjectLabelKHR(int, int, int, java.lang.String);
-    method public static void glObjectPtrLabelKHR(long, java.lang.String);
-    method public static void glPatchParameteriEXT(int, int);
-    method public static void glPopDebugGroupKHR();
-    method public static void glPrimitiveBoundingBoxEXT(float, float, float, float, float, float, float, float);
-    method public static void glPushDebugGroupKHR(int, int, int, java.lang.String);
-    method public static void glSamplerParameterIivEXT(int, int, int[], int);
-    method public static void glSamplerParameterIivEXT(int, int, java.nio.IntBuffer);
-    method public static void glSamplerParameterIuivEXT(int, int, int[], int);
-    method public static void glSamplerParameterIuivEXT(int, int, java.nio.IntBuffer);
-    method public static void glTexBufferEXT(int, int, int);
-    method public static void glTexBufferRangeEXT(int, int, int, int, int);
-    method public static void glTexParameterIivEXT(int, int, int[], int);
-    method public static void glTexParameterIivEXT(int, int, java.nio.IntBuffer);
-    method public static void glTexParameterIuivEXT(int, int, int[], int);
-    method public static void glTexParameterIuivEXT(int, int, java.nio.IntBuffer);
-    method public static void glTexStorage3DMultisampleOES(int, int, int, int, int, int, boolean);
-    field public static final int GL_BLEND_ADVANCED_COHERENT_KHR = 37509; // 0x9285
-    field public static final int GL_BUFFER_KHR = 33504; // 0x82e0
-    field public static final int GL_CLAMP_TO_BORDER_EXT = 33069; // 0x812d
-    field public static final int GL_COLORBURN_KHR = 37530; // 0x929a
-    field public static final int GL_COLORDODGE_KHR = 37529; // 0x9299
-    field public static final int GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 37819; // 0x93bb
-    field public static final int GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 37816; // 0x93b8
-    field public static final int GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 37817; // 0x93b9
-    field public static final int GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 37818; // 0x93ba
-    field public static final int GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 37820; // 0x93bc
-    field public static final int GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 37821; // 0x93bd
-    field public static final int GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 37808; // 0x93b0
-    field public static final int GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 37809; // 0x93b1
-    field public static final int GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 37810; // 0x93b2
-    field public static final int GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 37811; // 0x93b3
-    field public static final int GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 37812; // 0x93b4
-    field public static final int GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 37813; // 0x93b5
-    field public static final int GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 37814; // 0x93b6
-    field public static final int GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 37815; // 0x93b7
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 37851; // 0x93db
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 37848; // 0x93d8
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 37849; // 0x93d9
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 37850; // 0x93da
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 37852; // 0x93dc
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 37853; // 0x93dd
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840; // 0x93d0
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 37841; // 0x93d1
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 37842; // 0x93d2
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 37843; // 0x93d3
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 37844; // 0x93d4
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 37845; // 0x93d5
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 37846; // 0x93d6
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 37847; // 0x93d7
-    field public static final int GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 2; // 0x2
-    field public static final int GL_DARKEN_KHR = 37527; // 0x9297
-    field public static final int GL_DEBUG_CALLBACK_FUNCTION_KHR = 33348; // 0x8244
-    field public static final int GL_DEBUG_CALLBACK_USER_PARAM_KHR = 33349; // 0x8245
-    field public static final int GL_DEBUG_GROUP_STACK_DEPTH_KHR = 33389; // 0x826d
-    field public static final int GL_DEBUG_LOGGED_MESSAGES_KHR = 37189; // 0x9145
-    field public static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 33347; // 0x8243
-    field public static final int GL_DEBUG_OUTPUT_KHR = 37600; // 0x92e0
-    field public static final int GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 33346; // 0x8242
-    field public static final int GL_DEBUG_SEVERITY_HIGH_KHR = 37190; // 0x9146
-    field public static final int GL_DEBUG_SEVERITY_LOW_KHR = 37192; // 0x9148
-    field public static final int GL_DEBUG_SEVERITY_MEDIUM_KHR = 37191; // 0x9147
-    field public static final int GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 33387; // 0x826b
-    field public static final int GL_DEBUG_SOURCE_API_KHR = 33350; // 0x8246
-    field public static final int GL_DEBUG_SOURCE_APPLICATION_KHR = 33354; // 0x824a
-    field public static final int GL_DEBUG_SOURCE_OTHER_KHR = 33355; // 0x824b
-    field public static final int GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 33352; // 0x8248
-    field public static final int GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 33353; // 0x8249
-    field public static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 33351; // 0x8247
-    field public static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 33357; // 0x824d
-    field public static final int GL_DEBUG_TYPE_ERROR_KHR = 33356; // 0x824c
-    field public static final int GL_DEBUG_TYPE_MARKER_KHR = 33384; // 0x8268
-    field public static final int GL_DEBUG_TYPE_OTHER_KHR = 33361; // 0x8251
-    field public static final int GL_DEBUG_TYPE_PERFORMANCE_KHR = 33360; // 0x8250
-    field public static final int GL_DEBUG_TYPE_POP_GROUP_KHR = 33386; // 0x826a
-    field public static final int GL_DEBUG_TYPE_PORTABILITY_KHR = 33359; // 0x824f
-    field public static final int GL_DEBUG_TYPE_PUSH_GROUP_KHR = 33385; // 0x8269
-    field public static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 33358; // 0x824e
-    field public static final int GL_DECODE_EXT = 35401; // 0x8a49
-    field public static final int GL_DIFFERENCE_KHR = 37534; // 0x929e
-    field public static final int GL_EXCLUSION_KHR = 37536; // 0x92a0
-    field public static final int GL_FIRST_VERTEX_CONVENTION_EXT = 36429; // 0x8e4d
-    field public static final int GL_FRACTIONAL_EVEN_EXT = 36476; // 0x8e7c
-    field public static final int GL_FRACTIONAL_ODD_EXT = 36475; // 0x8e7b
-    field public static final int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 36445; // 0x8e5d
-    field public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 36263; // 0x8da7
-    field public static final int GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 37650; // 0x9312
-    field public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 36264; // 0x8da8
-    field public static final int GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 35095; // 0x8917
-    field public static final int GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 35096; // 0x8918
-    field public static final int GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 35094; // 0x8916
-    field public static final int GL_GEOMETRY_SHADER_BIT_EXT = 4; // 0x4
-    field public static final int GL_GEOMETRY_SHADER_EXT = 36313; // 0x8dd9
-    field public static final int GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 34943; // 0x887f
-    field public static final int GL_HARDLIGHT_KHR = 37531; // 0x929b
-    field public static final int GL_HSL_COLOR_KHR = 37551; // 0x92af
-    field public static final int GL_HSL_HUE_KHR = 37549; // 0x92ad
-    field public static final int GL_HSL_LUMINOSITY_KHR = 37552; // 0x92b0
-    field public static final int GL_HSL_SATURATION_KHR = 37550; // 0x92ae
-    field public static final int GL_IMAGE_BUFFER_EXT = 36945; // 0x9051
-    field public static final int GL_IMAGE_CUBE_MAP_ARRAY_EXT = 36948; // 0x9054
-    field public static final int GL_INT_IMAGE_BUFFER_EXT = 36956; // 0x905c
-    field public static final int GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36959; // 0x905f
-    field public static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37132; // 0x910c
-    field public static final int GL_INT_SAMPLER_BUFFER_EXT = 36304; // 0x8dd0
-    field public static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 36878; // 0x900e
-    field public static final int GL_ISOLINES_EXT = 36474; // 0x8e7a
-    field public static final int GL_IS_PER_PATCH_EXT = 37607; // 0x92e7
-    field public static final int GL_LAST_VERTEX_CONVENTION_EXT = 36430; // 0x8e4e
-    field public static final int GL_LAYER_PROVOKING_VERTEX_EXT = 33374; // 0x825e
-    field public static final int GL_LIGHTEN_KHR = 37528; // 0x9298
-    field public static final int GL_LINES_ADJACENCY_EXT = 10; // 0xa
-    field public static final int GL_LINE_STRIP_ADJACENCY_EXT = 11; // 0xb
-    field public static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 35378; // 0x8a32
-    field public static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36382; // 0x8e1e
-    field public static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36383; // 0x8e1f
-    field public static final int GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 33388; // 0x826c
-    field public static final int GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 37188; // 0x9144
-    field public static final int GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 37187; // 0x9143
-    field public static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 36444; // 0x8e5c
-    field public static final int GL_MAX_FRAMEBUFFER_LAYERS_EXT = 37655; // 0x9317
-    field public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 37589; // 0x92d5
-    field public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 37583; // 0x92cf
-    field public static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 37069; // 0x90cd
-    field public static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 37155; // 0x9123
-    field public static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 37156; // 0x9124
-    field public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 36320; // 0x8de0
-    field public static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 36442; // 0x8e5a
-    field public static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 37079; // 0x90d7
-    field public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 35881; // 0x8c29
-    field public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 36321; // 0x8de1
-    field public static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 35372; // 0x8a2c
-    field public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 36319; // 0x8ddf
-    field public static final int GL_MAX_LABEL_LENGTH_KHR = 33512; // 0x82e8
-    field public static final int GL_MAX_PATCH_VERTICES_EXT = 36477; // 0x8e7d
-    field public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 37587; // 0x92d3
-    field public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 37581; // 0x92cd
-    field public static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 37067; // 0x90cb
-    field public static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 34924; // 0x886c
-    field public static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 36483; // 0x8e83
-    field public static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 37080; // 0x90d8
-    field public static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 36481; // 0x8e81
-    field public static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 36485; // 0x8e85
-    field public static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 36489; // 0x8e89
-    field public static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36479; // 0x8e7f
-    field public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 37588; // 0x92d4
-    field public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 37582; // 0x92ce
-    field public static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 37068; // 0x90cc
-    field public static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 34925; // 0x886d
-    field public static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 36486; // 0x8e86
-    field public static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 37081; // 0x90d9
-    field public static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 36482; // 0x8e82
-    field public static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 36490; // 0x8e8a
-    field public static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36480; // 0x8e80
-    field public static final int GL_MAX_TESS_GEN_LEVEL_EXT = 36478; // 0x8e7e
-    field public static final int GL_MAX_TESS_PATCH_COMPONENTS_EXT = 36484; // 0x8e84
-    field public static final int GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 35883; // 0x8c2b
-    field public static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 36443; // 0x8e5b
-    field public static final int GL_MIN_SAMPLE_SHADING_VALUE_OES = 35895; // 0x8c37
-    field public static final int GL_MULTIPLY_KHR = 37524; // 0x9294
-    field public static final int GL_OVERLAY_KHR = 37526; // 0x9296
-    field public static final int GL_PATCHES_EXT = 14; // 0xe
-    field public static final int GL_PATCH_VERTICES_EXT = 36466; // 0x8e72
-    field public static final int GL_PRIMITIVES_GENERATED_EXT = 35975; // 0x8c87
-    field public static final int GL_PRIMITIVE_BOUNDING_BOX_EXT = 37566; // 0x92be
-    field public static final int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 33313; // 0x8221
-    field public static final int GL_PROGRAM_KHR = 33506; // 0x82e2
-    field public static final int GL_QUADS_EXT = 7; // 0x7
-    field public static final int GL_QUERY_KHR = 33507; // 0x82e3
-    field public static final int GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 37641; // 0x9309
-    field public static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 37639; // 0x9307
-    field public static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 37640; // 0x9308
-    field public static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37131; // 0x910b
-    field public static final int GL_SAMPLER_BUFFER_EXT = 36290; // 0x8dc2
-    field public static final int GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 36876; // 0x900c
-    field public static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 36877; // 0x900d
-    field public static final int GL_SAMPLER_KHR = 33510; // 0x82e6
-    field public static final int GL_SAMPLE_SHADING_OES = 35894; // 0x8c36
-    field public static final int GL_SCREEN_KHR = 37525; // 0x9295
-    field public static final int GL_SHADER_KHR = 33505; // 0x82e1
-    field public static final int GL_SKIP_DECODE_EXT = 35402; // 0x8a4a
-    field public static final int GL_SOFTLIGHT_KHR = 37532; // 0x929c
-    field public static final int GL_STACK_OVERFLOW_KHR = 1283; // 0x503
-    field public static final int GL_STACK_UNDERFLOW_KHR = 1284; // 0x504
-    field public static final int GL_STENCIL_INDEX8_OES = 36168; // 0x8d48
-    field public static final int GL_STENCIL_INDEX_OES = 6401; // 0x1901
-    field public static final int GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 36469; // 0x8e75
-    field public static final int GL_TESS_CONTROL_SHADER_BIT_EXT = 8; // 0x8
-    field public static final int GL_TESS_CONTROL_SHADER_EXT = 36488; // 0x8e88
-    field public static final int GL_TESS_EVALUATION_SHADER_BIT_EXT = 16; // 0x10
-    field public static final int GL_TESS_EVALUATION_SHADER_EXT = 36487; // 0x8e87
-    field public static final int GL_TESS_GEN_MODE_EXT = 36470; // 0x8e76
-    field public static final int GL_TESS_GEN_POINT_MODE_EXT = 36473; // 0x8e79
-    field public static final int GL_TESS_GEN_SPACING_EXT = 36471; // 0x8e77
-    field public static final int GL_TESS_GEN_VERTEX_ORDER_EXT = 36472; // 0x8e78
-    field public static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 37122; // 0x9102
-    field public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 37125; // 0x9105
-    field public static final int GL_TEXTURE_BINDING_BUFFER_EXT = 35884; // 0x8c2c
-    field public static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 36874; // 0x900a
-    field public static final int GL_TEXTURE_BORDER_COLOR_EXT = 4100; // 0x1004
-    field public static final int GL_TEXTURE_BUFFER_BINDING_EXT = 35882; // 0x8c2a
-    field public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 35885; // 0x8c2d
-    field public static final int GL_TEXTURE_BUFFER_EXT = 35882; // 0x8c2a
-    field public static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 37279; // 0x919f
-    field public static final int GL_TEXTURE_BUFFER_OFFSET_EXT = 37277; // 0x919d
-    field public static final int GL_TEXTURE_BUFFER_SIZE_EXT = 37278; // 0x919e
-    field public static final int GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 36873; // 0x9009
-    field public static final int GL_TEXTURE_SRGB_DECODE_EXT = 35400; // 0x8a48
-    field public static final int GL_TRIANGLES_ADJACENCY_EXT = 12; // 0xc
-    field public static final int GL_TRIANGLE_STRIP_ADJACENCY_EXT = 13; // 0xd
-    field public static final int GL_UNDEFINED_VERTEX_EXT = 33376; // 0x8260
-    field public static final int GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 36967; // 0x9067
-    field public static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36970; // 0x906a
-    field public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37133; // 0x910d
-    field public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 36312; // 0x8dd8
-    field public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 36879; // 0x900f
-    field public static final int GL_VERTEX_ARRAY_KHR = 32884; // 0x8074
-  }
-
-  public static abstract interface GLES31Ext.DebugProcKHR {
-    method public abstract void onMessage(int, int, int, int, java.lang.String);
-  }
-
   public class GLException extends java.lang.RuntimeException {
     ctor public GLException(int);
     ctor public GLException(int, java.lang.String);
diff --git a/opengl/java/android/opengl/GLES31.java b/opengl/java/android/opengl/GLES31.java
index 3cbaa6079bf8b..9f8728fa03e93 100644
--- a/opengl/java/android/opengl/GLES31.java
+++ b/opengl/java/android/opengl/GLES31.java
@@ -19,6 +19,7 @@
 package android.opengl;
 
 /** OpenGL ES 3.1
+ * @hide
  */
 public class GLES31 extends GLES30 {
 
diff --git a/opengl/java/android/opengl/GLES31Ext.java b/opengl/java/android/opengl/GLES31Ext.java
index c362a36316ad7..af34cf0fd8ae6 100644
--- a/opengl/java/android/opengl/GLES31Ext.java
+++ b/opengl/java/android/opengl/GLES31Ext.java
@@ -18,6 +18,7 @@
 
 package android.opengl;
 
+/** @hide */
 public class GLES31Ext {
 
     // GL_KHR_blend_equation_advanced

From ff31fdfc23631813edec5e2002ae0fda9d6166d3 Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Wed, 27 May 2015 23:20:48 +0200
Subject: [PATCH 02/12] fix revert error

Former-commit-id: c6bfe05d7404f6842c5275035026b10e42435cb3
---
 core/jni/android_opengl_GLES31.cpp    | 4 ++--
 core/jni/android_opengl_GLES31Ext.cpp | 4 ++--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/core/jni/android_opengl_GLES31.cpp b/core/jni/android_opengl_GLES31.cpp
index bc9fc5d6b4377..c634b917fbef1 100644
--- a/core/jni/android_opengl_GLES31.cpp
+++ b/core/jni/android_opengl_GLES31.cpp
@@ -18,8 +18,8 @@
 
 #include <stdint.h>
 #include <GLES3/gl31.h>
-#include <jni.h>
-#include <JNIHelp.h>
+#include "jni.h"
+#include "JNIHelp.h"
 #include <android_runtime/AndroidRuntime.h>
 #include <utils/misc.h>
 #include <assert.h>
diff --git a/core/jni/android_opengl_GLES31Ext.cpp b/core/jni/android_opengl_GLES31Ext.cpp
index d76c166489c25..270b50e034796 100644
--- a/core/jni/android_opengl_GLES31Ext.cpp
+++ b/core/jni/android_opengl_GLES31Ext.cpp
@@ -19,8 +19,8 @@
 #include <GLES3/gl31.h>
 #include <GLES2/gl2ext.h>
 
-#include <jni.h>
-#include <JNIHelp.h>
+#include "jni.h"
+#include "JNIHelp.h"
 #include <android_runtime/AndroidRuntime.h>
 #include <utils/misc.h>
 #include <assert.h>

From e720871ea06b5f3a6351f3ca5414508944fa5f76 Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Wed, 27 May 2015 23:21:02 +0200
Subject: [PATCH 03/12] Revert "opengl: Add GLES31 and GLES31Ext classes"

This reverts commit f8a1afa00e514edf1eedba4ae1ab47629dbc195d [formerly 7ab63acdd0a257272512d0bcf5e06036fa0b9fdf].


Former-commit-id: b5f13f0e5c5e4f8c41c0f6e39cf026c020542174
---
 core/jni/Android.mk                       |    2 -
 core/jni/AndroidRuntime.cpp               |    4 -
 core/jni/android_opengl_GLES31.cpp        | 3168 ---------------------
 core/jni/android_opengl_GLES31Ext.cpp     | 1385 ---------
 opengl/java/android/opengl/GLES31.java    | 1100 -------
 opengl/java/android/opengl/GLES31Ext.java |  679 -----
 6 files changed, 6338 deletions(-)
 delete mode 100644 core/jni/android_opengl_GLES31.cpp
 delete mode 100644 core/jni/android_opengl_GLES31Ext.cpp
 delete mode 100644 opengl/java/android/opengl/GLES31.java
 delete mode 100644 opengl/java/android/opengl/GLES31Ext.java

diff --git a/core/jni/Android.mk b/core/jni/Android.mk
index b57476149299a..8df73f25653f6 100644
--- a/core/jni/Android.mk
+++ b/core/jni/Android.mk
@@ -35,8 +35,6 @@ LOCAL_SRC_FILES:= \
 	android_opengl_GLES11Ext.cpp \
 	android_opengl_GLES20.cpp \
 	android_opengl_GLES30.cpp \
-	android_opengl_GLES31.cpp \
-	android_opengl_GLES31Ext.cpp \
 	android_database_CursorWindow.cpp \
 	android_database_SQLiteCommon.cpp \
 	android_database_SQLiteConnection.cpp \
diff --git a/core/jni/AndroidRuntime.cpp b/core/jni/AndroidRuntime.cpp
index 208171138ee4e..1a4461cad34ea 100644
--- a/core/jni/AndroidRuntime.cpp
+++ b/core/jni/AndroidRuntime.cpp
@@ -73,8 +73,6 @@ extern int register_android_opengl_jni_GLES11(JNIEnv* env);
 extern int register_android_opengl_jni_GLES11Ext(JNIEnv* env);
 extern int register_android_opengl_jni_GLES20(JNIEnv* env);
 extern int register_android_opengl_jni_GLES30(JNIEnv* env);
-extern int register_android_opengl_jni_GLES31(JNIEnv* env);
-extern int register_android_opengl_jni_GLES31Ext(JNIEnv* env);
 
 extern int register_android_hardware_Camera(JNIEnv *env);
 extern int register_android_hardware_camera2_CameraMetadata(JNIEnv *env);
@@ -1288,8 +1286,6 @@ static const RegJNIRec gRegJNI[] = {
     REG_JNI(register_android_opengl_jni_GLES11Ext),
     REG_JNI(register_android_opengl_jni_GLES20),
     REG_JNI(register_android_opengl_jni_GLES30),
-    REG_JNI(register_android_opengl_jni_GLES31),
-    REG_JNI(register_android_opengl_jni_GLES31Ext),
 
     REG_JNI(register_android_graphics_Bitmap),
     REG_JNI(register_android_graphics_BitmapFactory),
diff --git a/core/jni/android_opengl_GLES31.cpp b/core/jni/android_opengl_GLES31.cpp
deleted file mode 100644
index c634b917fbef1..0000000000000
--- a/core/jni/android_opengl_GLES31.cpp
+++ /dev/null
@@ -1,3168 +0,0 @@
-/*
- * Copyright 2014 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-// This source file is automatically generated
-
-#include <stdint.h>
-#include <GLES3/gl31.h>
-#include "jni.h"
-#include "JNIHelp.h"
-#include <android_runtime/AndroidRuntime.h>
-#include <utils/misc.h>
-#include <assert.h>
-
-static int initialized = 0;
-
-static jclass nioAccessClass;
-static jclass bufferClass;
-static jmethodID getBasePointerID;
-static jmethodID getBaseArrayID;
-static jmethodID getBaseArrayOffsetID;
-static jfieldID positionID;
-static jfieldID limitID;
-static jfieldID elementSizeShiftID;
-
-
-/* special calls implemented in Android's GLES wrapper used to more
- * efficiently bound-check passed arrays */
-extern "C" {
-#ifdef GL_VERSION_ES_CM_1_1
-GL_API void GL_APIENTRY glColorPointerBounds(GLint size, GLenum type, GLsizei stride,
-        const GLvoid *ptr, GLsizei count);
-GL_API void GL_APIENTRY glNormalPointerBounds(GLenum type, GLsizei stride,
-        const GLvoid *pointer, GLsizei count);
-GL_API void GL_APIENTRY glTexCoordPointerBounds(GLint size, GLenum type,
-        GLsizei stride, const GLvoid *pointer, GLsizei count);
-GL_API void GL_APIENTRY glVertexPointerBounds(GLint size, GLenum type,
-        GLsizei stride, const GLvoid *pointer, GLsizei count);
-GL_API void GL_APIENTRY glPointSizePointerOESBounds(GLenum type,
-        GLsizei stride, const GLvoid *pointer, GLsizei count);
-GL_API void GL_APIENTRY glMatrixIndexPointerOESBounds(GLint size, GLenum type,
-        GLsizei stride, const GLvoid *pointer, GLsizei count);
-GL_API void GL_APIENTRY glWeightPointerOESBounds(GLint size, GLenum type,
-        GLsizei stride, const GLvoid *pointer, GLsizei count);
-#endif
-#ifdef GL_ES_VERSION_2_0
-static void glVertexAttribPointerBounds(GLuint indx, GLint size, GLenum type,
-        GLboolean normalized, GLsizei stride, const GLvoid *pointer, GLsizei count) {
-    glVertexAttribPointer(indx, size, type, normalized, stride, pointer);
-}
-#endif
-#ifdef GL_ES_VERSION_3_0
-static void glVertexAttribIPointerBounds(GLuint indx, GLint size, GLenum type,
-        GLsizei stride, const GLvoid *pointer, GLsizei count) {
-    glVertexAttribIPointer(indx, size, type, stride, pointer);
-}
-#endif
-}
-
-/* Cache method IDs each time the class is loaded. */
-
-static void
-nativeClassInit(JNIEnv *_env, jclass glImplClass)
-{
-    jclass nioAccessClassLocal = _env->FindClass("java/nio/NIOAccess");
-    nioAccessClass = (jclass) _env->NewGlobalRef(nioAccessClassLocal);
-
-    jclass bufferClassLocal = _env->FindClass("java/nio/Buffer");
-    bufferClass = (jclass) _env->NewGlobalRef(bufferClassLocal);
-
-    getBasePointerID = _env->GetStaticMethodID(nioAccessClass,
-            "getBasePointer", "(Ljava/nio/Buffer;)J");
-    getBaseArrayID = _env->GetStaticMethodID(nioAccessClass,
-            "getBaseArray", "(Ljava/nio/Buffer;)Ljava/lang/Object;");
-    getBaseArrayOffsetID = _env->GetStaticMethodID(nioAccessClass,
-            "getBaseArrayOffset", "(Ljava/nio/Buffer;)I");
-
-    positionID = _env->GetFieldID(bufferClass, "position", "I");
-    limitID = _env->GetFieldID(bufferClass, "limit", "I");
-    elementSizeShiftID =
-        _env->GetFieldID(bufferClass, "_elementSizeShift", "I");
-}
-
-static void *
-getPointer(JNIEnv *_env, jobject buffer, jarray *array, jint *remaining, jint *offset)
-{
-    jint position;
-    jint limit;
-    jint elementSizeShift;
-    jlong pointer;
-
-    position = _env->GetIntField(buffer, positionID);
-    limit = _env->GetIntField(buffer, limitID);
-    elementSizeShift = _env->GetIntField(buffer, elementSizeShiftID);
-    *remaining = (limit - position) << elementSizeShift;
-    pointer = _env->CallStaticLongMethod(nioAccessClass,
-            getBasePointerID, buffer);
-    if (pointer != 0L) {
-        *array = NULL;
-        return reinterpret_cast<void*>(pointer);
-    }
-
-    *array = (jarray) _env->CallStaticObjectMethod(nioAccessClass,
-            getBaseArrayID, buffer);
-    *offset = _env->CallStaticIntMethod(nioAccessClass,
-            getBaseArrayOffsetID, buffer);
-
-    return NULL;
-}
-
-static void
-releasePointer(JNIEnv *_env, jarray array, void *data, jboolean commit)
-{
-    _env->ReleasePrimitiveArrayCritical(array, data,
-                       commit ? 0 : JNI_ABORT);
-}
-
-static void *
-getDirectBufferPointer(JNIEnv *_env, jobject buffer) {
-    char* buf = (char*) _env->GetDirectBufferAddress(buffer);
-    if (buf) {
-        jint position = _env->GetIntField(buffer, positionID);
-        jint elementSizeShift = _env->GetIntField(buffer, elementSizeShiftID);
-        buf += position << elementSizeShift;
-    } else {
-        jniThrowException(_env, "java/lang/IllegalArgumentException",
-                          "Must use a native order direct Buffer");
-    }
-    return (void*) buf;
-}
-
-// --------------------------------------------------------------------------
-
-/*
- * returns the number of values glGet returns for a given pname.
- *
- * The code below is written such that pnames requiring only one values
- * are the default (and are not explicitely tested for). This makes the
- * checking code much shorter/readable/efficient.
- *
- * This means that unknown pnames (e.g.: extensions) will default to 1. If
- * that unknown pname needs more than 1 value, then the validation check
- * is incomplete and the app may crash if it passed the wrong number params.
- */
-static int getNeededCount(GLint pname) {
-    int needed = 1;
-#ifdef GL_ES_VERSION_2_0
-    // GLES 2.x pnames
-    switch (pname) {
-        case GL_ALIASED_LINE_WIDTH_RANGE:
-        case GL_ALIASED_POINT_SIZE_RANGE:
-            needed = 2;
-            break;
-
-        case GL_BLEND_COLOR:
-        case GL_COLOR_CLEAR_VALUE:
-        case GL_COLOR_WRITEMASK:
-        case GL_SCISSOR_BOX:
-        case GL_VIEWPORT:
-            needed = 4;
-            break;
-
-        case GL_COMPRESSED_TEXTURE_FORMATS:
-            glGetIntegerv(GL_NUM_COMPRESSED_TEXTURE_FORMATS, &needed);
-            break;
-
-        case GL_SHADER_BINARY_FORMATS:
-            glGetIntegerv(GL_NUM_SHADER_BINARY_FORMATS, &needed);
-            break;
-    }
-#endif
-
-#ifdef GL_VERSION_ES_CM_1_1
-    // GLES 1.x pnames
-    switch (pname) {
-        case GL_ALIASED_LINE_WIDTH_RANGE:
-        case GL_ALIASED_POINT_SIZE_RANGE:
-        case GL_DEPTH_RANGE:
-        case GL_SMOOTH_LINE_WIDTH_RANGE:
-        case GL_SMOOTH_POINT_SIZE_RANGE:
-            needed = 2;
-            break;
-
-        case GL_CURRENT_NORMAL:
-        case GL_POINT_DISTANCE_ATTENUATION:
-            needed = 3;
-            break;
-
-        case GL_COLOR_CLEAR_VALUE:
-        case GL_COLOR_WRITEMASK:
-        case GL_CURRENT_COLOR:
-        case GL_CURRENT_TEXTURE_COORDS:
-        case GL_FOG_COLOR:
-        case GL_LIGHT_MODEL_AMBIENT:
-        case GL_SCISSOR_BOX:
-        case GL_VIEWPORT:
-            needed = 4;
-            break;
-
-        case GL_MODELVIEW_MATRIX:
-        case GL_PROJECTION_MATRIX:
-        case GL_TEXTURE_MATRIX:
-            needed = 16;
-            break;
-
-        case GL_COMPRESSED_TEXTURE_FORMATS:
-            glGetIntegerv(GL_NUM_COMPRESSED_TEXTURE_FORMATS, &needed);
-            break;
-    }
-#endif
-    return needed;
-}
-
-template <typename JTYPEARRAY, typename CTYPE, void GET(GLenum, CTYPE*)>
-static void
-get
-  (JNIEnv *_env, jobject _this, jint pname, JTYPEARRAY params_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType;
-    const char * _exceptionMessage;
-    CTYPE *params_base = (CTYPE *) 0;
-    jint _remaining;
-    CTYPE *params = (CTYPE *) 0;
-    int _needed = 0;
-
-    if (!params_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "params == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(params_ref) - offset;
-    _needed = getNeededCount(pname);
-    // if we didn't find this pname, we just assume the user passed
-    // an array of the right size -- this might happen with extensions
-    // or if we forget an enum here.
-    if (_remaining < _needed) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "length - offset < needed";
-        goto exit;
-    }
-    params_base = (CTYPE *)
-        _env->GetPrimitiveArrayCritical(params_ref, (jboolean *)0);
-    params = params_base + offset;
-
-    GET(
-        (GLenum)pname,
-        (CTYPE *)params
-    );
-
-exit:
-    if (params_base) {
-        _env->ReleasePrimitiveArrayCritical(params_ref, params_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-
-template <typename CTYPE, void GET(GLenum, CTYPE*)>
-static void
-getarray
-  (JNIEnv *_env, jobject _this, jint pname, jobject params_buf) {
-    jint _exception = 0;
-    const char * _exceptionType;
-    const char * _exceptionMessage;
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    CTYPE *params = (CTYPE *) 0;
-    int _needed = 0;
-
-    params = (CTYPE *)getPointer(_env, params_buf, &_array, &_remaining, &_bufferOffset);
-    _remaining /= sizeof(CTYPE);    // convert from bytes to item count
-    _needed = getNeededCount(pname);
-    // if we didn't find this pname, we just assume the user passed
-    // an array of the right size -- this might happen with extensions
-    // or if we forget an enum here.
-    if (_needed>0 && _remaining < _needed) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "remaining() < needed";
-        goto exit;
-    }
-    if (params == NULL) {
-        char * _paramsBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        params = (CTYPE *) (_paramsBase + _bufferOffset);
-    }
-    GET(
-        (GLenum)pname,
-        (CTYPE *)params
-    );
-
-exit:
-    if (_array) {
-        releasePointer(_env, _array, params, _exception ? JNI_FALSE : JNI_TRUE);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-// --------------------------------------------------------------------------
-/* void glDispatchCompute ( GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z ) */
-static void
-android_glDispatchCompute__III
-  (JNIEnv *_env, jobject _this, jint num_groups_x, jint num_groups_y, jint num_groups_z) {
-    glDispatchCompute(
-        (GLuint)num_groups_x,
-        (GLuint)num_groups_y,
-        (GLuint)num_groups_z
-    );
-}
-
-/* void glDispatchComputeIndirect ( GLintptr indirect ) */
-static void android_glDispatchComputeIndirect(JNIEnv *_env, jobject, jlong indirect) {
-    // 'indirect' is a byte offset, not a pointer. GL checks for negative and too-large values.
-    // Here we only need to check for successful 64-bit to 32-bit conversion.
-    // - jlong is a int64_t (jni.h)
-    // - GLintptr is a long (khrplatform.h)
-    if (sizeof(GLintptr) != sizeof(jlong) && (indirect < LONG_MIN || indirect > LONG_MAX)) {
-        jniThrowException(_env, "java/lang/IllegalArgumentException", "indirect offset too large");
-        return;
-    }
-    glDispatchComputeIndirect((GLintptr)indirect);
-}
-
-/* void glDrawArraysIndirect ( GLenum mode, const void *indirect ) */
-static void android_glDrawArraysIndirect(JNIEnv *_env, jobject, int mode, jlong indirect) {
-    // In OpenGL ES, 'indirect' is a byte offset into a buffer, not a raw pointer.
-    // GL checks for too-large values. Here we only need to check for successful signed 64-bit
-    // to unsigned 32-bit conversion.
-    if (sizeof(void*) != sizeof(jlong) && indirect > UINTPTR_MAX) {
-        jniThrowException(_env, "java/lang/IllegalArgumentException", "indirect offset too large");
-        return;
-    }
-    glDrawArraysIndirect(mode, (const void*)indirect);
-}
-
-/* void glDrawElementsIndirect ( GLenum mode, GLenum type, const void *indirect ) */
-static void android_glDrawElementsIndirect(JNIEnv *_env, jobject, jint mode, jint type, jlong indirect) {
-    // In OpenGL ES, 'indirect' is a byte offset into a buffer, not a raw pointer.
-    // GL checks for too-large values. Here we only need to check for successful signed 64-bit
-    // to unsigned 32-bit conversion.
-    if (sizeof(void*) != sizeof(jlong) && indirect > UINTPTR_MAX) {
-        jniThrowException(_env, "java/lang/IllegalArgumentException", "indirect offset too large");
-        return;
-    }
-    glDrawElementsIndirect(mode, type, (const void*)indirect);
-}
-
-/* void glFramebufferParameteri ( GLenum target, GLenum pname, GLint param ) */
-static void
-android_glFramebufferParameteri__III
-  (JNIEnv *_env, jobject _this, jint target, jint pname, jint param) {
-    glFramebufferParameteri(
-        (GLenum)target,
-        (GLenum)pname,
-        (GLint)param
-    );
-}
-
-/* void glGetFramebufferParameteriv ( GLenum target, GLenum pname, GLint *params ) */
-static void
-android_glGetFramebufferParameteriv__II_3II
-  (JNIEnv *_env, jobject _this, jint target, jint pname, jintArray params_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLint *params_base = (GLint *) 0;
-    jint _remaining;
-    GLint *params = (GLint *) 0;
-
-    if (!params_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "params == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(params_ref) - offset;
-    params_base = (GLint *)
-        _env->GetPrimitiveArrayCritical(params_ref, (jboolean *)0);
-    params = params_base + offset;
-
-    glGetFramebufferParameteriv(
-        (GLenum)target,
-        (GLenum)pname,
-        (GLint *)params
-    );
-
-exit:
-    if (params_base) {
-        _env->ReleasePrimitiveArrayCritical(params_ref, params_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glGetFramebufferParameteriv ( GLenum target, GLenum pname, GLint *params ) */
-static void
-android_glGetFramebufferParameteriv__IILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint target, jint pname, jobject params_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLint *params = (GLint *) 0;
-
-    params = (GLint *)getPointer(_env, params_buf, &_array, &_remaining, &_bufferOffset);
-    if (params == NULL) {
-        char * _paramsBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        params = (GLint *) (_paramsBase + _bufferOffset);
-    }
-    glGetFramebufferParameteriv(
-        (GLenum)target,
-        (GLenum)pname,
-        (GLint *)params
-    );
-    if (_array) {
-        releasePointer(_env, _array, params, JNI_TRUE);
-    }
-}
-
-/* void glGetProgramInterfaceiv ( GLuint program, GLenum programInterface, GLenum pname, GLint *params ) */
-static void
-android_glGetProgramInterfaceiv__III_3II
-  (JNIEnv *_env, jobject _this, jint program, jint programInterface, jint pname, jintArray params_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLint *params_base = (GLint *) 0;
-    jint _remaining;
-    GLint *params = (GLint *) 0;
-
-    if (!params_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "params == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(params_ref) - offset;
-    params_base = (GLint *)
-        _env->GetPrimitiveArrayCritical(params_ref, (jboolean *)0);
-    params = params_base + offset;
-
-    glGetProgramInterfaceiv(
-        (GLuint)program,
-        (GLenum)programInterface,
-        (GLenum)pname,
-        (GLint *)params
-    );
-
-exit:
-    if (params_base) {
-        _env->ReleasePrimitiveArrayCritical(params_ref, params_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glGetProgramInterfaceiv ( GLuint program, GLenum programInterface, GLenum pname, GLint *params ) */
-static void
-android_glGetProgramInterfaceiv__IIILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint programInterface, jint pname, jobject params_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLint *params = (GLint *) 0;
-
-    params = (GLint *)getPointer(_env, params_buf, &_array, &_remaining, &_bufferOffset);
-    if (params == NULL) {
-        char * _paramsBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        params = (GLint *) (_paramsBase + _bufferOffset);
-    }
-    glGetProgramInterfaceiv(
-        (GLuint)program,
-        (GLenum)programInterface,
-        (GLenum)pname,
-        (GLint *)params
-    );
-    if (_array) {
-        releasePointer(_env, _array, params, JNI_TRUE);
-    }
-}
-
-/* GLuint glGetProgramResourceIndex ( GLuint program, GLenum programInterface, const GLchar *name ) */
-static jint
-android_glGetProgramResourceIndex__IILjava_lang_String_2
-  (JNIEnv *_env, jobject _this, jint program, jint programInterface, jstring name) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLuint _returnValue = 0;
-    const char* _nativename = 0;
-
-    if (!name) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "name == null";
-        goto exit;
-    }
-    _nativename = _env->GetStringUTFChars(name, 0);
-
-    _returnValue = glGetProgramResourceIndex(
-        (GLuint)program,
-        (GLenum)programInterface,
-        (GLchar *)_nativename
-    );
-
-exit:
-    if (_nativename) {
-        _env->ReleaseStringUTFChars(name, _nativename);
-    }
-
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-    return (jint)_returnValue;
-}
-
-/* void glGetProgramResourceName ( GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name ) */
-static jstring
-android_glGetProgramResourceName
-  (JNIEnv *_env, jobject _this, jint program, jint programInterface, jint index) {
-    jniThrowException(_env, "java/lang/UnsupportedOperationException", "not yet implemented");
-    return NULL;
-}
-
-/* void glGetProgramResourceiv ( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params ) */
-static void
-android_glGetProgramResourceiv__IIII_3III_3II_3II
-  (JNIEnv *_env, jobject _this, jint program, jint programInterface, jint index, jint propCount, jintArray props_ref, jint propsOffset, jint bufSize, jintArray length_ref, jint lengthOffset, jintArray params_ref, jint paramsOffset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLenum *props_base = (GLenum *) 0;
-    jint _propsRemaining;
-    GLenum *props = (GLenum *) 0;
-    GLsizei *length_base = (GLsizei *) 0;
-    jint _lengthRemaining;
-    GLsizei *length = (GLsizei *) 0;
-    GLint *params_base = (GLint *) 0;
-    jint _paramsRemaining;
-    GLint *params = (GLint *) 0;
-
-    if (!props_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "props == null";
-        goto exit;
-    }
-    if (propsOffset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "propsOffset < 0";
-        goto exit;
-    }
-    _propsRemaining = _env->GetArrayLength(props_ref) - propsOffset;
-    props_base = (GLenum *)
-        _env->GetPrimitiveArrayCritical(props_ref, (jboolean *)0);
-    props = props_base + propsOffset;
-
-    if (!length_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "length == null";
-        goto exit;
-    }
-    if (lengthOffset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "lengthOffset < 0";
-        goto exit;
-    }
-    _lengthRemaining = _env->GetArrayLength(length_ref) - lengthOffset;
-    length_base = (GLsizei *)
-        _env->GetPrimitiveArrayCritical(length_ref, (jboolean *)0);
-    length = length_base + lengthOffset;
-
-    if (!params_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "params == null";
-        goto exit;
-    }
-    if (paramsOffset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "paramsOffset < 0";
-        goto exit;
-    }
-    _paramsRemaining = _env->GetArrayLength(params_ref) - paramsOffset;
-    params_base = (GLint *)
-        _env->GetPrimitiveArrayCritical(params_ref, (jboolean *)0);
-    params = params_base + paramsOffset;
-
-    glGetProgramResourceiv(
-        (GLuint)program,
-        (GLenum)programInterface,
-        (GLuint)index,
-        (GLsizei)propCount,
-        (GLenum *)props,
-        (GLsizei)bufSize,
-        (GLsizei *)length,
-        (GLint *)params
-    );
-
-exit:
-    if (params_base) {
-        _env->ReleasePrimitiveArrayCritical(params_ref, params_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (length_base) {
-        _env->ReleasePrimitiveArrayCritical(length_ref, length_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (props_base) {
-        _env->ReleasePrimitiveArrayCritical(props_ref, props_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glGetProgramResourceiv ( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params ) */
-static void
-android_glGetProgramResourceiv__IIIILjava_nio_IntBuffer_2ILjava_nio_IntBuffer_2Ljava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint programInterface, jint index, jint propCount, jobject props_buf, jint bufSize, jobject length_buf, jobject params_buf) {
-    jarray _propsArray = (jarray) 0;
-    jint _propsBufferOffset = (jint) 0;
-    jarray _lengthArray = (jarray) 0;
-    jint _lengthBufferOffset = (jint) 0;
-    jarray _paramsArray = (jarray) 0;
-    jint _paramsBufferOffset = (jint) 0;
-    jint _propsRemaining;
-    GLenum *props = (GLenum *) 0;
-    jint _lengthRemaining;
-    GLsizei *length = (GLsizei *) 0;
-    jint _paramsRemaining;
-    GLint *params = (GLint *) 0;
-
-    props = (GLenum *)getPointer(_env, props_buf, &_propsArray, &_propsRemaining, &_propsBufferOffset);
-    length = (GLsizei *)getPointer(_env, length_buf, &_lengthArray, &_lengthRemaining, &_lengthBufferOffset);
-    params = (GLint *)getPointer(_env, params_buf, &_paramsArray, &_paramsRemaining, &_paramsBufferOffset);
-    if (props == NULL) {
-        char * _propsBase = (char *)_env->GetPrimitiveArrayCritical(_propsArray, (jboolean *) 0);
-        props = (GLenum *) (_propsBase + _propsBufferOffset);
-    }
-    if (length == NULL) {
-        char * _lengthBase = (char *)_env->GetPrimitiveArrayCritical(_lengthArray, (jboolean *) 0);
-        length = (GLsizei *) (_lengthBase + _lengthBufferOffset);
-    }
-    if (params == NULL) {
-        char * _paramsBase = (char *)_env->GetPrimitiveArrayCritical(_paramsArray, (jboolean *) 0);
-        params = (GLint *) (_paramsBase + _paramsBufferOffset);
-    }
-    glGetProgramResourceiv(
-        (GLuint)program,
-        (GLenum)programInterface,
-        (GLuint)index,
-        (GLsizei)propCount,
-        (GLenum *)props,
-        (GLsizei)bufSize,
-        (GLsizei *)length,
-        (GLint *)params
-    );
-    if (_paramsArray) {
-        releasePointer(_env, _paramsArray, params, JNI_TRUE);
-    }
-    if (_lengthArray) {
-        releasePointer(_env, _lengthArray, length, JNI_TRUE);
-    }
-    if (_propsArray) {
-        releasePointer(_env, _propsArray, props, JNI_FALSE);
-    }
-}
-
-/* GLint glGetProgramResourceLocation ( GLuint program, GLenum programInterface, const GLchar *name ) */
-static jint
-android_glGetProgramResourceLocation__IILjava_lang_String_2
-  (JNIEnv *_env, jobject _this, jint program, jint programInterface, jstring name) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLint _returnValue = 0;
-    const char* _nativename = 0;
-
-    if (!name) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "name == null";
-        goto exit;
-    }
-    _nativename = _env->GetStringUTFChars(name, 0);
-
-    _returnValue = glGetProgramResourceLocation(
-        (GLuint)program,
-        (GLenum)programInterface,
-        (GLchar *)_nativename
-    );
-
-exit:
-    if (_nativename) {
-        _env->ReleaseStringUTFChars(name, _nativename);
-    }
-
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-    return (jint)_returnValue;
-}
-
-/* void glUseProgramStages ( GLuint pipeline, GLbitfield stages, GLuint program ) */
-static void
-android_glUseProgramStages__III
-  (JNIEnv *_env, jobject _this, jint pipeline, jint stages, jint program) {
-    glUseProgramStages(
-        (GLuint)pipeline,
-        (GLbitfield)stages,
-        (GLuint)program
-    );
-}
-
-/* void glActiveShaderProgram ( GLuint pipeline, GLuint program ) */
-static void
-android_glActiveShaderProgram__II
-  (JNIEnv *_env, jobject _this, jint pipeline, jint program) {
-    glActiveShaderProgram(
-        (GLuint)pipeline,
-        (GLuint)program
-    );
-}
-
-/* GLuint glCreateShaderProgramv ( GLenum type, GLsizei count, const GLchar *const *strings ) */
-static jint
-android_glCreateShaderProgramv
-  (JNIEnv *_env, jobject _this, jint type, jobjectArray strings) {
-
-    jniThrowException(_env, "java/lang/UnsupportedOperationException", "not yet implemented");
-    return 0;
-}
-/* void glBindProgramPipeline ( GLuint pipeline ) */
-static void
-android_glBindProgramPipeline__I
-  (JNIEnv *_env, jobject _this, jint pipeline) {
-    glBindProgramPipeline(
-        (GLuint)pipeline
-    );
-}
-
-/* void glDeleteProgramPipelines ( GLsizei n, const GLuint *pipelines ) */
-static void
-android_glDeleteProgramPipelines__I_3II
-  (JNIEnv *_env, jobject _this, jint n, jintArray pipelines_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLuint *pipelines_base = (GLuint *) 0;
-    jint _remaining;
-    GLuint *pipelines = (GLuint *) 0;
-
-    if (!pipelines_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "pipelines == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(pipelines_ref) - offset;
-    pipelines_base = (GLuint *)
-        _env->GetPrimitiveArrayCritical(pipelines_ref, (jboolean *)0);
-    pipelines = pipelines_base + offset;
-
-    glDeleteProgramPipelines(
-        (GLsizei)n,
-        (GLuint *)pipelines
-    );
-
-exit:
-    if (pipelines_base) {
-        _env->ReleasePrimitiveArrayCritical(pipelines_ref, pipelines_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glDeleteProgramPipelines ( GLsizei n, const GLuint *pipelines ) */
-static void
-android_glDeleteProgramPipelines__ILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint n, jobject pipelines_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLuint *pipelines = (GLuint *) 0;
-
-    pipelines = (GLuint *)getPointer(_env, pipelines_buf, &_array, &_remaining, &_bufferOffset);
-    if (pipelines == NULL) {
-        char * _pipelinesBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        pipelines = (GLuint *) (_pipelinesBase + _bufferOffset);
-    }
-    glDeleteProgramPipelines(
-        (GLsizei)n,
-        (GLuint *)pipelines
-    );
-    if (_array) {
-        releasePointer(_env, _array, pipelines, JNI_FALSE);
-    }
-}
-
-/* void glGenProgramPipelines ( GLsizei n, GLuint *pipelines ) */
-static void
-android_glGenProgramPipelines__I_3II
-  (JNIEnv *_env, jobject _this, jint n, jintArray pipelines_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLuint *pipelines_base = (GLuint *) 0;
-    jint _remaining;
-    GLuint *pipelines = (GLuint *) 0;
-
-    if (!pipelines_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "pipelines == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(pipelines_ref) - offset;
-    pipelines_base = (GLuint *)
-        _env->GetPrimitiveArrayCritical(pipelines_ref, (jboolean *)0);
-    pipelines = pipelines_base + offset;
-
-    glGenProgramPipelines(
-        (GLsizei)n,
-        (GLuint *)pipelines
-    );
-
-exit:
-    if (pipelines_base) {
-        _env->ReleasePrimitiveArrayCritical(pipelines_ref, pipelines_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glGenProgramPipelines ( GLsizei n, GLuint *pipelines ) */
-static void
-android_glGenProgramPipelines__ILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint n, jobject pipelines_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLuint *pipelines = (GLuint *) 0;
-
-    pipelines = (GLuint *)getPointer(_env, pipelines_buf, &_array, &_remaining, &_bufferOffset);
-    if (pipelines == NULL) {
-        char * _pipelinesBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        pipelines = (GLuint *) (_pipelinesBase + _bufferOffset);
-    }
-    glGenProgramPipelines(
-        (GLsizei)n,
-        (GLuint *)pipelines
-    );
-    if (_array) {
-        releasePointer(_env, _array, pipelines, JNI_TRUE);
-    }
-}
-
-/* GLboolean glIsProgramPipeline ( GLuint pipeline ) */
-static jboolean
-android_glIsProgramPipeline__I
-  (JNIEnv *_env, jobject _this, jint pipeline) {
-    GLboolean _returnValue;
-    _returnValue = glIsProgramPipeline(
-        (GLuint)pipeline
-    );
-    return (jboolean)_returnValue;
-}
-
-/* void glGetProgramPipelineiv ( GLuint pipeline, GLenum pname, GLint *params ) */
-static void
-android_glGetProgramPipelineiv__II_3II
-  (JNIEnv *_env, jobject _this, jint pipeline, jint pname, jintArray params_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLint *params_base = (GLint *) 0;
-    jint _remaining;
-    GLint *params = (GLint *) 0;
-
-    if (!params_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "params == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(params_ref) - offset;
-    params_base = (GLint *)
-        _env->GetPrimitiveArrayCritical(params_ref, (jboolean *)0);
-    params = params_base + offset;
-
-    glGetProgramPipelineiv(
-        (GLuint)pipeline,
-        (GLenum)pname,
-        (GLint *)params
-    );
-
-exit:
-    if (params_base) {
-        _env->ReleasePrimitiveArrayCritical(params_ref, params_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glGetProgramPipelineiv ( GLuint pipeline, GLenum pname, GLint *params ) */
-static void
-android_glGetProgramPipelineiv__IILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint pipeline, jint pname, jobject params_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLint *params = (GLint *) 0;
-
-    params = (GLint *)getPointer(_env, params_buf, &_array, &_remaining, &_bufferOffset);
-    if (params == NULL) {
-        char * _paramsBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        params = (GLint *) (_paramsBase + _bufferOffset);
-    }
-    glGetProgramPipelineiv(
-        (GLuint)pipeline,
-        (GLenum)pname,
-        (GLint *)params
-    );
-    if (_array) {
-        releasePointer(_env, _array, params, JNI_TRUE);
-    }
-}
-
-/* void glProgramUniform1i ( GLuint program, GLint location, GLint v0 ) */
-static void
-android_glProgramUniform1i__III
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint v0) {
-    glProgramUniform1i(
-        (GLuint)program,
-        (GLint)location,
-        (GLint)v0
-    );
-}
-
-/* void glProgramUniform2i ( GLuint program, GLint location, GLint v0, GLint v1 ) */
-static void
-android_glProgramUniform2i__IIII
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint v0, jint v1) {
-    glProgramUniform2i(
-        (GLuint)program,
-        (GLint)location,
-        (GLint)v0,
-        (GLint)v1
-    );
-}
-
-/* void glProgramUniform3i ( GLuint program, GLint location, GLint v0, GLint v1, GLint v2 ) */
-static void
-android_glProgramUniform3i__IIIII
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint v0, jint v1, jint v2) {
-    glProgramUniform3i(
-        (GLuint)program,
-        (GLint)location,
-        (GLint)v0,
-        (GLint)v1,
-        (GLint)v2
-    );
-}
-
-/* void glProgramUniform4i ( GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3 ) */
-static void
-android_glProgramUniform4i__IIIIII
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint v0, jint v1, jint v2, jint v3) {
-    glProgramUniform4i(
-        (GLuint)program,
-        (GLint)location,
-        (GLint)v0,
-        (GLint)v1,
-        (GLint)v2,
-        (GLint)v3
-    );
-}
-
-/* void glProgramUniform1ui ( GLuint program, GLint location, GLuint v0 ) */
-static void
-android_glProgramUniform1ui__III
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint v0) {
-    glProgramUniform1ui(
-        (GLuint)program,
-        (GLint)location,
-        (GLuint)v0
-    );
-}
-
-/* void glProgramUniform2ui ( GLuint program, GLint location, GLuint v0, GLuint v1 ) */
-static void
-android_glProgramUniform2ui__IIII
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint v0, jint v1) {
-    glProgramUniform2ui(
-        (GLuint)program,
-        (GLint)location,
-        (GLuint)v0,
-        (GLuint)v1
-    );
-}
-
-/* void glProgramUniform3ui ( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2 ) */
-static void
-android_glProgramUniform3ui__IIIII
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint v0, jint v1, jint v2) {
-    glProgramUniform3ui(
-        (GLuint)program,
-        (GLint)location,
-        (GLuint)v0,
-        (GLuint)v1,
-        (GLuint)v2
-    );
-}
-
-/* void glProgramUniform4ui ( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 ) */
-static void
-android_glProgramUniform4ui__IIIIII
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint v0, jint v1, jint v2, jint v3) {
-    glProgramUniform4ui(
-        (GLuint)program,
-        (GLint)location,
-        (GLuint)v0,
-        (GLuint)v1,
-        (GLuint)v2,
-        (GLuint)v3
-    );
-}
-
-/* void glProgramUniform1f ( GLuint program, GLint location, GLfloat v0 ) */
-static void
-android_glProgramUniform1f__IIF
-  (JNIEnv *_env, jobject _this, jint program, jint location, jfloat v0) {
-    glProgramUniform1f(
-        (GLuint)program,
-        (GLint)location,
-        (GLfloat)v0
-    );
-}
-
-/* void glProgramUniform2f ( GLuint program, GLint location, GLfloat v0, GLfloat v1 ) */
-static void
-android_glProgramUniform2f__IIFF
-  (JNIEnv *_env, jobject _this, jint program, jint location, jfloat v0, jfloat v1) {
-    glProgramUniform2f(
-        (GLuint)program,
-        (GLint)location,
-        (GLfloat)v0,
-        (GLfloat)v1
-    );
-}
-
-/* void glProgramUniform3f ( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2 ) */
-static void
-android_glProgramUniform3f__IIFFF
-  (JNIEnv *_env, jobject _this, jint program, jint location, jfloat v0, jfloat v1, jfloat v2) {
-    glProgramUniform3f(
-        (GLuint)program,
-        (GLint)location,
-        (GLfloat)v0,
-        (GLfloat)v1,
-        (GLfloat)v2
-    );
-}
-
-/* void glProgramUniform4f ( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 ) */
-static void
-android_glProgramUniform4f__IIFFFF
-  (JNIEnv *_env, jobject _this, jint program, jint location, jfloat v0, jfloat v1, jfloat v2, jfloat v3) {
-    glProgramUniform4f(
-        (GLuint)program,
-        (GLint)location,
-        (GLfloat)v0,
-        (GLfloat)v1,
-        (GLfloat)v2,
-        (GLfloat)v3
-    );
-}
-
-/* void glProgramUniform1iv ( GLuint program, GLint location, GLsizei count, const GLint *value ) */
-static void
-android_glProgramUniform1iv__III_3II
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jintArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLint *value_base = (GLint *) 0;
-    jint _remaining;
-    GLint *value = (GLint *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLint *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniform1iv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLint *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniform1iv ( GLuint program, GLint location, GLsizei count, const GLint *value ) */
-static void
-android_glProgramUniform1iv__IIILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLint *value = (GLint *) 0;
-
-    value = (GLint *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLint *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniform1iv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLint *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniform2iv ( GLuint program, GLint location, GLsizei count, const GLint *value ) */
-static void
-android_glProgramUniform2iv__III_3II
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jintArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLint *value_base = (GLint *) 0;
-    jint _remaining;
-    GLint *value = (GLint *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLint *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniform2iv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLint *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniform2iv ( GLuint program, GLint location, GLsizei count, const GLint *value ) */
-static void
-android_glProgramUniform2iv__IIILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLint *value = (GLint *) 0;
-
-    value = (GLint *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLint *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniform2iv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLint *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniform3iv ( GLuint program, GLint location, GLsizei count, const GLint *value ) */
-static void
-android_glProgramUniform3iv__III_3II
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jintArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLint *value_base = (GLint *) 0;
-    jint _remaining;
-    GLint *value = (GLint *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLint *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniform3iv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLint *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniform3iv ( GLuint program, GLint location, GLsizei count, const GLint *value ) */
-static void
-android_glProgramUniform3iv__IIILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLint *value = (GLint *) 0;
-
-    value = (GLint *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLint *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniform3iv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLint *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniform4iv ( GLuint program, GLint location, GLsizei count, const GLint *value ) */
-static void
-android_glProgramUniform4iv__III_3II
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jintArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLint *value_base = (GLint *) 0;
-    jint _remaining;
-    GLint *value = (GLint *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLint *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniform4iv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLint *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniform4iv ( GLuint program, GLint location, GLsizei count, const GLint *value ) */
-static void
-android_glProgramUniform4iv__IIILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLint *value = (GLint *) 0;
-
-    value = (GLint *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLint *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniform4iv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLint *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniform1uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value ) */
-static void
-android_glProgramUniform1uiv__III_3II
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jintArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLuint *value_base = (GLuint *) 0;
-    jint _remaining;
-    GLuint *value = (GLuint *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLuint *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniform1uiv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLuint *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniform1uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value ) */
-static void
-android_glProgramUniform1uiv__IIILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLuint *value = (GLuint *) 0;
-
-    value = (GLuint *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLuint *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniform1uiv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLuint *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniform2uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value ) */
-static void
-android_glProgramUniform2uiv__III_3II
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jintArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLuint *value_base = (GLuint *) 0;
-    jint _remaining;
-    GLuint *value = (GLuint *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLuint *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniform2uiv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLuint *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniform2uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value ) */
-static void
-android_glProgramUniform2uiv__IIILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLuint *value = (GLuint *) 0;
-
-    value = (GLuint *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLuint *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniform2uiv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLuint *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniform3uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value ) */
-static void
-android_glProgramUniform3uiv__III_3II
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jintArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLuint *value_base = (GLuint *) 0;
-    jint _remaining;
-    GLuint *value = (GLuint *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLuint *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniform3uiv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLuint *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniform3uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value ) */
-static void
-android_glProgramUniform3uiv__IIILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLuint *value = (GLuint *) 0;
-
-    value = (GLuint *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLuint *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniform3uiv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLuint *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniform4uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value ) */
-static void
-android_glProgramUniform4uiv__III_3II
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jintArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLuint *value_base = (GLuint *) 0;
-    jint _remaining;
-    GLuint *value = (GLuint *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLuint *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniform4uiv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLuint *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniform4uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value ) */
-static void
-android_glProgramUniform4uiv__IIILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLuint *value = (GLuint *) 0;
-
-    value = (GLuint *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLuint *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniform4uiv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLuint *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniform1fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value ) */
-static void
-android_glProgramUniform1fv__III_3FI
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jfloatArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *value_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniform1fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLfloat *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniform1fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value ) */
-static void
-android_glProgramUniform1fv__IIILjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    value = (GLfloat *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLfloat *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniform1fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLfloat *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniform2fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value ) */
-static void
-android_glProgramUniform2fv__III_3FI
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jfloatArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *value_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniform2fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLfloat *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniform2fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value ) */
-static void
-android_glProgramUniform2fv__IIILjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    value = (GLfloat *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLfloat *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniform2fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLfloat *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniform3fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value ) */
-static void
-android_glProgramUniform3fv__III_3FI
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jfloatArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *value_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniform3fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLfloat *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniform3fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value ) */
-static void
-android_glProgramUniform3fv__IIILjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    value = (GLfloat *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLfloat *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniform3fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLfloat *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniform4fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value ) */
-static void
-android_glProgramUniform4fv__III_3FI
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jfloatArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *value_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniform4fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLfloat *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniform4fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value ) */
-static void
-android_glProgramUniform4fv__IIILjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    value = (GLfloat *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLfloat *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniform4fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLfloat *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniformMatrix2fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix2fv__IIIZ_3FI
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jfloatArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *value_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniformMatrix2fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniformMatrix2fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix2fv__IIIZLjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    value = (GLfloat *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLfloat *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniformMatrix2fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniformMatrix3fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix3fv__IIIZ_3FI
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jfloatArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *value_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniformMatrix3fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniformMatrix3fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix3fv__IIIZLjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    value = (GLfloat *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLfloat *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniformMatrix3fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniformMatrix4fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix4fv__IIIZ_3FI
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jfloatArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *value_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniformMatrix4fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniformMatrix4fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix4fv__IIIZLjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    value = (GLfloat *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLfloat *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniformMatrix4fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniformMatrix2x3fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix2x3fv__IIIZ_3FI
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jfloatArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *value_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniformMatrix2x3fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniformMatrix2x3fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix2x3fv__IIIZLjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    value = (GLfloat *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLfloat *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniformMatrix2x3fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniformMatrix3x2fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix3x2fv__IIIZ_3FI
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jfloatArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *value_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniformMatrix3x2fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniformMatrix3x2fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix3x2fv__IIIZLjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    value = (GLfloat *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLfloat *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniformMatrix3x2fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniformMatrix2x4fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix2x4fv__IIIZ_3FI
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jfloatArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *value_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniformMatrix2x4fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniformMatrix2x4fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix2x4fv__IIIZLjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    value = (GLfloat *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLfloat *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniformMatrix2x4fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniformMatrix4x2fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix4x2fv__IIIZ_3FI
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jfloatArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *value_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniformMatrix4x2fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniformMatrix4x2fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix4x2fv__IIIZLjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    value = (GLfloat *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLfloat *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniformMatrix4x2fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniformMatrix3x4fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix3x4fv__IIIZ_3FI
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jfloatArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *value_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniformMatrix3x4fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniformMatrix3x4fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix3x4fv__IIIZLjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    value = (GLfloat *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLfloat *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniformMatrix3x4fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glProgramUniformMatrix4x3fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix4x3fv__IIIZ_3FI
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jfloatArray value_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *value_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    if (!value_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "value == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(value_ref) - offset;
-    value_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(value_ref, (jboolean *)0);
-    value = value_base + offset;
-
-    glProgramUniformMatrix4x3fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-
-exit:
-    if (value_base) {
-        _env->ReleasePrimitiveArrayCritical(value_ref, value_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glProgramUniformMatrix4x3fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value ) */
-static void
-android_glProgramUniformMatrix4x3fv__IIIZLjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint program, jint location, jint count, jboolean transpose, jobject value_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *value = (GLfloat *) 0;
-
-    value = (GLfloat *)getPointer(_env, value_buf, &_array, &_remaining, &_bufferOffset);
-    if (value == NULL) {
-        char * _valueBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        value = (GLfloat *) (_valueBase + _bufferOffset);
-    }
-    glProgramUniformMatrix4x3fv(
-        (GLuint)program,
-        (GLint)location,
-        (GLsizei)count,
-        (GLboolean)transpose,
-        (GLfloat *)value
-    );
-    if (_array) {
-        releasePointer(_env, _array, value, JNI_FALSE);
-    }
-}
-
-/* void glValidateProgramPipeline ( GLuint pipeline ) */
-static void
-android_glValidateProgramPipeline__I
-  (JNIEnv *_env, jobject _this, jint pipeline) {
-    glValidateProgramPipeline(
-        (GLuint)pipeline
-    );
-}
-
-#include <stdlib.h>
-
-/* void glGetProgramPipelineInfoLog ( GLuint shader, GLsizei maxLength, GLsizei* length, GLchar* infoLog ) */
-static jstring android_glGetProgramPipelineInfoLog(JNIEnv *_env, jobject, jint shader) {
-    GLint infoLen = 0;
-    glGetProgramPipelineiv(shader, GL_INFO_LOG_LENGTH, &infoLen);
-    if (!infoLen) {
-        return _env->NewStringUTF("");
-    }
-    char* buf = (char*) malloc(infoLen);
-    if (buf == NULL) {
-        jniThrowException(_env, "java/lang/OutOfMemoryError", "out of memory");
-        return NULL;
-    }
-    glGetProgramPipelineInfoLog(shader, infoLen, NULL, buf);
-    jstring result = _env->NewStringUTF(buf);
-    free(buf);
-    return result;
-}
-/* void glBindImageTexture ( GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format ) */
-static void
-android_glBindImageTexture__IIIZIII
-  (JNIEnv *_env, jobject _this, jint unit, jint texture, jint level, jboolean layered, jint layer, jint access, jint format) {
-    glBindImageTexture(
-        (GLuint)unit,
-        (GLuint)texture,
-        (GLint)level,
-        (GLboolean)layered,
-        (GLint)layer,
-        (GLenum)access,
-        (GLenum)format
-    );
-}
-
-/* void glGetBooleani_v ( GLenum target, GLuint index, GLboolean *data ) */
-static void
-android_glGetBooleani_v__II_3ZI
-  (JNIEnv *_env, jobject _this, jint target, jint index, jbooleanArray data_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLboolean *data_base = (GLboolean *) 0;
-    jint _remaining;
-    GLboolean *data = (GLboolean *) 0;
-
-    if (!data_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "data == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(data_ref) - offset;
-    data_base = (GLboolean *)
-        _env->GetPrimitiveArrayCritical(data_ref, (jboolean *)0);
-    data = data_base + offset;
-
-    glGetBooleani_v(
-        (GLenum)target,
-        (GLuint)index,
-        (GLboolean *)data
-    );
-
-exit:
-    if (data_base) {
-        _env->ReleasePrimitiveArrayCritical(data_ref, data_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glGetBooleani_v ( GLenum target, GLuint index, GLboolean *data ) */
-static void
-android_glGetBooleani_v__IILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint target, jint index, jobject data_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLboolean *data = (GLboolean *) 0;
-
-    data = (GLboolean *)getPointer(_env, data_buf, &_array, &_remaining, &_bufferOffset);
-    if (data == NULL) {
-        char * _dataBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        data = (GLboolean *) (_dataBase + _bufferOffset);
-    }
-    glGetBooleani_v(
-        (GLenum)target,
-        (GLuint)index,
-        (GLboolean *)data
-    );
-    if (_array) {
-        releasePointer(_env, _array, data, JNI_TRUE);
-    }
-}
-
-/* void glMemoryBarrier ( GLbitfield barriers ) */
-static void
-android_glMemoryBarrier__I
-  (JNIEnv *_env, jobject _this, jint barriers) {
-    glMemoryBarrier(
-        (GLbitfield)barriers
-    );
-}
-
-/* void glMemoryBarrierByRegion ( GLbitfield barriers ) */
-static void
-android_glMemoryBarrierByRegion__I
-  (JNIEnv *_env, jobject _this, jint barriers) {
-    glMemoryBarrierByRegion(
-        (GLbitfield)barriers
-    );
-}
-
-/* void glTexStorage2DMultisample ( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations ) */
-static void
-android_glTexStorage2DMultisample__IIIIIZ
-  (JNIEnv *_env, jobject _this, jint target, jint samples, jint internalformat, jint width, jint height, jboolean fixedsamplelocations) {
-    glTexStorage2DMultisample(
-        (GLenum)target,
-        (GLsizei)samples,
-        (GLenum)internalformat,
-        (GLsizei)width,
-        (GLsizei)height,
-        (GLboolean)fixedsamplelocations
-    );
-}
-
-/* void glGetMultisamplefv ( GLenum pname, GLuint index, GLfloat *val ) */
-static void
-android_glGetMultisamplefv__II_3FI
-  (JNIEnv *_env, jobject _this, jint pname, jint index, jfloatArray val_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *val_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *val = (GLfloat *) 0;
-
-    if (!val_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "val == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(val_ref) - offset;
-    val_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(val_ref, (jboolean *)0);
-    val = val_base + offset;
-
-    glGetMultisamplefv(
-        (GLenum)pname,
-        (GLuint)index,
-        (GLfloat *)val
-    );
-
-exit:
-    if (val_base) {
-        _env->ReleasePrimitiveArrayCritical(val_ref, val_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glGetMultisamplefv ( GLenum pname, GLuint index, GLfloat *val ) */
-static void
-android_glGetMultisamplefv__IILjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint pname, jint index, jobject val_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *val = (GLfloat *) 0;
-
-    val = (GLfloat *)getPointer(_env, val_buf, &_array, &_remaining, &_bufferOffset);
-    if (val == NULL) {
-        char * _valBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        val = (GLfloat *) (_valBase + _bufferOffset);
-    }
-    glGetMultisamplefv(
-        (GLenum)pname,
-        (GLuint)index,
-        (GLfloat *)val
-    );
-    if (_array) {
-        releasePointer(_env, _array, val, JNI_TRUE);
-    }
-}
-
-/* void glSampleMaski ( GLuint maskNumber, GLbitfield mask ) */
-static void
-android_glSampleMaski__II
-  (JNIEnv *_env, jobject _this, jint maskNumber, jint mask) {
-    glSampleMaski(
-        (GLuint)maskNumber,
-        (GLbitfield)mask
-    );
-}
-
-/* void glGetTexLevelParameteriv ( GLenum target, GLint level, GLenum pname, GLint *params ) */
-static void
-android_glGetTexLevelParameteriv__III_3II
-  (JNIEnv *_env, jobject _this, jint target, jint level, jint pname, jintArray params_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLint *params_base = (GLint *) 0;
-    jint _remaining;
-    GLint *params = (GLint *) 0;
-
-    if (!params_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "params == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(params_ref) - offset;
-    params_base = (GLint *)
-        _env->GetPrimitiveArrayCritical(params_ref, (jboolean *)0);
-    params = params_base + offset;
-
-    glGetTexLevelParameteriv(
-        (GLenum)target,
-        (GLint)level,
-        (GLenum)pname,
-        (GLint *)params
-    );
-
-exit:
-    if (params_base) {
-        _env->ReleasePrimitiveArrayCritical(params_ref, params_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glGetTexLevelParameteriv ( GLenum target, GLint level, GLenum pname, GLint *params ) */
-static void
-android_glGetTexLevelParameteriv__IIILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint target, jint level, jint pname, jobject params_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLint *params = (GLint *) 0;
-
-    params = (GLint *)getPointer(_env, params_buf, &_array, &_remaining, &_bufferOffset);
-    if (params == NULL) {
-        char * _paramsBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        params = (GLint *) (_paramsBase + _bufferOffset);
-    }
-    glGetTexLevelParameteriv(
-        (GLenum)target,
-        (GLint)level,
-        (GLenum)pname,
-        (GLint *)params
-    );
-    if (_array) {
-        releasePointer(_env, _array, params, JNI_TRUE);
-    }
-}
-
-/* void glGetTexLevelParameterfv ( GLenum target, GLint level, GLenum pname, GLfloat *params ) */
-static void
-android_glGetTexLevelParameterfv__III_3FI
-  (JNIEnv *_env, jobject _this, jint target, jint level, jint pname, jfloatArray params_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLfloat *params_base = (GLfloat *) 0;
-    jint _remaining;
-    GLfloat *params = (GLfloat *) 0;
-
-    if (!params_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "params == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(params_ref) - offset;
-    params_base = (GLfloat *)
-        _env->GetPrimitiveArrayCritical(params_ref, (jboolean *)0);
-    params = params_base + offset;
-
-    glGetTexLevelParameterfv(
-        (GLenum)target,
-        (GLint)level,
-        (GLenum)pname,
-        (GLfloat *)params
-    );
-
-exit:
-    if (params_base) {
-        _env->ReleasePrimitiveArrayCritical(params_ref, params_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glGetTexLevelParameterfv ( GLenum target, GLint level, GLenum pname, GLfloat *params ) */
-static void
-android_glGetTexLevelParameterfv__IIILjava_nio_FloatBuffer_2
-  (JNIEnv *_env, jobject _this, jint target, jint level, jint pname, jobject params_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLfloat *params = (GLfloat *) 0;
-
-    params = (GLfloat *)getPointer(_env, params_buf, &_array, &_remaining, &_bufferOffset);
-    if (params == NULL) {
-        char * _paramsBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        params = (GLfloat *) (_paramsBase + _bufferOffset);
-    }
-    glGetTexLevelParameterfv(
-        (GLenum)target,
-        (GLint)level,
-        (GLenum)pname,
-        (GLfloat *)params
-    );
-    if (_array) {
-        releasePointer(_env, _array, params, JNI_TRUE);
-    }
-}
-
-/* void glBindVertexBuffer ( GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride ) */
-static void
-android_glBindVertexBuffer__IIJI
-  (JNIEnv *_env, jobject _this, jint bindingindex, jint buffer, jlong offset, jint stride) {
-    if (sizeof(GLintptr) != sizeof(jlong) && (offset < LONG_MIN || offset > LONG_MAX)) {
-        jniThrowException(_env, "java/lang/IllegalArgumentException", "offset too large");
-        return;
-    }
-    glBindVertexBuffer(
-        (GLuint)bindingindex,
-        (GLuint)buffer,
-        (GLintptr)offset,
-        (GLsizei)stride
-    );
-}
-/* void glVertexAttribFormat ( GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset ) */
-static void
-android_glVertexAttribFormat__IIIZI
-  (JNIEnv *_env, jobject _this, jint attribindex, jint size, jint type, jboolean normalized, jint relativeoffset) {
-    glVertexAttribFormat(
-        (GLuint)attribindex,
-        (GLint)size,
-        (GLenum)type,
-        (GLboolean)normalized,
-        (GLuint)relativeoffset
-    );
-}
-
-/* void glVertexAttribIFormat ( GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset ) */
-static void
-android_glVertexAttribIFormat__IIII
-  (JNIEnv *_env, jobject _this, jint attribindex, jint size, jint type, jint relativeoffset) {
-    glVertexAttribIFormat(
-        (GLuint)attribindex,
-        (GLint)size,
-        (GLenum)type,
-        (GLuint)relativeoffset
-    );
-}
-
-/* void glVertexAttribBinding ( GLuint attribindex, GLuint bindingindex ) */
-static void
-android_glVertexAttribBinding__II
-  (JNIEnv *_env, jobject _this, jint attribindex, jint bindingindex) {
-    glVertexAttribBinding(
-        (GLuint)attribindex,
-        (GLuint)bindingindex
-    );
-}
-
-/* void glVertexBindingDivisor ( GLuint bindingindex, GLuint divisor ) */
-static void
-android_glVertexBindingDivisor__II
-  (JNIEnv *_env, jobject _this, jint bindingindex, jint divisor) {
-    glVertexBindingDivisor(
-        (GLuint)bindingindex,
-        (GLuint)divisor
-    );
-}
-
-static const char *classPathName = "android/opengl/GLES31";
-
-static JNINativeMethod methods[] = {
-{"_nativeClassInit", "()V", (void*)nativeClassInit },
-{"glDispatchCompute", "(III)V", (void *) android_glDispatchCompute__III },
-{"glDispatchComputeIndirect", "(J)V", (void *) android_glDispatchComputeIndirect },
-{"glDrawArraysIndirect", "(IJ)V", (void *) android_glDrawArraysIndirect },
-{"glDrawElementsIndirect", "(IIJ)V", (void *) android_glDrawElementsIndirect },
-{"glFramebufferParameteri", "(III)V", (void *) android_glFramebufferParameteri__III },
-{"glGetFramebufferParameteriv", "(II[II)V", (void *) android_glGetFramebufferParameteriv__II_3II },
-{"glGetFramebufferParameteriv", "(IILjava/nio/IntBuffer;)V", (void *) android_glGetFramebufferParameteriv__IILjava_nio_IntBuffer_2 },
-{"glGetProgramInterfaceiv", "(III[II)V", (void *) android_glGetProgramInterfaceiv__III_3II },
-{"glGetProgramInterfaceiv", "(IIILjava/nio/IntBuffer;)V", (void *) android_glGetProgramInterfaceiv__IIILjava_nio_IntBuffer_2 },
-{"glGetProgramResourceIndex", "(IILjava/lang/String;)I", (void *) android_glGetProgramResourceIndex__IILjava_lang_String_2 },
-{"glGetProgramResourceName", "(III)Ljava/lang/String;", (void *) android_glGetProgramResourceName },
-{"glGetProgramResourceiv", "(IIII[III[II[II)V", (void *) android_glGetProgramResourceiv__IIII_3III_3II_3II },
-{"glGetProgramResourceiv", "(IIIILjava/nio/IntBuffer;ILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)V", (void *) android_glGetProgramResourceiv__IIIILjava_nio_IntBuffer_2ILjava_nio_IntBuffer_2Ljava_nio_IntBuffer_2 },
-{"glGetProgramResourceLocation", "(IILjava/lang/String;)I", (void *) android_glGetProgramResourceLocation__IILjava_lang_String_2 },
-{"glUseProgramStages", "(III)V", (void *) android_glUseProgramStages__III },
-{"glActiveShaderProgram", "(II)V", (void *) android_glActiveShaderProgram__II },
-{"glCreateShaderProgramv", "(I[Ljava/lang/String;)I", (void *) android_glCreateShaderProgramv },
-{"glBindProgramPipeline", "(I)V", (void *) android_glBindProgramPipeline__I },
-{"glDeleteProgramPipelines", "(I[II)V", (void *) android_glDeleteProgramPipelines__I_3II },
-{"glDeleteProgramPipelines", "(ILjava/nio/IntBuffer;)V", (void *) android_glDeleteProgramPipelines__ILjava_nio_IntBuffer_2 },
-{"glGenProgramPipelines", "(I[II)V", (void *) android_glGenProgramPipelines__I_3II },
-{"glGenProgramPipelines", "(ILjava/nio/IntBuffer;)V", (void *) android_glGenProgramPipelines__ILjava_nio_IntBuffer_2 },
-{"glIsProgramPipeline", "(I)Z", (void *) android_glIsProgramPipeline__I },
-{"glGetProgramPipelineiv", "(II[II)V", (void *) android_glGetProgramPipelineiv__II_3II },
-{"glGetProgramPipelineiv", "(IILjava/nio/IntBuffer;)V", (void *) android_glGetProgramPipelineiv__IILjava_nio_IntBuffer_2 },
-{"glProgramUniform1i", "(III)V", (void *) android_glProgramUniform1i__III },
-{"glProgramUniform2i", "(IIII)V", (void *) android_glProgramUniform2i__IIII },
-{"glProgramUniform3i", "(IIIII)V", (void *) android_glProgramUniform3i__IIIII },
-{"glProgramUniform4i", "(IIIIII)V", (void *) android_glProgramUniform4i__IIIIII },
-{"glProgramUniform1ui", "(III)V", (void *) android_glProgramUniform1ui__III },
-{"glProgramUniform2ui", "(IIII)V", (void *) android_glProgramUniform2ui__IIII },
-{"glProgramUniform3ui", "(IIIII)V", (void *) android_glProgramUniform3ui__IIIII },
-{"glProgramUniform4ui", "(IIIIII)V", (void *) android_glProgramUniform4ui__IIIIII },
-{"glProgramUniform1f", "(IIF)V", (void *) android_glProgramUniform1f__IIF },
-{"glProgramUniform2f", "(IIFF)V", (void *) android_glProgramUniform2f__IIFF },
-{"glProgramUniform3f", "(IIFFF)V", (void *) android_glProgramUniform3f__IIFFF },
-{"glProgramUniform4f", "(IIFFFF)V", (void *) android_glProgramUniform4f__IIFFFF },
-{"glProgramUniform1iv", "(III[II)V", (void *) android_glProgramUniform1iv__III_3II },
-{"glProgramUniform1iv", "(IIILjava/nio/IntBuffer;)V", (void *) android_glProgramUniform1iv__IIILjava_nio_IntBuffer_2 },
-{"glProgramUniform2iv", "(III[II)V", (void *) android_glProgramUniform2iv__III_3II },
-{"glProgramUniform2iv", "(IIILjava/nio/IntBuffer;)V", (void *) android_glProgramUniform2iv__IIILjava_nio_IntBuffer_2 },
-{"glProgramUniform3iv", "(III[II)V", (void *) android_glProgramUniform3iv__III_3II },
-{"glProgramUniform3iv", "(IIILjava/nio/IntBuffer;)V", (void *) android_glProgramUniform3iv__IIILjava_nio_IntBuffer_2 },
-{"glProgramUniform4iv", "(III[II)V", (void *) android_glProgramUniform4iv__III_3II },
-{"glProgramUniform4iv", "(IIILjava/nio/IntBuffer;)V", (void *) android_glProgramUniform4iv__IIILjava_nio_IntBuffer_2 },
-{"glProgramUniform1uiv", "(III[II)V", (void *) android_glProgramUniform1uiv__III_3II },
-{"glProgramUniform1uiv", "(IIILjava/nio/IntBuffer;)V", (void *) android_glProgramUniform1uiv__IIILjava_nio_IntBuffer_2 },
-{"glProgramUniform2uiv", "(III[II)V", (void *) android_glProgramUniform2uiv__III_3II },
-{"glProgramUniform2uiv", "(IIILjava/nio/IntBuffer;)V", (void *) android_glProgramUniform2uiv__IIILjava_nio_IntBuffer_2 },
-{"glProgramUniform3uiv", "(III[II)V", (void *) android_glProgramUniform3uiv__III_3II },
-{"glProgramUniform3uiv", "(IIILjava/nio/IntBuffer;)V", (void *) android_glProgramUniform3uiv__IIILjava_nio_IntBuffer_2 },
-{"glProgramUniform4uiv", "(III[II)V", (void *) android_glProgramUniform4uiv__III_3II },
-{"glProgramUniform4uiv", "(IIILjava/nio/IntBuffer;)V", (void *) android_glProgramUniform4uiv__IIILjava_nio_IntBuffer_2 },
-{"glProgramUniform1fv", "(III[FI)V", (void *) android_glProgramUniform1fv__III_3FI },
-{"glProgramUniform1fv", "(IIILjava/nio/FloatBuffer;)V", (void *) android_glProgramUniform1fv__IIILjava_nio_FloatBuffer_2 },
-{"glProgramUniform2fv", "(III[FI)V", (void *) android_glProgramUniform2fv__III_3FI },
-{"glProgramUniform2fv", "(IIILjava/nio/FloatBuffer;)V", (void *) android_glProgramUniform2fv__IIILjava_nio_FloatBuffer_2 },
-{"glProgramUniform3fv", "(III[FI)V", (void *) android_glProgramUniform3fv__III_3FI },
-{"glProgramUniform3fv", "(IIILjava/nio/FloatBuffer;)V", (void *) android_glProgramUniform3fv__IIILjava_nio_FloatBuffer_2 },
-{"glProgramUniform4fv", "(III[FI)V", (void *) android_glProgramUniform4fv__III_3FI },
-{"glProgramUniform4fv", "(IIILjava/nio/FloatBuffer;)V", (void *) android_glProgramUniform4fv__IIILjava_nio_FloatBuffer_2 },
-{"glProgramUniformMatrix2fv", "(IIIZ[FI)V", (void *) android_glProgramUniformMatrix2fv__IIIZ_3FI },
-{"glProgramUniformMatrix2fv", "(IIIZLjava/nio/FloatBuffer;)V", (void *) android_glProgramUniformMatrix2fv__IIIZLjava_nio_FloatBuffer_2 },
-{"glProgramUniformMatrix3fv", "(IIIZ[FI)V", (void *) android_glProgramUniformMatrix3fv__IIIZ_3FI },
-{"glProgramUniformMatrix3fv", "(IIIZLjava/nio/FloatBuffer;)V", (void *) android_glProgramUniformMatrix3fv__IIIZLjava_nio_FloatBuffer_2 },
-{"glProgramUniformMatrix4fv", "(IIIZ[FI)V", (void *) android_glProgramUniformMatrix4fv__IIIZ_3FI },
-{"glProgramUniformMatrix4fv", "(IIIZLjava/nio/FloatBuffer;)V", (void *) android_glProgramUniformMatrix4fv__IIIZLjava_nio_FloatBuffer_2 },
-{"glProgramUniformMatrix2x3fv", "(IIIZ[FI)V", (void *) android_glProgramUniformMatrix2x3fv__IIIZ_3FI },
-{"glProgramUniformMatrix2x3fv", "(IIIZLjava/nio/FloatBuffer;)V", (void *) android_glProgramUniformMatrix2x3fv__IIIZLjava_nio_FloatBuffer_2 },
-{"glProgramUniformMatrix3x2fv", "(IIIZ[FI)V", (void *) android_glProgramUniformMatrix3x2fv__IIIZ_3FI },
-{"glProgramUniformMatrix3x2fv", "(IIIZLjava/nio/FloatBuffer;)V", (void *) android_glProgramUniformMatrix3x2fv__IIIZLjava_nio_FloatBuffer_2 },
-{"glProgramUniformMatrix2x4fv", "(IIIZ[FI)V", (void *) android_glProgramUniformMatrix2x4fv__IIIZ_3FI },
-{"glProgramUniformMatrix2x4fv", "(IIIZLjava/nio/FloatBuffer;)V", (void *) android_glProgramUniformMatrix2x4fv__IIIZLjava_nio_FloatBuffer_2 },
-{"glProgramUniformMatrix4x2fv", "(IIIZ[FI)V", (void *) android_glProgramUniformMatrix4x2fv__IIIZ_3FI },
-{"glProgramUniformMatrix4x2fv", "(IIIZLjava/nio/FloatBuffer;)V", (void *) android_glProgramUniformMatrix4x2fv__IIIZLjava_nio_FloatBuffer_2 },
-{"glProgramUniformMatrix3x4fv", "(IIIZ[FI)V", (void *) android_glProgramUniformMatrix3x4fv__IIIZ_3FI },
-{"glProgramUniformMatrix3x4fv", "(IIIZLjava/nio/FloatBuffer;)V", (void *) android_glProgramUniformMatrix3x4fv__IIIZLjava_nio_FloatBuffer_2 },
-{"glProgramUniformMatrix4x3fv", "(IIIZ[FI)V", (void *) android_glProgramUniformMatrix4x3fv__IIIZ_3FI },
-{"glProgramUniformMatrix4x3fv", "(IIIZLjava/nio/FloatBuffer;)V", (void *) android_glProgramUniformMatrix4x3fv__IIIZLjava_nio_FloatBuffer_2 },
-{"glValidateProgramPipeline", "(I)V", (void *) android_glValidateProgramPipeline__I },
-{"glGetProgramPipelineInfoLog", "(I)Ljava/lang/String;", (void *) android_glGetProgramPipelineInfoLog },
-{"glBindImageTexture", "(IIIZIII)V", (void *) android_glBindImageTexture__IIIZIII },
-{"glGetBooleani_v", "(II[ZI)V", (void *) android_glGetBooleani_v__II_3ZI },
-{"glGetBooleani_v", "(IILjava/nio/IntBuffer;)V", (void *) android_glGetBooleani_v__IILjava_nio_IntBuffer_2 },
-{"glMemoryBarrier", "(I)V", (void *) android_glMemoryBarrier__I },
-{"glMemoryBarrierByRegion", "(I)V", (void *) android_glMemoryBarrierByRegion__I },
-{"glTexStorage2DMultisample", "(IIIIIZ)V", (void *) android_glTexStorage2DMultisample__IIIIIZ },
-{"glGetMultisamplefv", "(II[FI)V", (void *) android_glGetMultisamplefv__II_3FI },
-{"glGetMultisamplefv", "(IILjava/nio/FloatBuffer;)V", (void *) android_glGetMultisamplefv__IILjava_nio_FloatBuffer_2 },
-{"glSampleMaski", "(II)V", (void *) android_glSampleMaski__II },
-{"glGetTexLevelParameteriv", "(III[II)V", (void *) android_glGetTexLevelParameteriv__III_3II },
-{"glGetTexLevelParameteriv", "(IIILjava/nio/IntBuffer;)V", (void *) android_glGetTexLevelParameteriv__IIILjava_nio_IntBuffer_2 },
-{"glGetTexLevelParameterfv", "(III[FI)V", (void *) android_glGetTexLevelParameterfv__III_3FI },
-{"glGetTexLevelParameterfv", "(IIILjava/nio/FloatBuffer;)V", (void *) android_glGetTexLevelParameterfv__IIILjava_nio_FloatBuffer_2 },
-{"glBindVertexBuffer", "(IIJI)V", (void *) android_glBindVertexBuffer__IIJI },
-{"glVertexAttribFormat", "(IIIZI)V", (void *) android_glVertexAttribFormat__IIIZI },
-{"glVertexAttribIFormat", "(IIII)V", (void *) android_glVertexAttribIFormat__IIII },
-{"glVertexAttribBinding", "(II)V", (void *) android_glVertexAttribBinding__II },
-{"glVertexBindingDivisor", "(II)V", (void *) android_glVertexBindingDivisor__II },
-};
-
-int register_android_opengl_jni_GLES31(JNIEnv *_env)
-{
-    int err;
-    err = android::AndroidRuntime::registerNativeMethods(_env, classPathName, methods, NELEM(methods));
-    return err;
-}
diff --git a/core/jni/android_opengl_GLES31Ext.cpp b/core/jni/android_opengl_GLES31Ext.cpp
deleted file mode 100644
index 270b50e034796..0000000000000
--- a/core/jni/android_opengl_GLES31Ext.cpp
+++ /dev/null
@@ -1,1385 +0,0 @@
-/*
- * Copyright 2014 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-// This source file is automatically generated
-
-#include <GLES3/gl31.h>
-#include <GLES2/gl2ext.h>
-
-#include "jni.h"
-#include "JNIHelp.h"
-#include <android_runtime/AndroidRuntime.h>
-#include <utils/misc.h>
-#include <assert.h>
-
-static int initialized = 0;
-
-static jclass nioAccessClass;
-static jclass bufferClass;
-static jmethodID getBasePointerID;
-static jmethodID getBaseArrayID;
-static jmethodID getBaseArrayOffsetID;
-static jfieldID positionID;
-static jfieldID limitID;
-static jfieldID elementSizeShiftID;
-
-
-/* special calls implemented in Android's GLES wrapper used to more
- * efficiently bound-check passed arrays */
-extern "C" {
-#ifdef GL_VERSION_ES_CM_1_1
-GL_API void GL_APIENTRY glColorPointerBounds(GLint size, GLenum type, GLsizei stride,
-        const GLvoid *ptr, GLsizei count);
-GL_API void GL_APIENTRY glNormalPointerBounds(GLenum type, GLsizei stride,
-        const GLvoid *pointer, GLsizei count);
-GL_API void GL_APIENTRY glTexCoordPointerBounds(GLint size, GLenum type,
-        GLsizei stride, const GLvoid *pointer, GLsizei count);
-GL_API void GL_APIENTRY glVertexPointerBounds(GLint size, GLenum type,
-        GLsizei stride, const GLvoid *pointer, GLsizei count);
-GL_API void GL_APIENTRY glPointSizePointerOESBounds(GLenum type,
-        GLsizei stride, const GLvoid *pointer, GLsizei count);
-GL_API void GL_APIENTRY glMatrixIndexPointerOESBounds(GLint size, GLenum type,
-        GLsizei stride, const GLvoid *pointer, GLsizei count);
-GL_API void GL_APIENTRY glWeightPointerOESBounds(GLint size, GLenum type,
-        GLsizei stride, const GLvoid *pointer, GLsizei count);
-#endif
-#ifdef GL_ES_VERSION_2_0
-static void glVertexAttribPointerBounds(GLuint indx, GLint size, GLenum type,
-        GLboolean normalized, GLsizei stride, const GLvoid *pointer, GLsizei count) {
-    glVertexAttribPointer(indx, size, type, normalized, stride, pointer);
-}
-#endif
-#ifdef GL_ES_VERSION_3_0
-static void glVertexAttribIPointerBounds(GLuint indx, GLint size, GLenum type,
-        GLsizei stride, const GLvoid *pointer, GLsizei count) {
-    glVertexAttribIPointer(indx, size, type, stride, pointer);
-}
-#endif
-}
-
-/* Cache method IDs each time the class is loaded. */
-
-static void
-nativeClassInit(JNIEnv *_env, jclass glImplClass)
-{
-    jclass nioAccessClassLocal = _env->FindClass("java/nio/NIOAccess");
-    nioAccessClass = (jclass) _env->NewGlobalRef(nioAccessClassLocal);
-
-    jclass bufferClassLocal = _env->FindClass("java/nio/Buffer");
-    bufferClass = (jclass) _env->NewGlobalRef(bufferClassLocal);
-
-    getBasePointerID = _env->GetStaticMethodID(nioAccessClass,
-            "getBasePointer", "(Ljava/nio/Buffer;)J");
-    getBaseArrayID = _env->GetStaticMethodID(nioAccessClass,
-            "getBaseArray", "(Ljava/nio/Buffer;)Ljava/lang/Object;");
-    getBaseArrayOffsetID = _env->GetStaticMethodID(nioAccessClass,
-            "getBaseArrayOffset", "(Ljava/nio/Buffer;)I");
-
-    positionID = _env->GetFieldID(bufferClass, "position", "I");
-    limitID = _env->GetFieldID(bufferClass, "limit", "I");
-    elementSizeShiftID =
-        _env->GetFieldID(bufferClass, "_elementSizeShift", "I");
-}
-
-static void *
-getPointer(JNIEnv *_env, jobject buffer, jarray *array, jint *remaining, jint *offset)
-{
-    jint position;
-    jint limit;
-    jint elementSizeShift;
-    jlong pointer;
-
-    position = _env->GetIntField(buffer, positionID);
-    limit = _env->GetIntField(buffer, limitID);
-    elementSizeShift = _env->GetIntField(buffer, elementSizeShiftID);
-    *remaining = (limit - position) << elementSizeShift;
-    pointer = _env->CallStaticLongMethod(nioAccessClass,
-            getBasePointerID, buffer);
-    if (pointer != 0L) {
-        *array = NULL;
-        return reinterpret_cast<void*>(pointer);
-    }
-
-    *array = (jarray) _env->CallStaticObjectMethod(nioAccessClass,
-            getBaseArrayID, buffer);
-    *offset = _env->CallStaticIntMethod(nioAccessClass,
-            getBaseArrayOffsetID, buffer);
-
-    return NULL;
-}
-
-static void
-releasePointer(JNIEnv *_env, jarray array, void *data, jboolean commit)
-{
-    _env->ReleasePrimitiveArrayCritical(array, data,
-                       commit ? 0 : JNI_ABORT);
-}
-
-static void *
-getDirectBufferPointer(JNIEnv *_env, jobject buffer) {
-    char* buf = (char*) _env->GetDirectBufferAddress(buffer);
-    if (buf) {
-        jint position = _env->GetIntField(buffer, positionID);
-        jint elementSizeShift = _env->GetIntField(buffer, elementSizeShiftID);
-        buf += position << elementSizeShift;
-    } else {
-        jniThrowException(_env, "java/lang/IllegalArgumentException",
-                          "Must use a native order direct Buffer");
-    }
-    return (void*) buf;
-}
-
-// --------------------------------------------------------------------------
-
-/*
- * returns the number of values glGet returns for a given pname.
- *
- * The code below is written such that pnames requiring only one values
- * are the default (and are not explicitely tested for). This makes the
- * checking code much shorter/readable/efficient.
- *
- * This means that unknown pnames (e.g.: extensions) will default to 1. If
- * that unknown pname needs more than 1 value, then the validation check
- * is incomplete and the app may crash if it passed the wrong number params.
- */
-static int getNeededCount(GLint pname) {
-    int needed = 1;
-#ifdef GL_ES_VERSION_2_0
-    // GLES 2.x pnames
-    switch (pname) {
-        case GL_ALIASED_LINE_WIDTH_RANGE:
-        case GL_ALIASED_POINT_SIZE_RANGE:
-            needed = 2;
-            break;
-
-        case GL_BLEND_COLOR:
-        case GL_COLOR_CLEAR_VALUE:
-        case GL_COLOR_WRITEMASK:
-        case GL_SCISSOR_BOX:
-        case GL_VIEWPORT:
-            needed = 4;
-            break;
-
-        case GL_COMPRESSED_TEXTURE_FORMATS:
-            glGetIntegerv(GL_NUM_COMPRESSED_TEXTURE_FORMATS, &needed);
-            break;
-
-        case GL_SHADER_BINARY_FORMATS:
-            glGetIntegerv(GL_NUM_SHADER_BINARY_FORMATS, &needed);
-            break;
-    }
-#endif
-
-#ifdef GL_VERSION_ES_CM_1_1
-    // GLES 1.x pnames
-    switch (pname) {
-        case GL_ALIASED_LINE_WIDTH_RANGE:
-        case GL_ALIASED_POINT_SIZE_RANGE:
-        case GL_DEPTH_RANGE:
-        case GL_SMOOTH_LINE_WIDTH_RANGE:
-        case GL_SMOOTH_POINT_SIZE_RANGE:
-            needed = 2;
-            break;
-
-        case GL_CURRENT_NORMAL:
-        case GL_POINT_DISTANCE_ATTENUATION:
-            needed = 3;
-            break;
-
-        case GL_COLOR_CLEAR_VALUE:
-        case GL_COLOR_WRITEMASK:
-        case GL_CURRENT_COLOR:
-        case GL_CURRENT_TEXTURE_COORDS:
-        case GL_FOG_COLOR:
-        case GL_LIGHT_MODEL_AMBIENT:
-        case GL_SCISSOR_BOX:
-        case GL_VIEWPORT:
-            needed = 4;
-            break;
-
-        case GL_MODELVIEW_MATRIX:
-        case GL_PROJECTION_MATRIX:
-        case GL_TEXTURE_MATRIX:
-            needed = 16;
-            break;
-
-        case GL_COMPRESSED_TEXTURE_FORMATS:
-            glGetIntegerv(GL_NUM_COMPRESSED_TEXTURE_FORMATS, &needed);
-            break;
-    }
-#endif
-    return needed;
-}
-
-template <typename JTYPEARRAY, typename CTYPE, void GET(GLenum, CTYPE*)>
-static void
-get
-  (JNIEnv *_env, jobject _this, jint pname, JTYPEARRAY params_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType;
-    const char * _exceptionMessage;
-    CTYPE *params_base = (CTYPE *) 0;
-    jint _remaining;
-    CTYPE *params = (CTYPE *) 0;
-    int _needed = 0;
-
-    if (!params_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "params == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(params_ref) - offset;
-    _needed = getNeededCount(pname);
-    // if we didn't find this pname, we just assume the user passed
-    // an array of the right size -- this might happen with extensions
-    // or if we forget an enum here.
-    if (_remaining < _needed) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "length - offset < needed";
-        goto exit;
-    }
-    params_base = (CTYPE *)
-        _env->GetPrimitiveArrayCritical(params_ref, (jboolean *)0);
-    params = params_base + offset;
-
-    GET(
-        (GLenum)pname,
-        (CTYPE *)params
-    );
-
-exit:
-    if (params_base) {
-        _env->ReleasePrimitiveArrayCritical(params_ref, params_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-
-template <typename CTYPE, void GET(GLenum, CTYPE*)>
-static void
-getarray
-  (JNIEnv *_env, jobject _this, jint pname, jobject params_buf) {
-    jint _exception = 0;
-    const char * _exceptionType;
-    const char * _exceptionMessage;
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    CTYPE *params = (CTYPE *) 0;
-    int _needed = 0;
-
-    params = (CTYPE *)getPointer(_env, params_buf, &_array, &_remaining, &_bufferOffset);
-    _remaining /= sizeof(CTYPE);    // convert from bytes to item count
-    _needed = getNeededCount(pname);
-    // if we didn't find this pname, we just assume the user passed
-    // an array of the right size -- this might happen with extensions
-    // or if we forget an enum here.
-    if (_needed>0 && _remaining < _needed) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "remaining() < needed";
-        goto exit;
-    }
-    if (params == NULL) {
-        char * _paramsBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        params = (CTYPE *) (_paramsBase + _bufferOffset);
-    }
-    GET(
-        (GLenum)pname,
-        (CTYPE *)params
-    );
-
-exit:
-    if (_array) {
-        releasePointer(_env, _array, params, _exception ? JNI_FALSE : JNI_TRUE);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-// --------------------------------------------------------------------------
-/* void glBlendBarrierKHR ( void ) */
-static void
-android_glBlendBarrierKHR__
-  (JNIEnv *_env, jobject _this) {
-    glBlendBarrierKHR();
-}
-
-/* void glDebugMessageControlKHR ( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled ) */
-static void
-android_glDebugMessageControlKHR__IIII_3IIZ
-  (JNIEnv *_env, jobject _this, jint source, jint type, jint severity, jint count, jintArray ids_ref, jint offset, jboolean enabled) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLuint *ids_base = (GLuint *) 0;
-    jint _remaining;
-    GLuint *ids = (GLuint *) 0;
-
-    if (!ids_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "ids == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(ids_ref) - offset;
-    ids_base = (GLuint *)
-        _env->GetPrimitiveArrayCritical(ids_ref, (jboolean *)0);
-    ids = ids_base + offset;
-
-    glDebugMessageControlKHR(
-        (GLenum)source,
-        (GLenum)type,
-        (GLenum)severity,
-        (GLsizei)count,
-        (GLuint *)ids,
-        (GLboolean)enabled
-    );
-
-exit:
-    if (ids_base) {
-        _env->ReleasePrimitiveArrayCritical(ids_ref, ids_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glDebugMessageControlKHR ( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled ) */
-static void
-android_glDebugMessageControlKHR__IIIILjava_nio_IntBuffer_2Z
-  (JNIEnv *_env, jobject _this, jint source, jint type, jint severity, jint count, jobject ids_buf, jboolean enabled) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLuint *ids = (GLuint *) 0;
-
-    ids = (GLuint *)getPointer(_env, ids_buf, &_array, &_remaining, &_bufferOffset);
-    if (ids == NULL) {
-        char * _idsBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        ids = (GLuint *) (_idsBase + _bufferOffset);
-    }
-    glDebugMessageControlKHR(
-        (GLenum)source,
-        (GLenum)type,
-        (GLenum)severity,
-        (GLsizei)count,
-        (GLuint *)ids,
-        (GLboolean)enabled
-    );
-    if (_array) {
-        releasePointer(_env, _array, ids, JNI_FALSE);
-    }
-}
-
-/* void glDebugMessageInsertKHR ( GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf ) */
-static void
-android_glDebugMessageInsertKHR__IIIILjava_lang_String_2
-  (JNIEnv *_env, jobject _this, jint source, jint type, jint id, jint severity, jstring buf) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    const char* _nativebuf = 0;
-    jint _length = 0;
-
-    if (!buf) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "buf == null";
-        goto exit;
-    }
-    _nativebuf = _env->GetStringUTFChars(buf, 0);
-    _length = _env->GetStringUTFLength(buf);
-
-    glDebugMessageInsertKHR(
-        (GLenum)source,
-        (GLenum)type,
-        (GLuint)id,
-        (GLenum)severity,
-        (GLsizei)_length,
-        (GLchar *)_nativebuf
-    );
-
-exit:
-    if (_nativebuf) {
-        _env->ReleaseStringUTFChars(buf, _nativebuf);
-    }
-
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glDebugMessageCallbackKHR ( GLDEBUGPROCKHR callback, const void *userParam ) */
-static void
-android_glDebugMessageCallbackKHR(JNIEnv *_env, jobject _this, jobject callback) {
-    jniThrowException(_env, "java/lang/UnsupportedOperationException", "not yet implemented");
-}
-/* GLuint glGetDebugMessageLogKHR ( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog ) */
-static jint
-android_glGetDebugMessageLogKHR__II_3II_3II_3II_3II_3II_3BI
-  (JNIEnv *_env, jobject _this, jint count, jint bufSize, jintArray sources_ref, jint sourcesOffset, jintArray types_ref, jint typesOffset, jintArray ids_ref, jint idsOffset, jintArray severities_ref, jint severitiesOffset, jintArray lengths_ref, jint lengthsOffset, jbyteArray messageLog_ref, jint messageLogOffset) {
-    jniThrowException(_env, "java/lang/UnsupportedOperationException", "not yet implemented");
-    return 0;
-}
-
-/* GLuint glGetDebugMessageLogKHR ( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog ) */
-static uint
-android_glGetDebugMessageLogKHR__ILjava_nio_IntBuffer_2Ljava_nio_IntBuffer_2Ljava_nio_IntBuffer_2Ljava_nio_IntBuffer_2Ljava_nio_IntBuffer_2Ljava_nio_ByteBuffer_2
-  (JNIEnv *_env, jobject _this, jint count, jobject sources_ref, jobject types_ref, jobject ids_ref, jobject severities_ref, jobject lengths_ref, jobject messageLog_ref) {
-    jniThrowException(_env, "java/lang/UnsupportedOperationException", "not yet implemented");
-    return 0;
-}
-
-/* GLuint glGetDebugMessageLogKHR ( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog ) */
-static jobjectArray
-android_glGetDebugMessageLogKHR__I_3II_3II_3II_3II
-  (JNIEnv *_env, jobject _this, jint count, jintArray sources_ref, jint sourcesOffset, jintArray types_ref, jint typesOffset, jintArray ids_ref, jint idsOffset, jintArray severities_ref, jint severitiesOffset) {
-    jniThrowException(_env, "java/lang/UnsupportedOperationException", "not yet implemented");
-    return 0;
-}
-
-/* GLuint glGetDebugMessageLogKHR ( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog ) */
-static jobjectArray
-android_glGetDebugMessageLogKHR__ILjava_nio_IntBuffer_2Ljava_nio_IntBuffer_2Ljava_nio_IntBuffer_2Ljava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint count, jobject sources_ref, jobject types_ref, jobject ids_ref, jobject severities_ref) {
-    jniThrowException(_env, "java/lang/UnsupportedOperationException", "not yet implemented");
-    return 0;
-}
-/* void glPushDebugGroupKHR ( GLenum source, GLuint id, GLsizei length, const GLchar *message ) */
-static void
-android_glPushDebugGroupKHR__IIILjava_lang_String_2
-  (JNIEnv *_env, jobject _this, jint source, jint id, jint length, jstring message) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    const char* _nativemessage = 0;
-
-    if (!message) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "message == null";
-        goto exit;
-    }
-    _nativemessage = _env->GetStringUTFChars(message, 0);
-
-    glPushDebugGroupKHR(
-        (GLenum)source,
-        (GLuint)id,
-        (GLsizei)length,
-        (GLchar *)_nativemessage
-    );
-
-exit:
-    if (_nativemessage) {
-        _env->ReleaseStringUTFChars(message, _nativemessage);
-    }
-
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glPopDebugGroupKHR ( void ) */
-static void
-android_glPopDebugGroupKHR__
-  (JNIEnv *_env, jobject _this) {
-    glPopDebugGroupKHR();
-}
-
-/* void glObjectLabelKHR ( GLenum identifier, GLuint name, GLsizei length, const GLchar *label ) */
-static void
-android_glObjectLabelKHR__IIILjava_lang_String_2
-  (JNIEnv *_env, jobject _this, jint identifier, jint name, jint length, jstring label) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    const char* _nativelabel = 0;
-
-    if (!label) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "label == null";
-        goto exit;
-    }
-    _nativelabel = _env->GetStringUTFChars(label, 0);
-
-    glObjectLabelKHR(
-        (GLenum)identifier,
-        (GLuint)name,
-        (GLsizei)length,
-        (GLchar *)_nativelabel
-    );
-
-exit:
-    if (_nativelabel) {
-        _env->ReleaseStringUTFChars(label, _nativelabel);
-    }
-
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glGetObjectLabelKHR ( GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label ) */
-static jstring
-android_glGetObjectLabelKHR(JNIEnv *_env, jobject _this, jint identifier, jint name) {
-    jniThrowException(_env, "java/lang/UnsupportedOperationException", "not yet implemented");
-    return NULL;
-}
-
-/* void glObjectPtrLabelKHR ( const void *ptr, GLsizei length, const GLchar *label ) */
-static void
-android_glObjectPtrLabelKHR(JNIEnv *_env, jobject _this, jlong ptr, jstring label) {
-    jniThrowException(_env, "java/lang/UnsupportedOperationException", "not yet implemented");
-}
-
-/* void glGetObjectPtrLabelKHR ( const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label ) */
-static jstring
-android_glGetObjectPtrLabelKHR(JNIEnv *_env, jobject _this, jlong ptr) {
-    jniThrowException(_env, "java/lang/UnsupportedOperationException", "not yet implemented");
-    return NULL;
-}
-
-/* void glGetPointervKHR ( GLenum pname, void **params ) */
-static jobject
-android_glGetDebugMessageCallbackKHR(JNIEnv *_env, jobject _this) {
-    jniThrowException(_env, "java/lang/UnsupportedOperationException", "not yet implemented");
-    return NULL;
-}
-
-/* void glMinSampleShadingOES ( GLfloat value ) */
-static void
-android_glMinSampleShadingOES__F
-  (JNIEnv *_env, jobject _this, jfloat value) {
-    glMinSampleShadingOES(
-        (GLfloat)value
-    );
-}
-
-/* void glTexStorage3DMultisampleOES ( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations ) */
-static void
-android_glTexStorage3DMultisampleOES__IIIIIIZ
-  (JNIEnv *_env, jobject _this, jint target, jint samples, jint internalformat, jint width, jint height, jint depth, jboolean fixedsamplelocations) {
-    glTexStorage3DMultisampleOES(
-        (GLenum)target,
-        (GLsizei)samples,
-        (GLenum)internalformat,
-        (GLsizei)width,
-        (GLsizei)height,
-        (GLsizei)depth,
-        (GLboolean)fixedsamplelocations
-    );
-}
-
-/* void glCopyImageSubDataEXT ( GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth ) */
-static void
-android_glCopyImageSubDataEXT__IIIIIIIIIIIIIII
-  (JNIEnv *_env, jobject _this, jint srcName, jint srcTarget, jint srcLevel, jint srcX, jint srcY, jint srcZ, jint dstName, jint dstTarget, jint dstLevel, jint dstX, jint dstY, jint dstZ, jint srcWidth, jint srcHeight, jint srcDepth) {
-    glCopyImageSubDataEXT(
-        (GLuint)srcName,
-        (GLenum)srcTarget,
-        (GLint)srcLevel,
-        (GLint)srcX,
-        (GLint)srcY,
-        (GLint)srcZ,
-        (GLuint)dstName,
-        (GLenum)dstTarget,
-        (GLint)dstLevel,
-        (GLint)dstX,
-        (GLint)dstY,
-        (GLint)dstZ,
-        (GLsizei)srcWidth,
-        (GLsizei)srcHeight,
-        (GLsizei)srcDepth
-    );
-}
-
-/* void glEnableiEXT ( GLenum target, GLuint index ) */
-static void
-android_glEnableiEXT__II
-  (JNIEnv *_env, jobject _this, jint target, jint index) {
-    glEnableiEXT(
-        (GLenum)target,
-        (GLuint)index
-    );
-}
-
-/* void glDisableiEXT ( GLenum target, GLuint index ) */
-static void
-android_glDisableiEXT__II
-  (JNIEnv *_env, jobject _this, jint target, jint index) {
-    glDisableiEXT(
-        (GLenum)target,
-        (GLuint)index
-    );
-}
-
-/* void glBlendEquationiEXT ( GLuint buf, GLenum mode ) */
-static void
-android_glBlendEquationiEXT__II
-  (JNIEnv *_env, jobject _this, jint buf, jint mode) {
-    glBlendEquationiEXT(
-        (GLuint)buf,
-        (GLenum)mode
-    );
-}
-
-/* void glBlendEquationSeparateiEXT ( GLuint buf, GLenum modeRGB, GLenum modeAlpha ) */
-static void
-android_glBlendEquationSeparateiEXT__III
-  (JNIEnv *_env, jobject _this, jint buf, jint modeRGB, jint modeAlpha) {
-    glBlendEquationSeparateiEXT(
-        (GLuint)buf,
-        (GLenum)modeRGB,
-        (GLenum)modeAlpha
-    );
-}
-
-/* void glBlendFunciEXT ( GLuint buf, GLenum src, GLenum dst ) */
-static void
-android_glBlendFunciEXT__III
-  (JNIEnv *_env, jobject _this, jint buf, jint src, jint dst) {
-    glBlendFunciEXT(
-        (GLuint)buf,
-        (GLenum)src,
-        (GLenum)dst
-    );
-}
-
-/* void glBlendFuncSeparateiEXT ( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha ) */
-static void
-android_glBlendFuncSeparateiEXT__IIIII
-  (JNIEnv *_env, jobject _this, jint buf, jint srcRGB, jint dstRGB, jint srcAlpha, jint dstAlpha) {
-    glBlendFuncSeparateiEXT(
-        (GLuint)buf,
-        (GLenum)srcRGB,
-        (GLenum)dstRGB,
-        (GLenum)srcAlpha,
-        (GLenum)dstAlpha
-    );
-}
-
-/* void glColorMaskiEXT ( GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a ) */
-static void
-android_glColorMaskiEXT__IZZZZ
-  (JNIEnv *_env, jobject _this, jint index, jboolean r, jboolean g, jboolean b, jboolean a) {
-    glColorMaskiEXT(
-        (GLuint)index,
-        (GLboolean)r,
-        (GLboolean)g,
-        (GLboolean)b,
-        (GLboolean)a
-    );
-}
-
-/* GLboolean glIsEnablediEXT ( GLenum target, GLuint index ) */
-static jboolean
-android_glIsEnablediEXT__II
-  (JNIEnv *_env, jobject _this, jint target, jint index) {
-    GLboolean _returnValue;
-    _returnValue = glIsEnablediEXT(
-        (GLenum)target,
-        (GLuint)index
-    );
-    return (jboolean)_returnValue;
-}
-
-/* void glFramebufferTextureEXT ( GLenum target, GLenum attachment, GLuint texture, GLint level ) */
-static void
-android_glFramebufferTextureEXT__IIII
-  (JNIEnv *_env, jobject _this, jint target, jint attachment, jint texture, jint level) {
-    glFramebufferTextureEXT(
-        (GLenum)target,
-        (GLenum)attachment,
-        (GLuint)texture,
-        (GLint)level
-    );
-}
-
-/* void glPrimitiveBoundingBoxEXT ( GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW ) */
-static void
-android_glPrimitiveBoundingBoxEXT__FFFFFFFF
-  (JNIEnv *_env, jobject _this, jfloat minX, jfloat minY, jfloat minZ, jfloat minW, jfloat maxX, jfloat maxY, jfloat maxZ, jfloat maxW) {
-    glPrimitiveBoundingBoxEXT(
-        (GLfloat)minX,
-        (GLfloat)minY,
-        (GLfloat)minZ,
-        (GLfloat)minW,
-        (GLfloat)maxX,
-        (GLfloat)maxY,
-        (GLfloat)maxZ,
-        (GLfloat)maxW
-    );
-}
-
-/* void glPatchParameteriEXT ( GLenum pname, GLint value ) */
-static void
-android_glPatchParameteriEXT__II
-  (JNIEnv *_env, jobject _this, jint pname, jint value) {
-    glPatchParameteriEXT(
-        (GLenum)pname,
-        (GLint)value
-    );
-}
-
-/* void glTexParameterIivEXT ( GLenum target, GLenum pname, const GLint *params ) */
-static void
-android_glTexParameterIivEXT__II_3II
-  (JNIEnv *_env, jobject _this, jint target, jint pname, jintArray params_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLint *params_base = (GLint *) 0;
-    jint _remaining;
-    GLint *params = (GLint *) 0;
-
-    if (!params_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "params == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(params_ref) - offset;
-    params_base = (GLint *)
-        _env->GetPrimitiveArrayCritical(params_ref, (jboolean *)0);
-    params = params_base + offset;
-
-    glTexParameterIivEXT(
-        (GLenum)target,
-        (GLenum)pname,
-        (GLint *)params
-    );
-
-exit:
-    if (params_base) {
-        _env->ReleasePrimitiveArrayCritical(params_ref, params_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glTexParameterIivEXT ( GLenum target, GLenum pname, const GLint *params ) */
-static void
-android_glTexParameterIivEXT__IILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint target, jint pname, jobject params_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLint *params = (GLint *) 0;
-
-    params = (GLint *)getPointer(_env, params_buf, &_array, &_remaining, &_bufferOffset);
-    if (params == NULL) {
-        char * _paramsBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        params = (GLint *) (_paramsBase + _bufferOffset);
-    }
-    glTexParameterIivEXT(
-        (GLenum)target,
-        (GLenum)pname,
-        (GLint *)params
-    );
-    if (_array) {
-        releasePointer(_env, _array, params, JNI_FALSE);
-    }
-}
-
-/* void glTexParameterIuivEXT ( GLenum target, GLenum pname, const GLuint *params ) */
-static void
-android_glTexParameterIuivEXT__II_3II
-  (JNIEnv *_env, jobject _this, jint target, jint pname, jintArray params_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLuint *params_base = (GLuint *) 0;
-    jint _remaining;
-    GLuint *params = (GLuint *) 0;
-
-    if (!params_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "params == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(params_ref) - offset;
-    params_base = (GLuint *)
-        _env->GetPrimitiveArrayCritical(params_ref, (jboolean *)0);
-    params = params_base + offset;
-
-    glTexParameterIuivEXT(
-        (GLenum)target,
-        (GLenum)pname,
-        (GLuint *)params
-    );
-
-exit:
-    if (params_base) {
-        _env->ReleasePrimitiveArrayCritical(params_ref, params_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glTexParameterIuivEXT ( GLenum target, GLenum pname, const GLuint *params ) */
-static void
-android_glTexParameterIuivEXT__IILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint target, jint pname, jobject params_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLuint *params = (GLuint *) 0;
-
-    params = (GLuint *)getPointer(_env, params_buf, &_array, &_remaining, &_bufferOffset);
-    if (params == NULL) {
-        char * _paramsBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        params = (GLuint *) (_paramsBase + _bufferOffset);
-    }
-    glTexParameterIuivEXT(
-        (GLenum)target,
-        (GLenum)pname,
-        (GLuint *)params
-    );
-    if (_array) {
-        releasePointer(_env, _array, params, JNI_FALSE);
-    }
-}
-
-/* void glGetTexParameterIivEXT ( GLenum target, GLenum pname, GLint *params ) */
-static void
-android_glGetTexParameterIivEXT__II_3II
-  (JNIEnv *_env, jobject _this, jint target, jint pname, jintArray params_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLint *params_base = (GLint *) 0;
-    jint _remaining;
-    GLint *params = (GLint *) 0;
-
-    if (!params_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "params == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(params_ref) - offset;
-    params_base = (GLint *)
-        _env->GetPrimitiveArrayCritical(params_ref, (jboolean *)0);
-    params = params_base + offset;
-
-    glGetTexParameterIivEXT(
-        (GLenum)target,
-        (GLenum)pname,
-        (GLint *)params
-    );
-
-exit:
-    if (params_base) {
-        _env->ReleasePrimitiveArrayCritical(params_ref, params_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glGetTexParameterIivEXT ( GLenum target, GLenum pname, GLint *params ) */
-static void
-android_glGetTexParameterIivEXT__IILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint target, jint pname, jobject params_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLint *params = (GLint *) 0;
-
-    params = (GLint *)getPointer(_env, params_buf, &_array, &_remaining, &_bufferOffset);
-    if (params == NULL) {
-        char * _paramsBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        params = (GLint *) (_paramsBase + _bufferOffset);
-    }
-    glGetTexParameterIivEXT(
-        (GLenum)target,
-        (GLenum)pname,
-        (GLint *)params
-    );
-    if (_array) {
-        releasePointer(_env, _array, params, JNI_TRUE);
-    }
-}
-
-/* void glGetTexParameterIuivEXT ( GLenum target, GLenum pname, GLuint *params ) */
-static void
-android_glGetTexParameterIuivEXT__II_3II
-  (JNIEnv *_env, jobject _this, jint target, jint pname, jintArray params_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLuint *params_base = (GLuint *) 0;
-    jint _remaining;
-    GLuint *params = (GLuint *) 0;
-
-    if (!params_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "params == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(params_ref) - offset;
-    params_base = (GLuint *)
-        _env->GetPrimitiveArrayCritical(params_ref, (jboolean *)0);
-    params = params_base + offset;
-
-    glGetTexParameterIuivEXT(
-        (GLenum)target,
-        (GLenum)pname,
-        (GLuint *)params
-    );
-
-exit:
-    if (params_base) {
-        _env->ReleasePrimitiveArrayCritical(params_ref, params_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glGetTexParameterIuivEXT ( GLenum target, GLenum pname, GLuint *params ) */
-static void
-android_glGetTexParameterIuivEXT__IILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint target, jint pname, jobject params_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLuint *params = (GLuint *) 0;
-
-    params = (GLuint *)getPointer(_env, params_buf, &_array, &_remaining, &_bufferOffset);
-    if (params == NULL) {
-        char * _paramsBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        params = (GLuint *) (_paramsBase + _bufferOffset);
-    }
-    glGetTexParameterIuivEXT(
-        (GLenum)target,
-        (GLenum)pname,
-        (GLuint *)params
-    );
-    if (_array) {
-        releasePointer(_env, _array, params, JNI_TRUE);
-    }
-}
-
-/* void glSamplerParameterIivEXT ( GLuint sampler, GLenum pname, const GLint *param ) */
-static void
-android_glSamplerParameterIivEXT__II_3II
-  (JNIEnv *_env, jobject _this, jint sampler, jint pname, jintArray param_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLint *param_base = (GLint *) 0;
-    jint _remaining;
-    GLint *param = (GLint *) 0;
-
-    if (!param_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "param == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(param_ref) - offset;
-    param_base = (GLint *)
-        _env->GetPrimitiveArrayCritical(param_ref, (jboolean *)0);
-    param = param_base + offset;
-
-    glSamplerParameterIivEXT(
-        (GLuint)sampler,
-        (GLenum)pname,
-        (GLint *)param
-    );
-
-exit:
-    if (param_base) {
-        _env->ReleasePrimitiveArrayCritical(param_ref, param_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glSamplerParameterIivEXT ( GLuint sampler, GLenum pname, const GLint *param ) */
-static void
-android_glSamplerParameterIivEXT__IILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint sampler, jint pname, jobject param_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLint *param = (GLint *) 0;
-
-    param = (GLint *)getPointer(_env, param_buf, &_array, &_remaining, &_bufferOffset);
-    if (param == NULL) {
-        char * _paramBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        param = (GLint *) (_paramBase + _bufferOffset);
-    }
-    glSamplerParameterIivEXT(
-        (GLuint)sampler,
-        (GLenum)pname,
-        (GLint *)param
-    );
-    if (_array) {
-        releasePointer(_env, _array, param, JNI_FALSE);
-    }
-}
-
-/* void glSamplerParameterIuivEXT ( GLuint sampler, GLenum pname, const GLuint *param ) */
-static void
-android_glSamplerParameterIuivEXT__II_3II
-  (JNIEnv *_env, jobject _this, jint sampler, jint pname, jintArray param_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLuint *param_base = (GLuint *) 0;
-    jint _remaining;
-    GLuint *param = (GLuint *) 0;
-
-    if (!param_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "param == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(param_ref) - offset;
-    param_base = (GLuint *)
-        _env->GetPrimitiveArrayCritical(param_ref, (jboolean *)0);
-    param = param_base + offset;
-
-    glSamplerParameterIuivEXT(
-        (GLuint)sampler,
-        (GLenum)pname,
-        (GLuint *)param
-    );
-
-exit:
-    if (param_base) {
-        _env->ReleasePrimitiveArrayCritical(param_ref, param_base,
-            JNI_ABORT);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glSamplerParameterIuivEXT ( GLuint sampler, GLenum pname, const GLuint *param ) */
-static void
-android_glSamplerParameterIuivEXT__IILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint sampler, jint pname, jobject param_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLuint *param = (GLuint *) 0;
-
-    param = (GLuint *)getPointer(_env, param_buf, &_array, &_remaining, &_bufferOffset);
-    if (param == NULL) {
-        char * _paramBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        param = (GLuint *) (_paramBase + _bufferOffset);
-    }
-    glSamplerParameterIuivEXT(
-        (GLuint)sampler,
-        (GLenum)pname,
-        (GLuint *)param
-    );
-    if (_array) {
-        releasePointer(_env, _array, param, JNI_FALSE);
-    }
-}
-
-/* void glGetSamplerParameterIivEXT ( GLuint sampler, GLenum pname, GLint *params ) */
-static void
-android_glGetSamplerParameterIivEXT__II_3II
-  (JNIEnv *_env, jobject _this, jint sampler, jint pname, jintArray params_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLint *params_base = (GLint *) 0;
-    jint _remaining;
-    GLint *params = (GLint *) 0;
-
-    if (!params_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "params == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(params_ref) - offset;
-    params_base = (GLint *)
-        _env->GetPrimitiveArrayCritical(params_ref, (jboolean *)0);
-    params = params_base + offset;
-
-    glGetSamplerParameterIivEXT(
-        (GLuint)sampler,
-        (GLenum)pname,
-        (GLint *)params
-    );
-
-exit:
-    if (params_base) {
-        _env->ReleasePrimitiveArrayCritical(params_ref, params_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glGetSamplerParameterIivEXT ( GLuint sampler, GLenum pname, GLint *params ) */
-static void
-android_glGetSamplerParameterIivEXT__IILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint sampler, jint pname, jobject params_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLint *params = (GLint *) 0;
-
-    params = (GLint *)getPointer(_env, params_buf, &_array, &_remaining, &_bufferOffset);
-    if (params == NULL) {
-        char * _paramsBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        params = (GLint *) (_paramsBase + _bufferOffset);
-    }
-    glGetSamplerParameterIivEXT(
-        (GLuint)sampler,
-        (GLenum)pname,
-        (GLint *)params
-    );
-    if (_array) {
-        releasePointer(_env, _array, params, JNI_TRUE);
-    }
-}
-
-/* void glGetSamplerParameterIuivEXT ( GLuint sampler, GLenum pname, GLuint *params ) */
-static void
-android_glGetSamplerParameterIuivEXT__II_3II
-  (JNIEnv *_env, jobject _this, jint sampler, jint pname, jintArray params_ref, jint offset) {
-    jint _exception = 0;
-    const char * _exceptionType = NULL;
-    const char * _exceptionMessage = NULL;
-    GLuint *params_base = (GLuint *) 0;
-    jint _remaining;
-    GLuint *params = (GLuint *) 0;
-
-    if (!params_ref) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "params == null";
-        goto exit;
-    }
-    if (offset < 0) {
-        _exception = 1;
-        _exceptionType = "java/lang/IllegalArgumentException";
-        _exceptionMessage = "offset < 0";
-        goto exit;
-    }
-    _remaining = _env->GetArrayLength(params_ref) - offset;
-    params_base = (GLuint *)
-        _env->GetPrimitiveArrayCritical(params_ref, (jboolean *)0);
-    params = params_base + offset;
-
-    glGetSamplerParameterIuivEXT(
-        (GLuint)sampler,
-        (GLenum)pname,
-        (GLuint *)params
-    );
-
-exit:
-    if (params_base) {
-        _env->ReleasePrimitiveArrayCritical(params_ref, params_base,
-            _exception ? JNI_ABORT: 0);
-    }
-    if (_exception) {
-        jniThrowException(_env, _exceptionType, _exceptionMessage);
-    }
-}
-
-/* void glGetSamplerParameterIuivEXT ( GLuint sampler, GLenum pname, GLuint *params ) */
-static void
-android_glGetSamplerParameterIuivEXT__IILjava_nio_IntBuffer_2
-  (JNIEnv *_env, jobject _this, jint sampler, jint pname, jobject params_buf) {
-    jarray _array = (jarray) 0;
-    jint _bufferOffset = (jint) 0;
-    jint _remaining;
-    GLuint *params = (GLuint *) 0;
-
-    params = (GLuint *)getPointer(_env, params_buf, &_array, &_remaining, &_bufferOffset);
-    if (params == NULL) {
-        char * _paramsBase = (char *)_env->GetPrimitiveArrayCritical(_array, (jboolean *) 0);
-        params = (GLuint *) (_paramsBase + _bufferOffset);
-    }
-    glGetSamplerParameterIuivEXT(
-        (GLuint)sampler,
-        (GLenum)pname,
-        (GLuint *)params
-    );
-    if (_array) {
-        releasePointer(_env, _array, params, JNI_TRUE);
-    }
-}
-
-/* void glTexBufferEXT ( GLenum target, GLenum internalformat, GLuint buffer ) */
-static void
-android_glTexBufferEXT__III
-  (JNIEnv *_env, jobject _this, jint target, jint internalformat, jint buffer) {
-    glTexBufferEXT(
-        (GLenum)target,
-        (GLenum)internalformat,
-        (GLuint)buffer
-    );
-}
-
-/* void glTexBufferRangeEXT ( GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size ) */
-static void
-android_glTexBufferRangeEXT__IIIII
-  (JNIEnv *_env, jobject _this, jint target, jint internalformat, jint buffer, jint offset, jint size) {
-    glTexBufferRangeEXT(
-        (GLenum)target,
-        (GLenum)internalformat,
-        (GLuint)buffer,
-        (GLintptr)offset,
-        (GLsizeiptr)size
-    );
-}
-
-static const char *classPathName = "android/opengl/GLES31Ext";
-
-static JNINativeMethod methods[] = {
-{"_nativeClassInit", "()V", (void*)nativeClassInit },
-{"glBlendBarrierKHR", "()V", (void *) android_glBlendBarrierKHR__ },
-{"glDebugMessageControlKHR", "(IIII[IIZ)V", (void *) android_glDebugMessageControlKHR__IIII_3IIZ },
-{"glDebugMessageControlKHR", "(IIIILjava/nio/IntBuffer;Z)V", (void *) android_glDebugMessageControlKHR__IIIILjava_nio_IntBuffer_2Z },
-{"glDebugMessageInsertKHR", "(IIIILjava/lang/String;)V", (void *) android_glDebugMessageInsertKHR__IIIILjava_lang_String_2 },
-{"glDebugMessageCallbackKHR", "(Landroid/opengl/GLES31Ext$DebugProcKHR;)V", (void *) android_glDebugMessageCallbackKHR },
-{"glGetDebugMessageLogKHR", "(II[II[II[II[II[II[BI)I", (void *) android_glGetDebugMessageLogKHR__II_3II_3II_3II_3II_3II_3BI },
-{"glGetDebugMessageLogKHR", "(ILjava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/ByteBuffer;)I", (void *) android_glGetDebugMessageLogKHR__ILjava_nio_IntBuffer_2Ljava_nio_IntBuffer_2Ljava_nio_IntBuffer_2Ljava_nio_IntBuffer_2Ljava_nio_IntBuffer_2Ljava_nio_ByteBuffer_2 },
-{"glGetDebugMessageLogKHR", "(I[II[II[II[II)[Ljava/lang/String;", (void *) android_glGetDebugMessageLogKHR__I_3II_3II_3II_3II },
-{"glGetDebugMessageLogKHR", "(ILjava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;)[Ljava/lang/String;", (void *) android_glGetDebugMessageLogKHR__ILjava_nio_IntBuffer_2Ljava_nio_IntBuffer_2Ljava_nio_IntBuffer_2Ljava_nio_IntBuffer_2 },
-{"glPushDebugGroupKHR", "(IIILjava/lang/String;)V", (void *) android_glPushDebugGroupKHR__IIILjava_lang_String_2 },
-{"glPopDebugGroupKHR", "()V", (void *) android_glPopDebugGroupKHR__ },
-{"glObjectLabelKHR", "(IIILjava/lang/String;)V", (void *) android_glObjectLabelKHR__IIILjava_lang_String_2 },
-{"glGetObjectLabelKHR", "(II)Ljava/lang/String;", (void *) android_glGetObjectLabelKHR },
-{"glObjectPtrLabelKHR", "(JLjava/lang/String;)V", (void *) android_glObjectPtrLabelKHR },
-{"glGetObjectPtrLabelKHR", "(J)Ljava/lang/String;", (void *) android_glGetObjectPtrLabelKHR },
-{"glGetDebugMessageCallbackKHR", "()Landroid/opengl/GLES31Ext$DebugProcKHR;", (void *) android_glGetDebugMessageCallbackKHR },
-{"glMinSampleShadingOES", "(F)V", (void *) android_glMinSampleShadingOES__F },
-{"glTexStorage3DMultisampleOES", "(IIIIIIZ)V", (void *) android_glTexStorage3DMultisampleOES__IIIIIIZ },
-{"glCopyImageSubDataEXT", "(IIIIIIIIIIIIIII)V", (void *) android_glCopyImageSubDataEXT__IIIIIIIIIIIIIII },
-{"glEnableiEXT", "(II)V", (void *) android_glEnableiEXT__II },
-{"glDisableiEXT", "(II)V", (void *) android_glDisableiEXT__II },
-{"glBlendEquationiEXT", "(II)V", (void *) android_glBlendEquationiEXT__II },
-{"glBlendEquationSeparateiEXT", "(III)V", (void *) android_glBlendEquationSeparateiEXT__III },
-{"glBlendFunciEXT", "(III)V", (void *) android_glBlendFunciEXT__III },
-{"glBlendFuncSeparateiEXT", "(IIIII)V", (void *) android_glBlendFuncSeparateiEXT__IIIII },
-{"glColorMaskiEXT", "(IZZZZ)V", (void *) android_glColorMaskiEXT__IZZZZ },
-{"glIsEnablediEXT", "(II)Z", (void *) android_glIsEnablediEXT__II },
-{"glFramebufferTextureEXT", "(IIII)V", (void *) android_glFramebufferTextureEXT__IIII },
-{"glPrimitiveBoundingBoxEXT", "(FFFFFFFF)V", (void *) android_glPrimitiveBoundingBoxEXT__FFFFFFFF },
-{"glPatchParameteriEXT", "(II)V", (void *) android_glPatchParameteriEXT__II },
-{"glTexParameterIivEXT", "(II[II)V", (void *) android_glTexParameterIivEXT__II_3II },
-{"glTexParameterIivEXT", "(IILjava/nio/IntBuffer;)V", (void *) android_glTexParameterIivEXT__IILjava_nio_IntBuffer_2 },
-{"glTexParameterIuivEXT", "(II[II)V", (void *) android_glTexParameterIuivEXT__II_3II },
-{"glTexParameterIuivEXT", "(IILjava/nio/IntBuffer;)V", (void *) android_glTexParameterIuivEXT__IILjava_nio_IntBuffer_2 },
-{"glGetTexParameterIivEXT", "(II[II)V", (void *) android_glGetTexParameterIivEXT__II_3II },
-{"glGetTexParameterIivEXT", "(IILjava/nio/IntBuffer;)V", (void *) android_glGetTexParameterIivEXT__IILjava_nio_IntBuffer_2 },
-{"glGetTexParameterIuivEXT", "(II[II)V", (void *) android_glGetTexParameterIuivEXT__II_3II },
-{"glGetTexParameterIuivEXT", "(IILjava/nio/IntBuffer;)V", (void *) android_glGetTexParameterIuivEXT__IILjava_nio_IntBuffer_2 },
-{"glSamplerParameterIivEXT", "(II[II)V", (void *) android_glSamplerParameterIivEXT__II_3II },
-{"glSamplerParameterIivEXT", "(IILjava/nio/IntBuffer;)V", (void *) android_glSamplerParameterIivEXT__IILjava_nio_IntBuffer_2 },
-{"glSamplerParameterIuivEXT", "(II[II)V", (void *) android_glSamplerParameterIuivEXT__II_3II },
-{"glSamplerParameterIuivEXT", "(IILjava/nio/IntBuffer;)V", (void *) android_glSamplerParameterIuivEXT__IILjava_nio_IntBuffer_2 },
-{"glGetSamplerParameterIivEXT", "(II[II)V", (void *) android_glGetSamplerParameterIivEXT__II_3II },
-{"glGetSamplerParameterIivEXT", "(IILjava/nio/IntBuffer;)V", (void *) android_glGetSamplerParameterIivEXT__IILjava_nio_IntBuffer_2 },
-{"glGetSamplerParameterIuivEXT", "(II[II)V", (void *) android_glGetSamplerParameterIuivEXT__II_3II },
-{"glGetSamplerParameterIuivEXT", "(IILjava/nio/IntBuffer;)V", (void *) android_glGetSamplerParameterIuivEXT__IILjava_nio_IntBuffer_2 },
-{"glTexBufferEXT", "(III)V", (void *) android_glTexBufferEXT__III },
-{"glTexBufferRangeEXT", "(IIIII)V", (void *) android_glTexBufferRangeEXT__IIIII },
-};
-
-int register_android_opengl_jni_GLES31Ext(JNIEnv *_env)
-{
-    int err;
-    err = android::AndroidRuntime::registerNativeMethods(_env, classPathName, methods, NELEM(methods));
-    return err;
-}
diff --git a/opengl/java/android/opengl/GLES31.java b/opengl/java/android/opengl/GLES31.java
deleted file mode 100644
index 9f8728fa03e93..0000000000000
--- a/opengl/java/android/opengl/GLES31.java
+++ /dev/null
@@ -1,1100 +0,0 @@
-/*
- * Copyright 2014 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-// This source file is automatically generated
-
-package android.opengl;
-
-/** OpenGL ES 3.1
- * @hide
- */
-public class GLES31 extends GLES30 {
-
-    public static final int GL_VERTEX_SHADER_BIT                            = 0x00000001;
-    public static final int GL_FRAGMENT_SHADER_BIT                          = 0x00000002;
-    public static final int GL_UNIFORM_BARRIER_BIT                          = 0x00000004;
-    public static final int GL_TEXTURE_FETCH_BARRIER_BIT                    = 0x00000008;
-    public static final int GL_COMPUTE_SHADER_BIT                           = 0x00000020;
-    public static final int GL_COMMAND_BARRIER_BIT                          = 0x00000040;
-    public static final int GL_PIXEL_BUFFER_BARRIER_BIT                     = 0x00000080;
-    public static final int GL_TEXTURE_UPDATE_BARRIER_BIT                   = 0x00000100;
-    public static final int GL_BUFFER_UPDATE_BARRIER_BIT                    = 0x00000200;
-    public static final int GL_FRAMEBUFFER_BARRIER_BIT                      = 0x00000400;
-    public static final int GL_TRANSFORM_FEEDBACK_BARRIER_BIT               = 0x00000800;
-    public static final int GL_ATOMIC_COUNTER_BARRIER_BIT                   = 0x00001000;
-    public static final int GL_SHADER_STORAGE_BARRIER_BIT                   = 0x00002000;
-    public static final int GL_ALL_SHADER_BITS                              = -1; // 0xFFFFFFFF
-
-    public static final int GL_TEXTURE_WIDTH                                = 0x1000;
-    public static final int GL_TEXTURE_HEIGHT                               = 0x1001;
-    public static final int GL_TEXTURE_INTERNAL_FORMAT                      = 0x1003;
-    public static final int GL_STENCIL_INDEX                                = 0x1901;
-    public static final int GL_TEXTURE_RED_SIZE                             = 0x805C;
-    public static final int GL_TEXTURE_GREEN_SIZE                           = 0x805D;
-    public static final int GL_TEXTURE_BLUE_SIZE                            = 0x805E;
-    public static final int GL_TEXTURE_ALPHA_SIZE                           = 0x805F;
-    public static final int GL_TEXTURE_DEPTH                                = 0x8071;
-    public static final int GL_PROGRAM_SEPARABLE                            = 0x8258;
-    public static final int GL_ACTIVE_PROGRAM                               = 0x8259;
-    public static final int GL_PROGRAM_PIPELINE_BINDING                     = 0x825A;
-    public static final int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE               = 0x8262;
-    public static final int GL_MAX_COMPUTE_UNIFORM_COMPONENTS               = 0x8263;
-    public static final int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS           = 0x8264;
-    public static final int GL_MAX_COMPUTE_ATOMIC_COUNTERS                  = 0x8265;
-    public static final int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS      = 0x8266;
-    public static final int GL_COMPUTE_WORK_GROUP_SIZE                      = 0x8267;
-    public static final int GL_MAX_UNIFORM_LOCATIONS                        = 0x826E;
-    public static final int GL_VERTEX_ATTRIB_BINDING                        = 0x82D4;
-    public static final int GL_VERTEX_ATTRIB_RELATIVE_OFFSET                = 0x82D5;
-    public static final int GL_VERTEX_BINDING_DIVISOR                       = 0x82D6;
-    public static final int GL_VERTEX_BINDING_OFFSET                        = 0x82D7;
-    public static final int GL_VERTEX_BINDING_STRIDE                        = 0x82D8;
-    public static final int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET            = 0x82D9;
-    public static final int GL_MAX_VERTEX_ATTRIB_BINDINGS                   = 0x82DA;
-    public static final int GL_MAX_VERTEX_ATTRIB_STRIDE                     = 0x82E5;
-    public static final int GL_TEXTURE_COMPRESSED                           = 0x86A1;
-    public static final int GL_TEXTURE_DEPTH_SIZE                           = 0x884A;
-    public static final int GL_READ_ONLY                                    = 0x88B8;
-    public static final int GL_WRITE_ONLY                                   = 0x88B9;
-    public static final int GL_READ_WRITE                                   = 0x88BA;
-    public static final int GL_TEXTURE_STENCIL_SIZE                         = 0x88F1;
-    public static final int GL_TEXTURE_RED_TYPE                             = 0x8C10;
-    public static final int GL_TEXTURE_GREEN_TYPE                           = 0x8C11;
-    public static final int GL_TEXTURE_BLUE_TYPE                            = 0x8C12;
-    public static final int GL_TEXTURE_ALPHA_TYPE                           = 0x8C13;
-    public static final int GL_TEXTURE_DEPTH_TYPE                           = 0x8C16;
-    public static final int GL_TEXTURE_SHARED_SIZE                          = 0x8C3F;
-    public static final int GL_SAMPLE_POSITION                              = 0x8E50;
-    public static final int GL_SAMPLE_MASK                                  = 0x8E51;
-    public static final int GL_SAMPLE_MASK_VALUE                            = 0x8E52;
-    public static final int GL_MAX_SAMPLE_MASK_WORDS                        = 0x8E59;
-    public static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET            = 0x8E5E;
-    public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET            = 0x8E5F;
-    public static final int GL_MAX_IMAGE_UNITS                              = 0x8F38;
-    public static final int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES         = 0x8F39;
-    public static final int GL_IMAGE_BINDING_NAME                           = 0x8F3A;
-    public static final int GL_IMAGE_BINDING_LEVEL                          = 0x8F3B;
-    public static final int GL_IMAGE_BINDING_LAYERED                        = 0x8F3C;
-    public static final int GL_IMAGE_BINDING_LAYER                          = 0x8F3D;
-    public static final int GL_IMAGE_BINDING_ACCESS                         = 0x8F3E;
-    public static final int GL_DRAW_INDIRECT_BUFFER                         = 0x8F3F;
-    public static final int GL_DRAW_INDIRECT_BUFFER_BINDING                 = 0x8F43;
-    public static final int GL_VERTEX_BINDING_BUFFER                        = 0x8F4F;
-    public static final int GL_IMAGE_2D                                     = 0x904D;
-    public static final int GL_IMAGE_3D                                     = 0x904E;
-    public static final int GL_IMAGE_CUBE                                   = 0x9050;
-    public static final int GL_IMAGE_2D_ARRAY                               = 0x9053;
-    public static final int GL_INT_IMAGE_2D                                 = 0x9058;
-    public static final int GL_INT_IMAGE_3D                                 = 0x9059;
-    public static final int GL_INT_IMAGE_CUBE                               = 0x905B;
-    public static final int GL_INT_IMAGE_2D_ARRAY                           = 0x905E;
-    public static final int GL_UNSIGNED_INT_IMAGE_2D                        = 0x9063;
-    public static final int GL_UNSIGNED_INT_IMAGE_3D                        = 0x9064;
-    public static final int GL_UNSIGNED_INT_IMAGE_CUBE                      = 0x9066;
-    public static final int GL_UNSIGNED_INT_IMAGE_2D_ARRAY                  = 0x9069;
-    public static final int GL_IMAGE_BINDING_FORMAT                         = 0x906E;
-    public static final int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE              = 0x90C7;
-    public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE           = 0x90C8;
-    public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS          = 0x90C9;
-    public static final int GL_MAX_VERTEX_IMAGE_UNIFORMS                    = 0x90CA;
-    public static final int GL_MAX_FRAGMENT_IMAGE_UNIFORMS                  = 0x90CE;
-    public static final int GL_MAX_COMBINED_IMAGE_UNIFORMS                  = 0x90CF;
-    public static final int GL_SHADER_STORAGE_BUFFER                        = 0x90D2;
-    public static final int GL_SHADER_STORAGE_BUFFER_BINDING                = 0x90D3;
-    public static final int GL_SHADER_STORAGE_BUFFER_START                  = 0x90D4;
-    public static final int GL_SHADER_STORAGE_BUFFER_SIZE                   = 0x90D5;
-    public static final int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS             = 0x90D6;
-    public static final int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS           = 0x90DA;
-    public static final int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS            = 0x90DB;
-    public static final int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS           = 0x90DC;
-    public static final int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS           = 0x90DD;
-    public static final int GL_MAX_SHADER_STORAGE_BLOCK_SIZE                = 0x90DE;
-    public static final int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT       = 0x90DF;
-    public static final int GL_DEPTH_STENCIL_TEXTURE_MODE                   = 0x90EA;
-    public static final int GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS           = 0x90EB;
-    public static final int GL_DISPATCH_INDIRECT_BUFFER                     = 0x90EE;
-    public static final int GL_DISPATCH_INDIRECT_BUFFER_BINDING             = 0x90EF;
-    public static final int GL_TEXTURE_2D_MULTISAMPLE                       = 0x9100;
-    public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE               = 0x9104;
-    public static final int GL_TEXTURE_SAMPLES                              = 0x9106;
-    public static final int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS               = 0x9107;
-    public static final int GL_SAMPLER_2D_MULTISAMPLE                       = 0x9108;
-    public static final int GL_INT_SAMPLER_2D_MULTISAMPLE                   = 0x9109;
-    public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE          = 0x910A;
-    public static final int GL_MAX_COLOR_TEXTURE_SAMPLES                    = 0x910E;
-    public static final int GL_MAX_DEPTH_TEXTURE_SAMPLES                    = 0x910F;
-    public static final int GL_MAX_INTEGER_SAMPLES                          = 0x9110;
-    public static final int GL_COMPUTE_SHADER                               = 0x91B9;
-    public static final int GL_MAX_COMPUTE_UNIFORM_BLOCKS                   = 0x91BB;
-    public static final int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS              = 0x91BC;
-    public static final int GL_MAX_COMPUTE_IMAGE_UNIFORMS                   = 0x91BD;
-    public static final int GL_MAX_COMPUTE_WORK_GROUP_COUNT                 = 0x91BE;
-    public static final int GL_MAX_COMPUTE_WORK_GROUP_SIZE                  = 0x91BF;
-    public static final int GL_ATOMIC_COUNTER_BUFFER                        = 0x92C0;
-    public static final int GL_ATOMIC_COUNTER_BUFFER_BINDING                = 0x92C1;
-    public static final int GL_ATOMIC_COUNTER_BUFFER_START                  = 0x92C2;
-    public static final int GL_ATOMIC_COUNTER_BUFFER_SIZE                   = 0x92C3;
-    public static final int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS            = 0x92CC;
-    public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS          = 0x92D0;
-    public static final int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS          = 0x92D1;
-    public static final int GL_MAX_VERTEX_ATOMIC_COUNTERS                   = 0x92D2;
-    public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTERS                 = 0x92D6;
-    public static final int GL_MAX_COMBINED_ATOMIC_COUNTERS                 = 0x92D7;
-    public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE               = 0x92D8;
-    public static final int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS                = 0x92D9;
-    public static final int GL_UNSIGNED_INT_ATOMIC_COUNTER                  = 0x92DB;
-    public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS           = 0x92DC;
-    public static final int GL_UNIFORM                                      = 0x92E1;
-    public static final int GL_UNIFORM_BLOCK                                = 0x92E2;
-    public static final int GL_PROGRAM_INPUT                                = 0x92E3;
-    public static final int GL_PROGRAM_OUTPUT                               = 0x92E4;
-    public static final int GL_BUFFER_VARIABLE                              = 0x92E5;
-    public static final int GL_SHADER_STORAGE_BLOCK                         = 0x92E6;
-    public static final int GL_TRANSFORM_FEEDBACK_VARYING                   = 0x92F4;
-    public static final int GL_ACTIVE_RESOURCES                             = 0x92F5;
-    public static final int GL_MAX_NAME_LENGTH                              = 0x92F6;
-    public static final int GL_MAX_NUM_ACTIVE_VARIABLES                     = 0x92F7;
-    public static final int GL_NAME_LENGTH                                  = 0x92F9;
-    public static final int GL_TYPE                                         = 0x92FA;
-    public static final int GL_ARRAY_SIZE                                   = 0x92FB;
-    public static final int GL_OFFSET                                       = 0x92FC;
-    public static final int GL_BLOCK_INDEX                                  = 0x92FD;
-    public static final int GL_ARRAY_STRIDE                                 = 0x92FE;
-    public static final int GL_MATRIX_STRIDE                                = 0x92FF;
-    public static final int GL_IS_ROW_MAJOR                                 = 0x9300;
-    public static final int GL_ATOMIC_COUNTER_BUFFER_INDEX                  = 0x9301;
-    public static final int GL_BUFFER_BINDING                               = 0x9302;
-    public static final int GL_BUFFER_DATA_SIZE                             = 0x9303;
-    public static final int GL_NUM_ACTIVE_VARIABLES                         = 0x9304;
-    public static final int GL_ACTIVE_VARIABLES                             = 0x9305;
-    public static final int GL_REFERENCED_BY_VERTEX_SHADER                  = 0x9306;
-    public static final int GL_REFERENCED_BY_FRAGMENT_SHADER                = 0x930A;
-    public static final int GL_REFERENCED_BY_COMPUTE_SHADER                 = 0x930B;
-    public static final int GL_TOP_LEVEL_ARRAY_SIZE                         = 0x930C;
-    public static final int GL_TOP_LEVEL_ARRAY_STRIDE                       = 0x930D;
-    public static final int GL_LOCATION                                     = 0x930E;
-    public static final int GL_FRAMEBUFFER_DEFAULT_WIDTH                    = 0x9310;
-    public static final int GL_FRAMEBUFFER_DEFAULT_HEIGHT                   = 0x9311;
-    public static final int GL_FRAMEBUFFER_DEFAULT_SAMPLES                  = 0x9313;
-    public static final int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS   = 0x9314;
-    public static final int GL_MAX_FRAMEBUFFER_WIDTH                        = 0x9315;
-    public static final int GL_MAX_FRAMEBUFFER_HEIGHT                       = 0x9316;
-    public static final int GL_MAX_FRAMEBUFFER_SAMPLES                      = 0x9318;
-
-    native private static void _nativeClassInit();
-    static {
-        _nativeClassInit();
-    }
-
-    private GLES31() {}
-    // C function void glDispatchCompute ( GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z )
-
-    public static native void glDispatchCompute(
-        int num_groups_x,
-        int num_groups_y,
-        int num_groups_z
-    );
-
-    // C function void glDispatchComputeIndirect ( GLintptr indirect );
-
-    public static native void glDispatchComputeIndirect(long indirect);
-
-    // C function void glDrawArraysIndirect ( GLenum mode, const void *indirect );
-
-    public static native void glDrawArraysIndirect(int mode, long indirect);
-
-    // C function glDrawElementsIndirect ( GLenum mode, GLenum type, const void *indirect );
-
-    public static native void glDrawElementsIndirect(int mode, int type, long indirect);
-
-    // C function void glFramebufferParameteri ( GLenum target, GLenum pname, GLint param )
-
-    public static native void glFramebufferParameteri(
-        int target,
-        int pname,
-        int param
-    );
-
-    // C function void glGetFramebufferParameteriv ( GLenum target, GLenum pname, GLint *params )
-
-    public static native void glGetFramebufferParameteriv(
-        int target,
-        int pname,
-        int[] params,
-        int offset
-    );
-
-    // C function void glGetFramebufferParameteriv ( GLenum target, GLenum pname, GLint *params )
-
-    public static native void glGetFramebufferParameteriv(
-        int target,
-        int pname,
-        java.nio.IntBuffer params
-    );
-
-    // C function void glGetProgramInterfaceiv ( GLuint program, GLenum programInterface, GLenum pname, GLint *params )
-
-    public static native void glGetProgramInterfaceiv(
-        int program,
-        int programInterface,
-        int pname,
-        int[] params,
-        int offset
-    );
-
-    // C function void glGetProgramInterfaceiv ( GLuint program, GLenum programInterface, GLenum pname, GLint *params )
-
-    public static native void glGetProgramInterfaceiv(
-        int program,
-        int programInterface,
-        int pname,
-        java.nio.IntBuffer params
-    );
-
-    // C function GLuint glGetProgramResourceIndex ( GLuint program, GLenum programInterface, const GLchar *name )
-
-    public static native int glGetProgramResourceIndex(
-        int program,
-        int programInterface,
-        String name
-    );
-
-    // C function void glGetProgramResourceName ( GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name )
-
-    public static native String glGetProgramResourceName(
-        int program,
-        int programInterface,
-        int index
-    );
-
-    // C function void glGetProgramResourceiv ( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params )
-
-    public static native void glGetProgramResourceiv(
-        int program,
-        int programInterface,
-        int index,
-        int propCount,
-        int[] props,
-        int propsOffset,
-        int bufSize,
-        int[] length,
-        int lengthOffset,
-        int[] params,
-        int paramsOffset
-    );
-
-    // C function void glGetProgramResourceiv ( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params )
-
-    public static native void glGetProgramResourceiv(
-        int program,
-        int programInterface,
-        int index,
-        int propCount,
-        java.nio.IntBuffer props,
-        int bufSize,
-        java.nio.IntBuffer length,
-        java.nio.IntBuffer params
-    );
-
-    // C function GLint glGetProgramResourceLocation ( GLuint program, GLenum programInterface, const GLchar *name )
-
-    public static native int glGetProgramResourceLocation(
-        int program,
-        int programInterface,
-        String name
-    );
-
-    // C function void glUseProgramStages ( GLuint pipeline, GLbitfield stages, GLuint program )
-
-    public static native void glUseProgramStages(
-        int pipeline,
-        int stages,
-        int program
-    );
-
-    // C function void glActiveShaderProgram ( GLuint pipeline, GLuint program )
-
-    public static native void glActiveShaderProgram(
-        int pipeline,
-        int program
-    );
-
-    // C function GLuint glCreateShaderProgramv ( GLenum type, GLsizei count, const GLchar *const *strings )
-
-    public static native int glCreateShaderProgramv(
-        int type,
-        String[] strings
-    );
-
-    // C function void glBindProgramPipeline ( GLuint pipeline )
-
-    public static native void glBindProgramPipeline(
-        int pipeline
-    );
-
-    // C function void glDeleteProgramPipelines ( GLsizei n, const GLuint *pipelines )
-
-    public static native void glDeleteProgramPipelines(
-        int n,
-        int[] pipelines,
-        int offset
-    );
-
-    // C function void glDeleteProgramPipelines ( GLsizei n, const GLuint *pipelines )
-
-    public static native void glDeleteProgramPipelines(
-        int n,
-        java.nio.IntBuffer pipelines
-    );
-
-    // C function void glGenProgramPipelines ( GLsizei n, GLuint *pipelines )
-
-    public static native void glGenProgramPipelines(
-        int n,
-        int[] pipelines,
-        int offset
-    );
-
-    // C function void glGenProgramPipelines ( GLsizei n, GLuint *pipelines )
-
-    public static native void glGenProgramPipelines(
-        int n,
-        java.nio.IntBuffer pipelines
-    );
-
-    // C function GLboolean glIsProgramPipeline ( GLuint pipeline )
-
-    public static native boolean glIsProgramPipeline(
-        int pipeline
-    );
-
-    // C function void glGetProgramPipelineiv ( GLuint pipeline, GLenum pname, GLint *params )
-
-    public static native void glGetProgramPipelineiv(
-        int pipeline,
-        int pname,
-        int[] params,
-        int offset
-    );
-
-    // C function void glGetProgramPipelineiv ( GLuint pipeline, GLenum pname, GLint *params )
-
-    public static native void glGetProgramPipelineiv(
-        int pipeline,
-        int pname,
-        java.nio.IntBuffer params
-    );
-
-    // C function void glProgramUniform1i ( GLuint program, GLint location, GLint v0 )
-
-    public static native void glProgramUniform1i(
-        int program,
-        int location,
-        int v0
-    );
-
-    // C function void glProgramUniform2i ( GLuint program, GLint location, GLint v0, GLint v1 )
-
-    public static native void glProgramUniform2i(
-        int program,
-        int location,
-        int v0,
-        int v1
-    );
-
-    // C function void glProgramUniform3i ( GLuint program, GLint location, GLint v0, GLint v1, GLint v2 )
-
-    public static native void glProgramUniform3i(
-        int program,
-        int location,
-        int v0,
-        int v1,
-        int v2
-    );
-
-    // C function void glProgramUniform4i ( GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3 )
-
-    public static native void glProgramUniform4i(
-        int program,
-        int location,
-        int v0,
-        int v1,
-        int v2,
-        int v3
-    );
-
-    // C function void glProgramUniform1ui ( GLuint program, GLint location, GLuint v0 )
-
-    public static native void glProgramUniform1ui(
-        int program,
-        int location,
-        int v0
-    );
-
-    // C function void glProgramUniform2ui ( GLuint program, GLint location, GLuint v0, GLuint v1 )
-
-    public static native void glProgramUniform2ui(
-        int program,
-        int location,
-        int v0,
-        int v1
-    );
-
-    // C function void glProgramUniform3ui ( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2 )
-
-    public static native void glProgramUniform3ui(
-        int program,
-        int location,
-        int v0,
-        int v1,
-        int v2
-    );
-
-    // C function void glProgramUniform4ui ( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 )
-
-    public static native void glProgramUniform4ui(
-        int program,
-        int location,
-        int v0,
-        int v1,
-        int v2,
-        int v3
-    );
-
-    // C function void glProgramUniform1f ( GLuint program, GLint location, GLfloat v0 )
-
-    public static native void glProgramUniform1f(
-        int program,
-        int location,
-        float v0
-    );
-
-    // C function void glProgramUniform2f ( GLuint program, GLint location, GLfloat v0, GLfloat v1 )
-
-    public static native void glProgramUniform2f(
-        int program,
-        int location,
-        float v0,
-        float v1
-    );
-
-    // C function void glProgramUniform3f ( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2 )
-
-    public static native void glProgramUniform3f(
-        int program,
-        int location,
-        float v0,
-        float v1,
-        float v2
-    );
-
-    // C function void glProgramUniform4f ( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 )
-
-    public static native void glProgramUniform4f(
-        int program,
-        int location,
-        float v0,
-        float v1,
-        float v2,
-        float v3
-    );
-
-    // C function void glProgramUniform1iv ( GLuint program, GLint location, GLsizei count, const GLint *value )
-
-    public static native void glProgramUniform1iv(
-        int program,
-        int location,
-        int count,
-        int[] value,
-        int offset
-    );
-
-    // C function void glProgramUniform1iv ( GLuint program, GLint location, GLsizei count, const GLint *value )
-
-    public static native void glProgramUniform1iv(
-        int program,
-        int location,
-        int count,
-        java.nio.IntBuffer value
-    );
-
-    // C function void glProgramUniform2iv ( GLuint program, GLint location, GLsizei count, const GLint *value )
-
-    public static native void glProgramUniform2iv(
-        int program,
-        int location,
-        int count,
-        int[] value,
-        int offset
-    );
-
-    // C function void glProgramUniform2iv ( GLuint program, GLint location, GLsizei count, const GLint *value )
-
-    public static native void glProgramUniform2iv(
-        int program,
-        int location,
-        int count,
-        java.nio.IntBuffer value
-    );
-
-    // C function void glProgramUniform3iv ( GLuint program, GLint location, GLsizei count, const GLint *value )
-
-    public static native void glProgramUniform3iv(
-        int program,
-        int location,
-        int count,
-        int[] value,
-        int offset
-    );
-
-    // C function void glProgramUniform3iv ( GLuint program, GLint location, GLsizei count, const GLint *value )
-
-    public static native void glProgramUniform3iv(
-        int program,
-        int location,
-        int count,
-        java.nio.IntBuffer value
-    );
-
-    // C function void glProgramUniform4iv ( GLuint program, GLint location, GLsizei count, const GLint *value )
-
-    public static native void glProgramUniform4iv(
-        int program,
-        int location,
-        int count,
-        int[] value,
-        int offset
-    );
-
-    // C function void glProgramUniform4iv ( GLuint program, GLint location, GLsizei count, const GLint *value )
-
-    public static native void glProgramUniform4iv(
-        int program,
-        int location,
-        int count,
-        java.nio.IntBuffer value
-    );
-
-    // C function void glProgramUniform1uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value )
-
-    public static native void glProgramUniform1uiv(
-        int program,
-        int location,
-        int count,
-        int[] value,
-        int offset
-    );
-
-    // C function void glProgramUniform1uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value )
-
-    public static native void glProgramUniform1uiv(
-        int program,
-        int location,
-        int count,
-        java.nio.IntBuffer value
-    );
-
-    // C function void glProgramUniform2uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value )
-
-    public static native void glProgramUniform2uiv(
-        int program,
-        int location,
-        int count,
-        int[] value,
-        int offset
-    );
-
-    // C function void glProgramUniform2uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value )
-
-    public static native void glProgramUniform2uiv(
-        int program,
-        int location,
-        int count,
-        java.nio.IntBuffer value
-    );
-
-    // C function void glProgramUniform3uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value )
-
-    public static native void glProgramUniform3uiv(
-        int program,
-        int location,
-        int count,
-        int[] value,
-        int offset
-    );
-
-    // C function void glProgramUniform3uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value )
-
-    public static native void glProgramUniform3uiv(
-        int program,
-        int location,
-        int count,
-        java.nio.IntBuffer value
-    );
-
-    // C function void glProgramUniform4uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value )
-
-    public static native void glProgramUniform4uiv(
-        int program,
-        int location,
-        int count,
-        int[] value,
-        int offset
-    );
-
-    // C function void glProgramUniform4uiv ( GLuint program, GLint location, GLsizei count, const GLuint *value )
-
-    public static native void glProgramUniform4uiv(
-        int program,
-        int location,
-        int count,
-        java.nio.IntBuffer value
-    );
-
-    // C function void glProgramUniform1fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value )
-
-    public static native void glProgramUniform1fv(
-        int program,
-        int location,
-        int count,
-        float[] value,
-        int offset
-    );
-
-    // C function void glProgramUniform1fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value )
-
-    public static native void glProgramUniform1fv(
-        int program,
-        int location,
-        int count,
-        java.nio.FloatBuffer value
-    );
-
-    // C function void glProgramUniform2fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value )
-
-    public static native void glProgramUniform2fv(
-        int program,
-        int location,
-        int count,
-        float[] value,
-        int offset
-    );
-
-    // C function void glProgramUniform2fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value )
-
-    public static native void glProgramUniform2fv(
-        int program,
-        int location,
-        int count,
-        java.nio.FloatBuffer value
-    );
-
-    // C function void glProgramUniform3fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value )
-
-    public static native void glProgramUniform3fv(
-        int program,
-        int location,
-        int count,
-        float[] value,
-        int offset
-    );
-
-    // C function void glProgramUniform3fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value )
-
-    public static native void glProgramUniform3fv(
-        int program,
-        int location,
-        int count,
-        java.nio.FloatBuffer value
-    );
-
-    // C function void glProgramUniform4fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value )
-
-    public static native void glProgramUniform4fv(
-        int program,
-        int location,
-        int count,
-        float[] value,
-        int offset
-    );
-
-    // C function void glProgramUniform4fv ( GLuint program, GLint location, GLsizei count, const GLfloat *value )
-
-    public static native void glProgramUniform4fv(
-        int program,
-        int location,
-        int count,
-        java.nio.FloatBuffer value
-    );
-
-    // C function void glProgramUniformMatrix2fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix2fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        float[] value,
-        int offset
-    );
-
-    // C function void glProgramUniformMatrix2fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix2fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        java.nio.FloatBuffer value
-    );
-
-    // C function void glProgramUniformMatrix3fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix3fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        float[] value,
-        int offset
-    );
-
-    // C function void glProgramUniformMatrix3fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix3fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        java.nio.FloatBuffer value
-    );
-
-    // C function void glProgramUniformMatrix4fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix4fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        float[] value,
-        int offset
-    );
-
-    // C function void glProgramUniformMatrix4fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix4fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        java.nio.FloatBuffer value
-    );
-
-    // C function void glProgramUniformMatrix2x3fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix2x3fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        float[] value,
-        int offset
-    );
-
-    // C function void glProgramUniformMatrix2x3fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix2x3fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        java.nio.FloatBuffer value
-    );
-
-    // C function void glProgramUniformMatrix3x2fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix3x2fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        float[] value,
-        int offset
-    );
-
-    // C function void glProgramUniformMatrix3x2fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix3x2fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        java.nio.FloatBuffer value
-    );
-
-    // C function void glProgramUniformMatrix2x4fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix2x4fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        float[] value,
-        int offset
-    );
-
-    // C function void glProgramUniformMatrix2x4fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix2x4fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        java.nio.FloatBuffer value
-    );
-
-    // C function void glProgramUniformMatrix4x2fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix4x2fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        float[] value,
-        int offset
-    );
-
-    // C function void glProgramUniformMatrix4x2fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix4x2fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        java.nio.FloatBuffer value
-    );
-
-    // C function void glProgramUniformMatrix3x4fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix3x4fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        float[] value,
-        int offset
-    );
-
-    // C function void glProgramUniformMatrix3x4fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix3x4fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        java.nio.FloatBuffer value
-    );
-
-    // C function void glProgramUniformMatrix4x3fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix4x3fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        float[] value,
-        int offset
-    );
-
-    // C function void glProgramUniformMatrix4x3fv ( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value )
-
-    public static native void glProgramUniformMatrix4x3fv(
-        int program,
-        int location,
-        int count,
-        boolean transpose,
-        java.nio.FloatBuffer value
-    );
-
-    // C function void glValidateProgramPipeline ( GLuint pipeline )
-
-    public static native void glValidateProgramPipeline(
-        int pipeline
-    );
-
-    // C function void glGetProgramPipelineInfoLog( GLuint program, GLsizei maxLength, GLsizei * length, GLchar * infoLog);
-
-    public static native String glGetProgramPipelineInfoLog(
-        int program
-    );
-
-    // C function void glBindImageTexture ( GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format )
-
-    public static native void glBindImageTexture(
-        int unit,
-        int texture,
-        int level,
-        boolean layered,
-        int layer,
-        int access,
-        int format
-    );
-
-    // C function void glGetBooleani_v ( GLenum target, GLuint index, GLboolean *data )
-
-    public static native void glGetBooleani_v(
-        int target,
-        int index,
-        boolean[] data,
-        int offset
-    );
-
-    // C function void glGetBooleani_v ( GLenum target, GLuint index, GLboolean *data )
-
-    public static native void glGetBooleani_v(
-        int target,
-        int index,
-        java.nio.IntBuffer data
-    );
-
-    // C function void glMemoryBarrier ( GLbitfield barriers )
-
-    public static native void glMemoryBarrier(
-        int barriers
-    );
-
-    // C function void glMemoryBarrierByRegion ( GLbitfield barriers )
-
-    public static native void glMemoryBarrierByRegion(
-        int barriers
-    );
-
-    // C function void glTexStorage2DMultisample ( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations )
-
-    public static native void glTexStorage2DMultisample(
-        int target,
-        int samples,
-        int internalformat,
-        int width,
-        int height,
-        boolean fixedsamplelocations
-    );
-
-    // C function void glGetMultisamplefv ( GLenum pname, GLuint index, GLfloat *val )
-
-    public static native void glGetMultisamplefv(
-        int pname,
-        int index,
-        float[] val,
-        int offset
-    );
-
-    // C function void glGetMultisamplefv ( GLenum pname, GLuint index, GLfloat *val )
-
-    public static native void glGetMultisamplefv(
-        int pname,
-        int index,
-        java.nio.FloatBuffer val
-    );
-
-    // C function void glSampleMaski ( GLuint maskNumber, GLbitfield mask )
-
-    public static native void glSampleMaski(
-        int maskNumber,
-        int mask
-    );
-
-    // C function void glGetTexLevelParameteriv ( GLenum target, GLint level, GLenum pname, GLint *params )
-
-    public static native void glGetTexLevelParameteriv(
-        int target,
-        int level,
-        int pname,
-        int[] params,
-        int offset
-    );
-
-    // C function void glGetTexLevelParameteriv ( GLenum target, GLint level, GLenum pname, GLint *params )
-
-    public static native void glGetTexLevelParameteriv(
-        int target,
-        int level,
-        int pname,
-        java.nio.IntBuffer params
-    );
-
-    // C function void glGetTexLevelParameterfv ( GLenum target, GLint level, GLenum pname, GLfloat *params )
-
-    public static native void glGetTexLevelParameterfv(
-        int target,
-        int level,
-        int pname,
-        float[] params,
-        int offset
-    );
-
-    // C function void glGetTexLevelParameterfv ( GLenum target, GLint level, GLenum pname, GLfloat *params )
-
-    public static native void glGetTexLevelParameterfv(
-        int target,
-        int level,
-        int pname,
-        java.nio.FloatBuffer params
-    );
-
-    // C function void glBindVertexBuffer ( GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride )
-
-    public static native void glBindVertexBuffer(
-        int bindingindex,
-        int buffer,
-        long offset,
-        int stride
-    );
-
-    // C function void glVertexAttribFormat ( GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset )
-
-    public static native void glVertexAttribFormat(
-        int attribindex,
-        int size,
-        int type,
-        boolean normalized,
-        int relativeoffset
-    );
-
-    // C function void glVertexAttribIFormat ( GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset )
-
-    public static native void glVertexAttribIFormat(
-        int attribindex,
-        int size,
-        int type,
-        int relativeoffset
-    );
-
-    // C function void glVertexAttribBinding ( GLuint attribindex, GLuint bindingindex )
-
-    public static native void glVertexAttribBinding(
-        int attribindex,
-        int bindingindex
-    );
-
-    // C function void glVertexBindingDivisor ( GLuint bindingindex, GLuint divisor )
-
-    public static native void glVertexBindingDivisor(
-        int bindingindex,
-        int divisor
-    );
-
-}
diff --git a/opengl/java/android/opengl/GLES31Ext.java b/opengl/java/android/opengl/GLES31Ext.java
deleted file mode 100644
index af34cf0fd8ae6..0000000000000
--- a/opengl/java/android/opengl/GLES31Ext.java
+++ /dev/null
@@ -1,679 +0,0 @@
-/*
- * Copyright 2014 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-// This source file is automatically generated
-
-package android.opengl;
-
-/** @hide */
-public class GLES31Ext {
-
-    // GL_KHR_blend_equation_advanced
-    public static final int GL_BLEND_ADVANCED_COHERENT_KHR                          = 0x9285;
-    public static final int GL_MULTIPLY_KHR                                         = 0x9294;
-    public static final int GL_SCREEN_KHR                                           = 0x9295;
-    public static final int GL_OVERLAY_KHR                                          = 0x9296;
-    public static final int GL_DARKEN_KHR                                           = 0x9297;
-    public static final int GL_LIGHTEN_KHR                                          = 0x9298;
-    public static final int GL_COLORDODGE_KHR                                       = 0x9299;
-    public static final int GL_COLORBURN_KHR                                        = 0x929A;
-    public static final int GL_HARDLIGHT_KHR                                        = 0x929B;
-    public static final int GL_SOFTLIGHT_KHR                                        = 0x929C;
-    public static final int GL_DIFFERENCE_KHR                                       = 0x929E;
-    public static final int GL_EXCLUSION_KHR                                        = 0x92A0;
-    public static final int GL_HSL_HUE_KHR                                          = 0x92AD;
-    public static final int GL_HSL_SATURATION_KHR                                   = 0x92AE;
-    public static final int GL_HSL_COLOR_KHR                                        = 0x92AF;
-    public static final int GL_HSL_LUMINOSITY_KHR                                   = 0x92B0;
-
-    // GL_KHR_debug
-    public static final int GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR                         = 0x8242;
-    public static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR                 = 0x8243;
-    public static final int GL_DEBUG_CALLBACK_FUNCTION_KHR                          = 0x8244;
-    public static final int GL_DEBUG_CALLBACK_USER_PARAM_KHR                        = 0x8245;
-    public static final int GL_DEBUG_SOURCE_API_KHR                                 = 0x8246;
-    public static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR                       = 0x8247;
-    public static final int GL_DEBUG_SOURCE_SHADER_COMPILER_KHR                     = 0x8248;
-    public static final int GL_DEBUG_SOURCE_THIRD_PARTY_KHR                         = 0x8249;
-    public static final int GL_DEBUG_SOURCE_APPLICATION_KHR                         = 0x824A;
-    public static final int GL_DEBUG_SOURCE_OTHER_KHR                               = 0x824B;
-    public static final int GL_DEBUG_TYPE_ERROR_KHR                                 = 0x824C;
-    public static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR                   = 0x824D;
-    public static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR                    = 0x824E;
-    public static final int GL_DEBUG_TYPE_PORTABILITY_KHR                           = 0x824F;
-    public static final int GL_DEBUG_TYPE_PERFORMANCE_KHR                           = 0x8250;
-    public static final int GL_DEBUG_TYPE_OTHER_KHR                                 = 0x8251;
-    public static final int GL_DEBUG_TYPE_MARKER_KHR                                = 0x8268;
-    public static final int GL_DEBUG_TYPE_PUSH_GROUP_KHR                            = 0x8269;
-    public static final int GL_DEBUG_TYPE_POP_GROUP_KHR                             = 0x826A;
-    public static final int GL_DEBUG_SEVERITY_NOTIFICATION_KHR                      = 0x826B;
-    public static final int GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR                      = 0x826C;
-    public static final int GL_DEBUG_GROUP_STACK_DEPTH_KHR                          = 0x826D;
-    public static final int GL_BUFFER_KHR                                           = 0x82E0;
-    public static final int GL_SHADER_KHR                                           = 0x82E1;
-    public static final int GL_PROGRAM_KHR                                          = 0x82E2;
-    public static final int GL_VERTEX_ARRAY_KHR                                     = 0x8074;
-    public static final int GL_QUERY_KHR                                            = 0x82E3;
-    public static final int GL_SAMPLER_KHR                                          = 0x82E6;
-    public static final int GL_MAX_LABEL_LENGTH_KHR                                 = 0x82E8;
-    public static final int GL_MAX_DEBUG_MESSAGE_LENGTH_KHR                         = 0x9143;
-    public static final int GL_MAX_DEBUG_LOGGED_MESSAGES_KHR                        = 0x9144;
-    public static final int GL_DEBUG_LOGGED_MESSAGES_KHR                            = 0x9145;
-    public static final int GL_DEBUG_SEVERITY_HIGH_KHR                              = 0x9146;
-    public static final int GL_DEBUG_SEVERITY_MEDIUM_KHR                            = 0x9147;
-    public static final int GL_DEBUG_SEVERITY_LOW_KHR                               = 0x9148;
-    public static final int GL_DEBUG_OUTPUT_KHR                                     = 0x92E0;
-    public static final int GL_CONTEXT_FLAG_DEBUG_BIT_KHR                           = 0x00000002;
-    public static final int GL_STACK_OVERFLOW_KHR                                   = 0x0503;
-    public static final int GL_STACK_UNDERFLOW_KHR                                  = 0x0504;
-
-    // GL_KHR_texture_compression_astc_ldr
-    public static final int GL_COMPRESSED_RGBA_ASTC_4x4_KHR                         = 0x93B0;
-    public static final int GL_COMPRESSED_RGBA_ASTC_5x4_KHR                         = 0x93B1;
-    public static final int GL_COMPRESSED_RGBA_ASTC_5x5_KHR                         = 0x93B2;
-    public static final int GL_COMPRESSED_RGBA_ASTC_6x5_KHR                         = 0x93B3;
-    public static final int GL_COMPRESSED_RGBA_ASTC_6x6_KHR                         = 0x93B4;
-    public static final int GL_COMPRESSED_RGBA_ASTC_8x5_KHR                         = 0x93B5;
-    public static final int GL_COMPRESSED_RGBA_ASTC_8x6_KHR                         = 0x93B6;
-    public static final int GL_COMPRESSED_RGBA_ASTC_8x8_KHR                         = 0x93B7;
-    public static final int GL_COMPRESSED_RGBA_ASTC_10x5_KHR                        = 0x93B8;
-    public static final int GL_COMPRESSED_RGBA_ASTC_10x6_KHR                        = 0x93B9;
-    public static final int GL_COMPRESSED_RGBA_ASTC_10x8_KHR                        = 0x93BA;
-    public static final int GL_COMPRESSED_RGBA_ASTC_10x10_KHR                       = 0x93BB;
-    public static final int GL_COMPRESSED_RGBA_ASTC_12x10_KHR                       = 0x93BC;
-    public static final int GL_COMPRESSED_RGBA_ASTC_12x12_KHR                       = 0x93BD;
-    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR                 = 0x93D0;
-    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR                 = 0x93D1;
-    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR                 = 0x93D2;
-    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR                 = 0x93D3;
-    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR                 = 0x93D4;
-    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR                 = 0x93D5;
-    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR                 = 0x93D6;
-    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR                 = 0x93D7;
-    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR                = 0x93D8;
-    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR                = 0x93D9;
-    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR                = 0x93DA;
-    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR               = 0x93DB;
-    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR               = 0x93DC;
-    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR               = 0x93DD;
-
-    // GL_OES_sample_shading
-    public static final int GL_SAMPLE_SHADING_OES                                   = 0x8C36;
-    public static final int GL_MIN_SAMPLE_SHADING_VALUE_OES                         = 0x8C37;
-
-    // GL_OES_shader_multisample_interpolation
-    public static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES                = 0x8E5B;
-    public static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES                = 0x8E5C;
-    public static final int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES               = 0x8E5D;
-
-    // GL_OES_texture_stencil8
-    public static final int GL_STENCIL_INDEX_OES                                    = 0x1901;
-    public static final int GL_STENCIL_INDEX8_OES                                   = 0x8D48;
-
-    // GL_OES_texture_storage_multisample_2d_array
-    public static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES                     = 0x9102;
-    public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES             = 0x9105;
-    public static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES                     = 0x910B;
-    public static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES                 = 0x910C;
-    public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES        = 0x910D;
-
-    // GL_EXT_geometry_shader
-    public static final int GL_GEOMETRY_SHADER_EXT                                  = 0x8DD9;
-    public static final int GL_GEOMETRY_SHADER_BIT_EXT                              = 0x00000004;
-    public static final int GL_GEOMETRY_LINKED_VERTICES_OUT_EXT                     = 0x8916;
-    public static final int GL_GEOMETRY_LINKED_INPUT_TYPE_EXT                       = 0x8917;
-    public static final int GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT                      = 0x8918;
-    public static final int GL_GEOMETRY_SHADER_INVOCATIONS_EXT                      = 0x887F;
-    public static final int GL_LAYER_PROVOKING_VERTEX_EXT                           = 0x825E;
-    public static final int GL_LINES_ADJACENCY_EXT                                  = 0x000A;
-    public static final int GL_LINE_STRIP_ADJACENCY_EXT                             = 0x000B;
-    public static final int GL_TRIANGLES_ADJACENCY_EXT                              = 0x000C;
-    public static final int GL_TRIANGLE_STRIP_ADJACENCY_EXT                         = 0x000D;
-    public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT                  = 0x8DDF;
-    public static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT                      = 0x8A2C;
-    public static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT         = 0x8A32;
-    public static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT                    = 0x9123;
-    public static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT                   = 0x9124;
-    public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT                     = 0x8DE0;
-    public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT             = 0x8DE1;
-    public static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT                  = 0x8E5A;
-    public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT                 = 0x8C29;
-    public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT              = 0x92CF;
-    public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT                     = 0x92D5;
-    public static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT                      = 0x90CD;
-    public static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT               = 0x90D7;
-    public static final int GL_FIRST_VERTEX_CONVENTION_EXT                          = 0x8E4D;
-    public static final int GL_LAST_VERTEX_CONVENTION_EXT                           = 0x8E4E;
-    public static final int GL_UNDEFINED_VERTEX_EXT                                 = 0x8260;
-    public static final int GL_PRIMITIVES_GENERATED_EXT                             = 0x8C87;
-    public static final int GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT                       = 0x9312;
-    public static final int GL_MAX_FRAMEBUFFER_LAYERS_EXT                           = 0x9317;
-    public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT             = 0x8DA8;
-    public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT                   = 0x8DA7;
-    public static final int GL_REFERENCED_BY_GEOMETRY_SHADER_EXT                    = 0x9309;
-
-    // GL_EXT_primitive_bounding_box
-    public static final int GL_PRIMITIVE_BOUNDING_BOX_EXT                           = 0x92BE;
-
-    // GL_EXT_tessellation_shader
-    public static final int GL_PATCHES_EXT                                          = 0x000E;
-    public static final int GL_PATCH_VERTICES_EXT                                   = 0x8E72;
-    public static final int GL_TESS_CONTROL_OUTPUT_VERTICES_EXT                     = 0x8E75;
-    public static final int GL_TESS_GEN_MODE_EXT                                    = 0x8E76;
-    public static final int GL_TESS_GEN_SPACING_EXT                                 = 0x8E77;
-    public static final int GL_TESS_GEN_VERTEX_ORDER_EXT                            = 0x8E78;
-    public static final int GL_TESS_GEN_POINT_MODE_EXT                              = 0x8E79;
-    public static final int GL_ISOLINES_EXT                                         = 0x8E7A;
-    public static final int GL_QUADS_EXT                                            = 0x0007;
-    public static final int GL_FRACTIONAL_ODD_EXT                                   = 0x8E7B;
-    public static final int GL_FRACTIONAL_EVEN_EXT                                  = 0x8E7C;
-    public static final int GL_MAX_PATCH_VERTICES_EXT                               = 0x8E7D;
-    public static final int GL_MAX_TESS_GEN_LEVEL_EXT                               = 0x8E7E;
-    public static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT              = 0x8E7F;
-    public static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT           = 0x8E80;
-    public static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT             = 0x8E81;
-    public static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT          = 0x8E82;
-    public static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT               = 0x8E83;
-    public static final int GL_MAX_TESS_PATCH_COMPONENTS_EXT                        = 0x8E84;
-    public static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT         = 0x8E85;
-    public static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT            = 0x8E86;
-    public static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT                  = 0x8E89;
-    public static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT               = 0x8E8A;
-    public static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT                = 0x886C;
-    public static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT             = 0x886D;
-    public static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT     = 0x8E1E;
-    public static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT  = 0x8E1F;
-    public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT          = 0x92CD;
-    public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT       = 0x92CE;
-    public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT                 = 0x92D3;
-    public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT              = 0x92D4;
-    public static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT                  = 0x90CB;
-    public static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT               = 0x90CC;
-    public static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT           = 0x90D8;
-    public static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT        = 0x90D9;
-    public static final int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED              = 0x8221;
-    public static final int GL_IS_PER_PATCH_EXT                                     = 0x92E7;
-    public static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT                = 0x9307;
-    public static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT             = 0x9308;
-    public static final int GL_TESS_CONTROL_SHADER_EXT                              = 0x8E88;
-    public static final int GL_TESS_EVALUATION_SHADER_EXT                           = 0x8E87;
-    public static final int GL_TESS_CONTROL_SHADER_BIT_EXT                          = 0x00000008;
-    public static final int GL_TESS_EVALUATION_SHADER_BIT_EXT                       = 0x00000010;
-
-    // GL_EXT_texture_border_clamp
-    public static final int GL_TEXTURE_BORDER_COLOR_EXT                             = 0x1004;
-    public static final int GL_CLAMP_TO_BORDER_EXT                                  = 0x812D;
-
-    // GL_EXT_texture_buffer
-    public static final int GL_TEXTURE_BUFFER_EXT                                   = 0x8C2A;
-    public static final int GL_TEXTURE_BUFFER_BINDING_EXT                           = 0x8C2A;
-    public static final int GL_MAX_TEXTURE_BUFFER_SIZE_EXT                          = 0x8C2B;
-    public static final int GL_TEXTURE_BINDING_BUFFER_EXT                           = 0x8C2C;
-    public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT                = 0x8C2D;
-    public static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT                  = 0x919F;
-    public static final int GL_SAMPLER_BUFFER_EXT                                   = 0x8DC2;
-    public static final int GL_INT_SAMPLER_BUFFER_EXT                               = 0x8DD0;
-    public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT                      = 0x8DD8;
-    public static final int GL_IMAGE_BUFFER_EXT                                     = 0x9051;
-    public static final int GL_INT_IMAGE_BUFFER_EXT                                 = 0x905C;
-    public static final int GL_UNSIGNED_INT_IMAGE_BUFFER_EXT                        = 0x9067;
-    public static final int GL_TEXTURE_BUFFER_OFFSET_EXT                            = 0x919D;
-    public static final int GL_TEXTURE_BUFFER_SIZE_EXT                              = 0x919E;
-
-    // GL_EXT_texture_cube_map_array
-    public static final int GL_TEXTURE_CUBE_MAP_ARRAY_EXT                           = 0x9009;
-    public static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT                   = 0x900A;
-    public static final int GL_SAMPLER_CUBE_MAP_ARRAY_EXT                           = 0x900C;
-    public static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT                    = 0x900D;
-    public static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT                       = 0x900E;
-    public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT              = 0x900F;
-    public static final int GL_IMAGE_CUBE_MAP_ARRAY_EXT                             = 0x9054;
-    public static final int GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT                         = 0x905F;
-    public static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT                = 0x906A;
-
-    // GL_EXT_texture_sRGB_decode
-    public static final int GL_TEXTURE_SRGB_DECODE_EXT                              = 0x8A48;
-    public static final int GL_DECODE_EXT                                           = 0x8A49;
-    public static final int GL_SKIP_DECODE_EXT                                      = 0x8A4A;
-
-    native private static void _nativeClassInit();
-    static {
-        _nativeClassInit();
-    }
-
-    private GLES31Ext() {}
-    // C function void glBlendBarrierKHR ( void )
-
-    public static native void glBlendBarrierKHR(
-    );
-
-    // C function void glDebugMessageControlKHR ( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled )
-
-    public static native void glDebugMessageControlKHR(
-        int source,
-        int type,
-        int severity,
-        int count,
-        int[] ids,
-        int offset,
-        boolean enabled
-    );
-
-    // C function void glDebugMessageControlKHR ( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled )
-
-    public static native void glDebugMessageControlKHR(
-        int source,
-        int type,
-        int severity,
-        int count,
-        java.nio.IntBuffer ids,
-        boolean enabled
-    );
-
-    // C function void glDebugMessageInsertKHR ( GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf )
-
-    public static native void glDebugMessageInsertKHR(
-        int source,
-        int type,
-        int id,
-        int severity,
-        String buf
-    );
-
-    // C function void glDebugMessageCallbackKHR ( GLDEBUGPROCKHR callback, const void *userParam )
-
-    public interface DebugProcKHR {
-        void onMessage(int source, int type, int id, int severity, String message);
-    }
-
-    public static native void glDebugMessageCallbackKHR(DebugProcKHR callback);
-
-    // C function GLuint glGetDebugMessageLogKHR ( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog )
-
-    public static native int glGetDebugMessageLogKHR(
-        int count,
-        int bufSize,
-        int[] sources,
-        int sourcesOffset,
-        int[] types,
-        int typesOffset,
-        int[] ids,
-        int idsOffset,
-        int[] severities,
-        int severitiesOffset,
-        int[] lengths,
-        int lengthsOffset,
-        byte[] messageLog,
-        int messageLogOffset);
-
-    // C function GLuint glGetDebugMessageLogKHR ( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog )
-
-    public static native int glGetDebugMessageLogKHR(
-        int count,
-        java.nio.IntBuffer sources,
-        java.nio.IntBuffer types,
-        java.nio.IntBuffer ids,
-        java.nio.IntBuffer severities,
-        java.nio.IntBuffer lengths,
-        java.nio.ByteBuffer messageLog);
-
-    // C function GLuint glGetDebugMessageLogKHR ( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog )
-
-    public static native String[] glGetDebugMessageLogKHR(
-        int count,
-        int[] sources,
-        int sourcesOffset,
-        int[] types,
-        int typesOffset,
-        int[] ids,
-        int idsOffset,
-        int[] severities,
-        int severitiesOffset);
-
-    // C function GLuint glGetDebugMessageLogKHR ( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog )
-
-    public static native String[] glGetDebugMessageLogKHR(
-        int count,
-        java.nio.IntBuffer sources,
-        java.nio.IntBuffer types,
-        java.nio.IntBuffer ids,
-        java.nio.IntBuffer severities);
-
-    // C function void glPushDebugGroupKHR ( GLenum source, GLuint id, GLsizei length, const GLchar *message )
-
-    public static native void glPushDebugGroupKHR(
-        int source,
-        int id,
-        int length,
-        String message
-    );
-
-    // C function void glPopDebugGroupKHR ( void )
-
-    public static native void glPopDebugGroupKHR(
-    );
-
-    // C function void glObjectLabelKHR ( GLenum identifier, GLuint name, GLsizei length, const GLchar *label )
-
-    public static native void glObjectLabelKHR(
-        int identifier,
-        int name,
-        int length,
-        String label
-    );
-
-    // C function void glGetObjectLabelKHR ( GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label )
-
-    public static native String glGetObjectLabelKHR(int identifier, int name);
-
-    // C function void glObjectPtrLabelKHR ( const void *ptr, GLsizei length, const GLchar *label )
-
-    public static native void glObjectPtrLabelKHR(long ptr, String label);
-
-    // C function void glGetObjectPtrLabelKHR ( const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label )
-
-    public static native String glGetObjectPtrLabelKHR(long ptr);
-
-    // C function void glGetPointervKHR ( GLenum pname, void **params )
-
-    public static native DebugProcKHR glGetDebugMessageCallbackKHR();
-
-    // C function void glMinSampleShadingOES ( GLfloat value )
-
-    public static native void glMinSampleShadingOES(
-        float value
-    );
-
-    // C function void glTexStorage3DMultisampleOES ( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations )
-
-    public static native void glTexStorage3DMultisampleOES(
-        int target,
-        int samples,
-        int internalformat,
-        int width,
-        int height,
-        int depth,
-        boolean fixedsamplelocations
-    );
-
-    // C function void glCopyImageSubDataEXT ( GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth )
-
-    public static native void glCopyImageSubDataEXT(
-        int srcName,
-        int srcTarget,
-        int srcLevel,
-        int srcX,
-        int srcY,
-        int srcZ,
-        int dstName,
-        int dstTarget,
-        int dstLevel,
-        int dstX,
-        int dstY,
-        int dstZ,
-        int srcWidth,
-        int srcHeight,
-        int srcDepth
-    );
-
-    // C function void glEnableiEXT ( GLenum target, GLuint index )
-
-    public static native void glEnableiEXT(
-        int target,
-        int index
-    );
-
-    // C function void glDisableiEXT ( GLenum target, GLuint index )
-
-    public static native void glDisableiEXT(
-        int target,
-        int index
-    );
-
-    // C function void glBlendEquationiEXT ( GLuint buf, GLenum mode )
-
-    public static native void glBlendEquationiEXT(
-        int buf,
-        int mode
-    );
-
-    // C function void glBlendEquationSeparateiEXT ( GLuint buf, GLenum modeRGB, GLenum modeAlpha )
-
-    public static native void glBlendEquationSeparateiEXT(
-        int buf,
-        int modeRGB,
-        int modeAlpha
-    );
-
-    // C function void glBlendFunciEXT ( GLuint buf, GLenum src, GLenum dst )
-
-    public static native void glBlendFunciEXT(
-        int buf,
-        int src,
-        int dst
-    );
-
-    // C function void glBlendFuncSeparateiEXT ( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha )
-
-    public static native void glBlendFuncSeparateiEXT(
-        int buf,
-        int srcRGB,
-        int dstRGB,
-        int srcAlpha,
-        int dstAlpha
-    );
-
-    // C function void glColorMaskiEXT ( GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a )
-
-    public static native void glColorMaskiEXT(
-        int index,
-        boolean r,
-        boolean g,
-        boolean b,
-        boolean a
-    );
-
-    // C function GLboolean glIsEnablediEXT ( GLenum target, GLuint index )
-
-    public static native boolean glIsEnablediEXT(
-        int target,
-        int index
-    );
-
-    // C function void glFramebufferTextureEXT ( GLenum target, GLenum attachment, GLuint texture, GLint level )
-
-    public static native void glFramebufferTextureEXT(
-        int target,
-        int attachment,
-        int texture,
-        int level
-    );
-
-    // C function void glPrimitiveBoundingBoxEXT ( GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW )
-
-    public static native void glPrimitiveBoundingBoxEXT(
-        float minX,
-        float minY,
-        float minZ,
-        float minW,
-        float maxX,
-        float maxY,
-        float maxZ,
-        float maxW
-    );
-
-    // C function void glPatchParameteriEXT ( GLenum pname, GLint value )
-
-    public static native void glPatchParameteriEXT(
-        int pname,
-        int value
-    );
-
-    // C function void glTexParameterIivEXT ( GLenum target, GLenum pname, const GLint *params )
-
-    public static native void glTexParameterIivEXT(
-        int target,
-        int pname,
-        int[] params,
-        int offset
-    );
-
-    // C function void glTexParameterIivEXT ( GLenum target, GLenum pname, const GLint *params )
-
-    public static native void glTexParameterIivEXT(
-        int target,
-        int pname,
-        java.nio.IntBuffer params
-    );
-
-    // C function void glTexParameterIuivEXT ( GLenum target, GLenum pname, const GLuint *params )
-
-    public static native void glTexParameterIuivEXT(
-        int target,
-        int pname,
-        int[] params,
-        int offset
-    );
-
-    // C function void glTexParameterIuivEXT ( GLenum target, GLenum pname, const GLuint *params )
-
-    public static native void glTexParameterIuivEXT(
-        int target,
-        int pname,
-        java.nio.IntBuffer params
-    );
-
-    // C function void glGetTexParameterIivEXT ( GLenum target, GLenum pname, GLint *params )
-
-    public static native void glGetTexParameterIivEXT(
-        int target,
-        int pname,
-        int[] params,
-        int offset
-    );
-
-    // C function void glGetTexParameterIivEXT ( GLenum target, GLenum pname, GLint *params )
-
-    public static native void glGetTexParameterIivEXT(
-        int target,
-        int pname,
-        java.nio.IntBuffer params
-    );
-
-    // C function void glGetTexParameterIuivEXT ( GLenum target, GLenum pname, GLuint *params )
-
-    public static native void glGetTexParameterIuivEXT(
-        int target,
-        int pname,
-        int[] params,
-        int offset
-    );
-
-    // C function void glGetTexParameterIuivEXT ( GLenum target, GLenum pname, GLuint *params )
-
-    public static native void glGetTexParameterIuivEXT(
-        int target,
-        int pname,
-        java.nio.IntBuffer params
-    );
-
-    // C function void glSamplerParameterIivEXT ( GLuint sampler, GLenum pname, const GLint *param )
-
-    public static native void glSamplerParameterIivEXT(
-        int sampler,
-        int pname,
-        int[] param,
-        int offset
-    );
-
-    // C function void glSamplerParameterIivEXT ( GLuint sampler, GLenum pname, const GLint *param )
-
-    public static native void glSamplerParameterIivEXT(
-        int sampler,
-        int pname,
-        java.nio.IntBuffer param
-    );
-
-    // C function void glSamplerParameterIuivEXT ( GLuint sampler, GLenum pname, const GLuint *param )
-
-    public static native void glSamplerParameterIuivEXT(
-        int sampler,
-        int pname,
-        int[] param,
-        int offset
-    );
-
-    // C function void glSamplerParameterIuivEXT ( GLuint sampler, GLenum pname, const GLuint *param )
-
-    public static native void glSamplerParameterIuivEXT(
-        int sampler,
-        int pname,
-        java.nio.IntBuffer param
-    );
-
-    // C function void glGetSamplerParameterIivEXT ( GLuint sampler, GLenum pname, GLint *params )
-
-    public static native void glGetSamplerParameterIivEXT(
-        int sampler,
-        int pname,
-        int[] params,
-        int offset
-    );
-
-    // C function void glGetSamplerParameterIivEXT ( GLuint sampler, GLenum pname, GLint *params )
-
-    public static native void glGetSamplerParameterIivEXT(
-        int sampler,
-        int pname,
-        java.nio.IntBuffer params
-    );
-
-    // C function void glGetSamplerParameterIuivEXT ( GLuint sampler, GLenum pname, GLuint *params )
-
-    public static native void glGetSamplerParameterIuivEXT(
-        int sampler,
-        int pname,
-        int[] params,
-        int offset
-    );
-
-    // C function void glGetSamplerParameterIuivEXT ( GLuint sampler, GLenum pname, GLuint *params )
-
-    public static native void glGetSamplerParameterIuivEXT(
-        int sampler,
-        int pname,
-        java.nio.IntBuffer params
-    );
-
-    // C function void glTexBufferEXT ( GLenum target, GLenum internalformat, GLuint buffer )
-
-    public static native void glTexBufferEXT(
-        int target,
-        int internalformat,
-        int buffer
-    );
-
-    // C function void glTexBufferRangeEXT ( GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size )
-
-    public static native void glTexBufferRangeEXT(
-        int target,
-        int internalformat,
-        int buffer,
-        int offset,
-        int size
-    );
-
-}

From 542e9d38aa9e80e067f1533be7fce82850298e5c Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Wed, 27 May 2015 23:26:40 +0200
Subject: [PATCH 04/12] Remove PerfMeasurement

Former-commit-id: ec158d72391a3a2d7aab48c622232e33e2c26d32
---
 .../camera2/legacy/PerfMeasurement.java       | 309 ----------------
 .../legacy/SurfaceTextureRenderer.java        |  82 -----
 core/jni/Android.mk                           |   1 -
 core/jni/AndroidRuntime.cpp                   |   2 -
 ...ardware_camera2_legacy_PerfMeasurement.cpp | 335 ------------------
 5 files changed, 729 deletions(-)
 delete mode 100644 core/java/android/hardware/camera2/legacy/PerfMeasurement.java
 delete mode 100644 core/jni/android_hardware_camera2_legacy_PerfMeasurement.cpp

diff --git a/core/java/android/hardware/camera2/legacy/PerfMeasurement.java b/core/java/android/hardware/camera2/legacy/PerfMeasurement.java
deleted file mode 100644
index b930ec26f02e0..0000000000000
--- a/core/java/android/hardware/camera2/legacy/PerfMeasurement.java
+++ /dev/null
@@ -1,309 +0,0 @@
-/*
- * Copyright (C) 2014 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package android.hardware.camera2.legacy;
-
-import android.os.SystemClock;
-import android.util.Log;
-
-import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.LinkedList;
-import java.util.Queue;
-
-/**
- * GPU and CPU performance measurement for the legacy implementation.
- *
- * <p>Measures CPU and GPU processing duration for a set of operations, and dumps
- * the results into a file.</p>
- *
- * <p>Rough usage:
- * <pre>
- * {@code
- *   <set up workload>
- *   <start long-running workload>
- *   mPerfMeasurement.startTimer();
- *   ...render a frame...
- *   mPerfMeasurement.stopTimer();
- *   <end workload>
- *   mPerfMeasurement.dumpPerformanceData("/sdcard/my_data.txt");
- * }
- * </pre>
- * </p>
- *
- * <p>All calls to this object must be made within the same thread, and the same GL context.
- * PerfMeasurement cannot be used outside of a GL context.  The only exception is
- * dumpPerformanceData, which can be called outside of a valid GL context.</p>
- */
-class PerfMeasurement {
-    private static final String TAG = "PerfMeasurement";
-
-    public static final int DEFAULT_MAX_QUERIES = 3;
-
-    private final long mNativeContext;
-
-    private int mCompletedQueryCount = 0;
-
-    /**
-     * Values for completed measurements
-     */
-    private ArrayList<Long> mCollectedGpuDurations = new ArrayList<>();
-    private ArrayList<Long> mCollectedCpuDurations = new ArrayList<>();
-    private ArrayList<Long> mCollectedTimestamps = new ArrayList<>();
-
-    /**
-     * Values for in-progress measurements (waiting for async GPU results)
-     */
-    private Queue<Long> mTimestampQueue = new LinkedList<>();
-    private Queue<Long> mCpuDurationsQueue = new LinkedList<>();
-
-    private long mStartTimeNs;
-
-    /**
-     * The value returned by {@link #nativeGetNextGlDuration} if no new timing
-     * measurement is available since the last call.
-     */
-    private static final long NO_DURATION_YET = -1l;
-
-    /**
-     * The value returned by {@link #nativeGetNextGlDuration} if timing failed for
-     * the next timing interval
-     */
-    private static final long FAILED_TIMING = -2l;
-
-    /**
-     * Create a performance measurement object with a maximum of {@value #DEFAULT_MAX_QUERIES}
-     * in-progess queries.
-     */
-    public PerfMeasurement() {
-        mNativeContext = nativeCreateContext(DEFAULT_MAX_QUERIES);
-    }
-
-    /**
-     * Create a performance measurement object with maxQueries as the maximum number of
-     * in-progress queries.
-     *
-     * @param maxQueries maximum in-progress queries, must be larger than 0.
-     * @throws IllegalArgumentException if maxQueries is less than 1.
-     */
-    public PerfMeasurement(int maxQueries) {
-        if (maxQueries < 1) throw new IllegalArgumentException("maxQueries is less than 1");
-        mNativeContext = nativeCreateContext(maxQueries);
-    }
-
-    /**
-     * Returns true if the Gl timing methods will work, false otherwise.
-     *
-     * <p>Must be called within a valid GL context.</p>
-     */
-    public static boolean isGlTimingSupported() {
-        return nativeQuerySupport();
-    }
-
-    /**
-     * Dump collected data to file, and clear the stored data.
-     *
-     * <p>
-     * Format is a simple csv-like text file with a header,
-     * followed by a 3-column list of values in nanoseconds:
-     * <pre>
-     *   timestamp gpu_duration cpu_duration
-     *   <long> <long> <long>
-     *   <long> <long> <long>
-     *   <long> <long> <long>
-     *   ....
-     * </pre>
-     * </p>
-     */
-    public void dumpPerformanceData(String path) {
-        try (BufferedWriter dump = new BufferedWriter(new FileWriter(path))) {
-            dump.write("timestamp gpu_duration cpu_duration\n");
-            for (int i = 0; i < mCollectedGpuDurations.size(); i++) {
-                dump.write(String.format("%d %d %d\n",
-                                mCollectedTimestamps.get(i),
-                                mCollectedGpuDurations.get(i),
-                                mCollectedCpuDurations.get(i)));
-            }
-            mCollectedTimestamps.clear();
-            mCollectedGpuDurations.clear();
-            mCollectedCpuDurations.clear();
-        } catch (IOException e) {
-            Log.e(TAG, "Error writing data dump to " + path + ":" + e);
-        }
-    }
-
-    /**
-     * Start a GPU/CPU timing measurement.
-     *
-     * <p>Call before starting a rendering pass. Only one timing measurement can be active at once,
-     * so {@link #stopTimer} must be called before the next call to this method.</p>
-     *
-     * @throws IllegalStateException if the maximum number of queries are in progress already,
-     *                               or the method is called multiple times in a row, or there is
-     *                               a GPU error.
-     */
-    public void startTimer() {
-        nativeStartGlTimer(mNativeContext);
-        mStartTimeNs = SystemClock.elapsedRealtimeNanos();
-    }
-
-    /**
-     * Finish a GPU/CPU timing measurement.
-     *
-     * <p>Call after finishing all the drawing for a rendering pass. Only one timing measurement can
-     * be active at once, so {@link #startTimer} must be called before the next call to this
-     * method.</p>
-     *
-     * @throws IllegalStateException if no GL timer is currently started, or there is a GPU
-     *                               error.
-     */
-    public void stopTimer() {
-        // Complete CPU timing
-        long endTimeNs = SystemClock.elapsedRealtimeNanos();
-        mCpuDurationsQueue.add(endTimeNs - mStartTimeNs);
-        // Complete GL timing
-        nativeStopGlTimer(mNativeContext);
-
-        // Poll to see if GL timing results have arrived; if so
-        // store the results for a frame
-        long duration = getNextGlDuration();
-        if (duration > 0) {
-            mCollectedGpuDurations.add(duration);
-            mCollectedTimestamps.add(mTimestampQueue.isEmpty() ?
-                    NO_DURATION_YET : mTimestampQueue.poll());
-            mCollectedCpuDurations.add(mCpuDurationsQueue.isEmpty() ?
-                    NO_DURATION_YET : mCpuDurationsQueue.poll());
-        }
-        if (duration == FAILED_TIMING) {
-            // Discard timestamp and CPU measurement since GPU measurement failed
-            if (!mTimestampQueue.isEmpty()) {
-                mTimestampQueue.poll();
-            }
-            if (!mCpuDurationsQueue.isEmpty()) {
-                mCpuDurationsQueue.poll();
-            }
-        }
-    }
-
-    /**
-     * Add a timestamp to a timing measurement. These are queued up and matched to completed
-     * workload measurements as they become available.
-     */
-    public void addTimestamp(long timestamp) {
-        mTimestampQueue.add(timestamp);
-    }
-
-    /**
-     * Get the next available GPU timing measurement.
-     *
-     * <p>Since the GPU works asynchronously, the results of a single start/stopGlTimer measurement
-     * will only be available some time after the {@link #stopTimer} call is made. Poll this method
-     * until the result becomes available. If multiple start/endTimer measurements are made in a
-     * row, the results will be available in FIFO order.</p>
-     *
-     * @return The measured duration of the GPU workload for the next pending query, or
-     *         {@link #NO_DURATION_YET} if no queries are pending or the next pending query has not
-     *         yet finished, or {@link #FAILED_TIMING} if the GPU was unable to complete the
-     *         measurement.
-     *
-     * @throws IllegalStateException If there is a GPU error.
-     *
-     */
-    private long getNextGlDuration() {
-        long duration = nativeGetNextGlDuration(mNativeContext);
-        if (duration > 0) {
-            mCompletedQueryCount++;
-        }
-        return duration;
-    }
-
-    /**
-     * Returns the number of measurements so far that returned a valid duration
-     * measurement.
-     */
-    public int getCompletedQueryCount() {
-        return mCompletedQueryCount;
-    }
-
-    @Override
-    protected void finalize() {
-        nativeDeleteContext(mNativeContext);
-    }
-
-    /**
-     * Create a native performance measurement context.
-     *
-     * @param maxQueryCount maximum in-progress queries; must be >= 1.
-     */
-    private static native long nativeCreateContext(int maxQueryCount);
-
-    /**
-     * Delete the native context.
-     *
-     * <p>Not safe to call more than once.</p>
-     */
-    private static native void nativeDeleteContext(long contextHandle);
-
-    /**
-     * Query whether the relevant Gl extensions are available for Gl timing
-     */
-    private static native boolean nativeQuerySupport();
-
-    /**
-     * Start a GL timing section.
-     *
-     * <p>All GL commands between this method and the next {@link #nativeEndGlTimer} will be
-     * included in the timing.</p>
-     *
-     * <p>Must be called from the same thread as calls to {@link #nativeEndGlTimer} and
-     * {@link #nativeGetNextGlDuration}.</p>
-     *
-     * @throws IllegalStateException if a GL error occurs or start is called repeatedly.
-     */
-    protected static native void nativeStartGlTimer(long contextHandle);
-
-    /**
-     * Finish a GL timing section.
-     *
-     * <p>Some time after this call returns, the time the GPU took to
-     * execute all work submitted between the latest {@link #nativeStartGlTimer} and
-     * this call, will become available from calling {@link #nativeGetNextGlDuration}.</p>
-     *
-     * <p>Must be called from the same thread as calls to {@link #nativeStartGlTimer} and
-     * {@link #nativeGetNextGlDuration}.</p>
-     *
-     * @throws IllegalStateException if a GL error occurs or stop is called before start
-     */
-    protected static native void nativeStopGlTimer(long contextHandle);
-
-    /**
-     * Get the next available GL duration measurement, in nanoseconds.
-     *
-     * <p>Must be called from the same thread as calls to {@link #nativeStartGlTimer} and
-     * {@link #nativeEndGlTimer}.</p>
-     *
-     * @return the next GL duration measurement, or {@link #NO_DURATION_YET} if
-     *         no new measurement is available, or {@link #FAILED_TIMING} if timing
-     *         failed for the next duration measurement.
-     * @throws IllegalStateException if a GL error occurs
-     */
-    protected static native long nativeGetNextGlDuration(long contextHandle);
-
-
-}
diff --git a/core/java/android/hardware/camera2/legacy/SurfaceTextureRenderer.java b/core/java/android/hardware/camera2/legacy/SurfaceTextureRenderer.java
index 12d46936c31d5..c6f4f4d2b0bc0 100644
--- a/core/java/android/hardware/camera2/legacy/SurfaceTextureRenderer.java
+++ b/core/java/android/hardware/camera2/legacy/SurfaceTextureRenderer.java
@@ -171,9 +171,6 @@
     private int maPositionHandle;
     private int maTextureHandle;
 
-    private PerfMeasurement mPerfMeasurer = null;
-    private static final String LEGACY_PERF_PROPERTY = "persist.camera.legacy_perf";
-
     public SurfaceTextureRenderer(int facing) {
         mFacing = facing;
 
@@ -501,7 +498,6 @@ private void releaseEGLContext() {
         if (mEGLDisplay != EGL14.EGL_NO_DISPLAY) {
             EGL14.eglMakeCurrent(mEGLDisplay, EGL14.EGL_NO_SURFACE, EGL14.EGL_NO_SURFACE,
                     EGL14.EGL_NO_CONTEXT);
-            dumpGlTiming();
             if (mSurfaces != null) {
                 for (EGLSurfaceHolder holder : mSurfaces) {
                     if (holder.eglSurface != null) {
@@ -552,65 +548,6 @@ private void checkGlError(String msg) {
         }
     }
 
-    /**
-     * Save a measurement dump to disk, in
-     * {@code /sdcard/CameraLegacy/durations_<time>_<width1>x<height1>_...txt}
-     */
-    private void dumpGlTiming() {
-        if (mPerfMeasurer == null) return;
-
-        File legacyStorageDir = new File(Environment.getExternalStorageDirectory(), "CameraLegacy");
-        if (!legacyStorageDir.exists()){
-            if (!legacyStorageDir.mkdirs()){
-                Log.e(TAG, "Failed to create directory for data dump");
-                return;
-            }
-        }
-
-        StringBuilder path = new StringBuilder(legacyStorageDir.getPath());
-        path.append(File.separator);
-        path.append("durations_");
-
-        Time now = new Time();
-        now.setToNow();
-        path.append(now.format2445());
-        path.append("_S");
-        for (EGLSurfaceHolder surface : mSurfaces) {
-            path.append(String.format("_%d_%d", surface.width, surface.height));
-        }
-        path.append("_C");
-        for (EGLSurfaceHolder surface : mConversionSurfaces) {
-            path.append(String.format("_%d_%d", surface.width, surface.height));
-        }
-        path.append(".txt");
-        mPerfMeasurer.dumpPerformanceData(path.toString());
-    }
-
-    private void setupGlTiming() {
-        if (PerfMeasurement.isGlTimingSupported()) {
-            Log.d(TAG, "Enabling GL performance measurement");
-            mPerfMeasurer = new PerfMeasurement();
-        } else {
-            Log.d(TAG, "GL performance measurement not supported on this device");
-            mPerfMeasurer = null;
-        }
-    }
-
-    private void beginGlTiming() {
-        if (mPerfMeasurer == null) return;
-        mPerfMeasurer.startTimer();
-    }
-
-    private void addGlTimestamp(long timestamp) {
-        if (mPerfMeasurer == null) return;
-        mPerfMeasurer.addTimestamp(timestamp);
-    }
-
-    private void endGlTiming() {
-        if (mPerfMeasurer == null) return;
-        mPerfMeasurer.stopTimer();
-    }
-
     /**
      * Return the surface texture to draw to - this is the texture use to when producing output
      * surface buffers.
@@ -671,11 +608,6 @@ public void configureSurfaces(Collection<Pair<Surface, Size>> surfaces) {
                 mConversionSurfaces.get(0).eglSurface);
         initializeGLState();
         mSurfaceTexture = new SurfaceTexture(getTextureId());
-
-        // Set up performance tracking if enabled
-        if (SystemProperties.getBoolean(LEGACY_PERF_PROPERTY, false)) {
-            setupGlTiming();
-        }
     }
 
     /**
@@ -700,10 +632,6 @@ public void drawIntoSurfaces(CaptureCollector targetCollector) {
         boolean doTiming = targetCollector.hasPendingPreviewCaptures();
         checkGlError("before updateTexImage");
 
-        if (doTiming) {
-            beginGlTiming();
-        }
-
         mSurfaceTexture.updateTexImage();
 
         long timestamp = mSurfaceTexture.getTimestamp();
@@ -715,18 +643,12 @@ public void drawIntoSurfaces(CaptureCollector targetCollector) {
             if (DEBUG) {
                 Log.d(TAG, "Dropping preview frame.");
             }
-            if (doTiming) {
-                endGlTiming();
-            }
             return;
         }
 
         RequestHolder request = captureHolder.first;
 
         Collection<Surface> targetSurfaces = request.getHolderTargets();
-        if (doTiming) {
-            addGlTimestamp(timestamp);
-        }
 
         List<Long> targetSurfaceIds = LegacyCameraDevice.getSurfaceIds(targetSurfaces);
         for (EGLSurfaceHolder holder : mSurfaces) {
@@ -771,10 +693,6 @@ public void drawIntoSurfaces(CaptureCollector targetCollector) {
             }
         }
         targetCollector.previewProduced();
-
-        if (doTiming) {
-            endGlTiming();
-        }
     }
 
     /**
diff --git a/core/jni/Android.mk b/core/jni/Android.mk
index 8df73f25653f6..497f28bf7bd96 100644
--- a/core/jni/Android.mk
+++ b/core/jni/Android.mk
@@ -137,7 +137,6 @@ LOCAL_SRC_FILES:= \
 	android_hardware_Camera.cpp \
 	android_hardware_camera2_CameraMetadata.cpp \
 	android_hardware_camera2_legacy_LegacyCameraDevice.cpp \
-	android_hardware_camera2_legacy_PerfMeasurement.cpp \
 	android_hardware_camera2_DngCreator.cpp \
 	android_hardware_SensorManager.cpp \
 	android_hardware_SerialPort.cpp \
diff --git a/core/jni/AndroidRuntime.cpp b/core/jni/AndroidRuntime.cpp
index 1a4461cad34ea..2ccc46836fee3 100644
--- a/core/jni/AndroidRuntime.cpp
+++ b/core/jni/AndroidRuntime.cpp
@@ -77,7 +77,6 @@ extern int register_android_opengl_jni_GLES30(JNIEnv* env);
 extern int register_android_hardware_Camera(JNIEnv *env);
 extern int register_android_hardware_camera2_CameraMetadata(JNIEnv *env);
 extern int register_android_hardware_camera2_legacy_LegacyCameraDevice(JNIEnv *env);
-extern int register_android_hardware_camera2_legacy_PerfMeasurement(JNIEnv *env);
 extern int register_android_hardware_camera2_DngCreator(JNIEnv *env);
 extern int register_android_hardware_SensorManager(JNIEnv *env);
 extern int register_android_hardware_SerialPort(JNIEnv *env);
@@ -1340,7 +1339,6 @@ static const RegJNIRec gRegJNI[] = {
     REG_JNI(register_android_hardware_Camera),
     REG_JNI(register_android_hardware_camera2_CameraMetadata),
     REG_JNI(register_android_hardware_camera2_legacy_LegacyCameraDevice),
-    REG_JNI(register_android_hardware_camera2_legacy_PerfMeasurement),
     REG_JNI(register_android_hardware_camera2_DngCreator),
     REG_JNI(register_android_hardware_SensorManager),
     REG_JNI(register_android_hardware_SerialPort),
diff --git a/core/jni/android_hardware_camera2_legacy_PerfMeasurement.cpp b/core/jni/android_hardware_camera2_legacy_PerfMeasurement.cpp
deleted file mode 100644
index 93473a55ac241..0000000000000
--- a/core/jni/android_hardware_camera2_legacy_PerfMeasurement.cpp
+++ /dev/null
@@ -1,335 +0,0 @@
-/*
- * Copyright (C) 2014 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#define LOG_TAG "Camera2-Legacy-PerfMeasurement-JNI"
-#include <utils/Log.h>
-#include <utils/Errors.h>
-#include <utils/Trace.h>
-#include <utils/Vector.h>
-
-#include "jni.h"
-#include "JNIHelp.h"
-#include "android_runtime/AndroidRuntime.h"
-
-#include <ui/GraphicBuffer.h>
-#include <system/window.h>
-#include <GLES2/gl2.h>
-#include <GLES2/gl2ext.h>
-
-using namespace android;
-
-// fully-qualified class name
-#define PERF_MEASUREMENT_CLASS_NAME "android/hardware/camera2/legacy/PerfMeasurement"
-
-/** GL utility methods copied from com_google_android_gles_jni_GLImpl.cpp */
-
-// Check if the extension at the head of pExtensions is pExtension. Note that pExtensions is
-// terminated by either 0 or space, while pExtension is terminated by 0.
-
-static bool
-extensionEqual(const GLubyte* pExtensions, const GLubyte* pExtension) {
-    while (true) {
-        char a = *pExtensions++;
-        char b = *pExtension++;
-        bool aEnd = a == '\0' || a == ' ';
-        bool bEnd = b == '\0';
-        if (aEnd || bEnd) {
-            return aEnd == bEnd;
-        }
-        if (a != b) {
-            return false;
-        }
-    }
-}
-
-static const GLubyte*
-nextExtension(const GLubyte* pExtensions) {
-    while (true) {
-        char a = *pExtensions++;
-        if (a == '\0') {
-            return pExtensions-1;
-        } else if ( a == ' ') {
-            return pExtensions;
-        }
-    }
-}
-
-static bool
-checkForExtension(const GLubyte* pExtensions, const GLubyte* pExtension) {
-    for (; *pExtensions != '\0'; pExtensions = nextExtension(pExtensions)) {
-        if (extensionEqual(pExtensions, pExtension)) {
-            return true;
-        }
-    }
-    return false;
-}
-
-/** End copied GL utility methods */
-
-bool checkGlError(JNIEnv* env) {
-    int error;
-    if ((error = glGetError()) != GL_NO_ERROR) {
-        jniThrowExceptionFmt(env, "java/lang/IllegalStateException",
-                "GLES20 error: 0x%d", error);
-        return true;
-    }
-    return false;
-}
-
-/**
- * Asynchronous low-overhead GL performance measurement using
- * http://www.khronos.org/registry/gles/extensions/EXT/EXT_disjoint_timer_query.txt
- *
- * Measures the duration of GPU processing for a set of GL commands, delivering
- * the measurement asynchronously once processing completes.
- *
- * All calls must come from a single thread with a valid GL context active.
- **/
-class PerfMeasurementContext {
-  private:
-    Vector<GLuint> mTimingQueries;
-    size_t mTimingStartIndex;
-    size_t mTimingEndIndex;
-    size_t mTimingQueryIndex;
-    size_t mFreeQueries;
-
-    bool mInitDone;
-  public:
-
-    /**
-     * maxQueryCount should be a conservative estimate of how many query objects
-     * will be active at once, which is a function of the GPU's level of
-     * pipelining and the frequency of queries.
-     */
-    PerfMeasurementContext(size_t maxQueryCount):
-            mTimingStartIndex(0),
-            mTimingEndIndex(0),
-            mTimingQueryIndex(0) {
-        mTimingQueries.resize(maxQueryCount);
-        mFreeQueries = maxQueryCount;
-        mInitDone = false;
-    }
-
-    int getMaxQueryCount() {
-        return mTimingQueries.size();
-    }
-
-    /**
-     * Start a measurement period using the next available query object.
-     * Returns INVALID_OPERATION if called multiple times in a row,
-     * and BAD_VALUE if no more query objects are available.
-     */
-    int startGlTimer() {
-        // Lazy init of queries to avoid needing GL context during construction
-        if (!mInitDone) {
-            glGenQueriesEXT(mTimingQueries.size(), mTimingQueries.editArray());
-            mInitDone = true;
-        }
-
-        if (mTimingEndIndex != mTimingStartIndex) {
-            return INVALID_OPERATION;
-        }
-
-        if (mFreeQueries == 0) {
-            return BAD_VALUE;
-        }
-
-        glBeginQueryEXT(GL_TIME_ELAPSED_EXT, mTimingQueries[mTimingStartIndex]);
-
-        mTimingStartIndex = (mTimingStartIndex + 1) % mTimingQueries.size();
-        mFreeQueries--;
-
-        return OK;
-    }
-
-    /**
-     * Finish the current measurement period
-     * Returns INVALID_OPERATION if called before any startGLTimer calls
-     * or if called multiple times in a row.
-     */
-    int stopGlTimer() {
-        size_t nextEndIndex = (mTimingEndIndex + 1) % mTimingQueries.size();
-        if (nextEndIndex != mTimingStartIndex) {
-            return INVALID_OPERATION;
-        }
-        glEndQueryEXT(GL_TIME_ELAPSED_EXT);
-
-        mTimingEndIndex = nextEndIndex;
-
-        return OK;
-    }
-
-    static const nsecs_t NO_DURATION_YET = -1L;
-    static const nsecs_t FAILED_MEASUREMENT = -2L;
-
-    /**
-     * Get the next available duration measurement.
-     *
-     * Returns NO_DURATION_YET if no new measurement is available,
-     * and FAILED_MEASUREMENT if an error occurred during the next
-     * measurement period.
-     *
-     * Otherwise returns a positive number of nanoseconds measuring the
-     * duration of the oldest completed query.
-     */
-    nsecs_t getNextGlDuration() {
-        if (!mInitDone) {
-            // No start/stop called yet
-            return NO_DURATION_YET;
-        }
-
-        GLint available;
-        glGetQueryObjectivEXT(mTimingQueries[mTimingQueryIndex],
-                GL_QUERY_RESULT_AVAILABLE_EXT, &available);
-        if (!available) {
-            return NO_DURATION_YET;
-        }
-
-        GLint64 duration = FAILED_MEASUREMENT;
-        GLint disjointOccurred;
-        glGetIntegerv(GL_GPU_DISJOINT_EXT, &disjointOccurred);
-
-        if (!disjointOccurred) {
-            glGetQueryObjecti64vEXT(mTimingQueries[mTimingQueryIndex],
-                    GL_QUERY_RESULT_EXT,
-                    &duration);
-        }
-
-        mTimingQueryIndex = (mTimingQueryIndex + 1) % mTimingQueries.size();
-        mFreeQueries++;
-
-        return static_cast<nsecs_t>(duration);
-    }
-
-    static bool isMeasurementSupported() {
-        const GLubyte* extensions = glGetString(GL_EXTENSIONS);
-        return checkForExtension(extensions,
-                reinterpret_cast<const GLubyte*>("GL_EXT_disjoint_timer_query"));
-    }
-
-};
-
-PerfMeasurementContext* getContext(jlong context) {
-    return reinterpret_cast<PerfMeasurementContext*>(context);
-}
-
-extern "C" {
-
-static jlong PerfMeasurement_nativeCreateContext(JNIEnv* env, jobject thiz,
-        jint maxQueryCount) {
-    PerfMeasurementContext *context = new PerfMeasurementContext(maxQueryCount);
-    return reinterpret_cast<jlong>(context);
-}
-
-static void PerfMeasurement_nativeDeleteContext(JNIEnv* env, jobject thiz,
-        jlong contextHandle) {
-    PerfMeasurementContext *context = getContext(contextHandle);
-    delete(context);
-}
-
-static jboolean PerfMeasurement_nativeQuerySupport(JNIEnv* env, jobject thiz) {
-    bool supported = PerfMeasurementContext::isMeasurementSupported();
-    checkGlError(env);
-    return static_cast<jboolean>(supported);
-}
-
-static void PerfMeasurement_nativeStartGlTimer(JNIEnv* env, jobject thiz,
-        jlong contextHandle) {
-
-    PerfMeasurementContext *context = getContext(contextHandle);
-    status_t err = context->startGlTimer();
-    if (err != OK) {
-        switch (err) {
-            case INVALID_OPERATION:
-                jniThrowExceptionFmt(env, "java/lang/IllegalStateException",
-                        "Mismatched start/end GL timing calls");
-                return;
-            case BAD_VALUE:
-                jniThrowExceptionFmt(env, "java/lang/IllegalStateException",
-                        "Too many timing queries in progress, max %d",
-                        context->getMaxQueryCount());
-                return;
-            default:
-                jniThrowExceptionFmt(env, "java/lang/IllegalStateException",
-                        "Unknown error starting GL timing");
-                return;
-        }
-    }
-    checkGlError(env);
-}
-
-static void PerfMeasurement_nativeStopGlTimer(JNIEnv* env, jobject thiz,
-            jlong contextHandle) {
-
-    PerfMeasurementContext *context = getContext(contextHandle);
-    status_t err = context->stopGlTimer();
-    if (err != OK) {
-        switch (err) {
-            case INVALID_OPERATION:
-                jniThrowExceptionFmt(env, "java/lang/IllegalStateException",
-                        "Mismatched start/end GL timing calls");
-                return;
-            default:
-                jniThrowExceptionFmt(env, "java/lang/IllegalStateException",
-                        "Unknown error ending GL timing");
-                return;
-        }
-    }
-    checkGlError(env);
-}
-
-static jlong PerfMeasurement_nativeGetNextGlDuration(JNIEnv* env,
-        jobject thiz, jlong contextHandle) {
-    PerfMeasurementContext *context = getContext(contextHandle);
-    nsecs_t duration = context->getNextGlDuration();
-
-    checkGlError(env);
-    return static_cast<jlong>(duration);
-}
-
-} // extern "C"
-
-static JNINativeMethod gPerfMeasurementMethods[] = {
-    { "nativeCreateContext",
-      "(I)J",
-      (jlong *)PerfMeasurement_nativeCreateContext },
-    { "nativeDeleteContext",
-      "(J)V",
-      (void *)PerfMeasurement_nativeDeleteContext },
-    { "nativeQuerySupport",
-      "()Z",
-      (jboolean *)PerfMeasurement_nativeQuerySupport },
-    { "nativeStartGlTimer",
-      "(J)V",
-      (void *)PerfMeasurement_nativeStartGlTimer },
-    { "nativeStopGlTimer",
-      "(J)V",
-      (void *)PerfMeasurement_nativeStopGlTimer },
-    { "nativeGetNextGlDuration",
-      "(J)J",
-      (jlong *)PerfMeasurement_nativeGetNextGlDuration }
-};
-
-
-// Get all the required offsets in java class and register native functions
-int register_android_hardware_camera2_legacy_PerfMeasurement(JNIEnv* env)
-{
-    // Register native functions
-    return AndroidRuntime::registerNativeMethods(env,
-            PERF_MEASUREMENT_CLASS_NAME,
-            gPerfMeasurementMethods,
-            NELEM(gPerfMeasurementMethods));
-}

From f4e3cad82d8b2389d2a6cbc02f7c0f148adfbe5c Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Wed, 27 May 2015 23:27:36 +0200
Subject: [PATCH 05/12] hotfix for hwui crashing

Former-commit-id: 42f3efb1775a60f4ce4200ae0e3ee0db2e5fd384
---
 libs/hwui/Caches.cpp | 13 +++----------
 1 file changed, 3 insertions(+), 10 deletions(-)

diff --git a/libs/hwui/Caches.cpp b/libs/hwui/Caches.cpp
index 77b66f213712b..76abcd12b621e 100644
--- a/libs/hwui/Caches.cpp
+++ b/libs/hwui/Caches.cpp
@@ -117,16 +117,9 @@ void Caches::initFont() {
 }
 
 void Caches::initExtensions() {
-    if (mExtensions.hasDebugMarker()) {
-        eventMark = glInsertEventMarkerEXT;
-
-        startMark = glPushGroupMarkerEXT;
-        endMark = glPopGroupMarkerEXT;
-    } else {
-        eventMark = eventMarkNull;
-        startMark = startMarkNull;
-        endMark = endMarkNull;
-    }
+    eventMark = eventMarkNull;
+    startMark = startMarkNull;
+    endMark = endMarkNull;
 
     if (mExtensions.hasDebugLabel() && (drawDeferDisabled || drawReorderDisabled)) {
         setLabel = glLabelObjectEXT;

From 8fb4f02d744e7c17d8028e03e11678aac97b550a Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Sun, 20 Sep 2015 00:26:45 +0200
Subject: [PATCH 06/12] Block app starting from smart cover

Former-commit-id: ef4b86f4c15911bf6ab1f588c08a30a00c53ee04
---
 .../java/com/android/server/am/ActivityStackSupervisor.java   | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/services/core/java/com/android/server/am/ActivityStackSupervisor.java b/services/core/java/com/android/server/am/ActivityStackSupervisor.java
index 1aa243214df07..91200863eada4 100644
--- a/services/core/java/com/android/server/am/ActivityStackSupervisor.java
+++ b/services/core/java/com/android/server/am/ActivityStackSupervisor.java
@@ -1342,6 +1342,10 @@ final int startActivityLocked(IApplicationThread caller,
             }
         }
 
+	if (err == ActivityManager.START_SUCCESS && callingUid == 1000 && (intent.getComponent().flattenToShortString().contains("com.android.browser") || intent.getComponent().flattenToShortString().contains("com.android.email"))) {
+            err = ActivityManager.START_PERMISSION_DENIED;           
+	}
+
         if (err == ActivityManager.START_SUCCESS) {
             final int userId = aInfo != null ? UserHandle.getUserId(aInfo.applicationInfo.uid) : 0;
             Slog.i(TAG, "START u" + userId + " {" + intent.toShortString(true, true, true, false)

From 4e0764410a884acff56b7d7841a0d6df8be3ccdd Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Fri, 25 Sep 2015 21:49:30 +0200
Subject: [PATCH 07/12] Add fm radio value

Former-commit-id: 5f055dafee410f4f0b535e6bc360f21cd7661bee
---
 media/java/android/media/MediaRecorder.java | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/media/java/android/media/MediaRecorder.java b/media/java/android/media/MediaRecorder.java
index aafa07b03bc69..bea2ce806971c 100644
--- a/media/java/android/media/MediaRecorder.java
+++ b/media/java/android/media/MediaRecorder.java
@@ -234,6 +234,11 @@ private AudioSource() {}
          */
         public static final int FM_TUNER = 1998;
 
+        /**
+         * {@hide}
+         */
+        public static final int FM = 99;
+
         /**
          * Audio source for preemptible, low-priority software hotword detection
          * It presents the same gain and pre processing tuning as {@link #VOICE_RECOGNITION}.

From bc8f0129427e5d8c8eb6729049a96d624e5f42d3 Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Sat, 2 Jan 2016 17:22:01 +0100
Subject: [PATCH 08/12] Remove opengl 3.1 shit

---
 api/system-current.txt                    | 528 +---------------------
 docs/html/about/versions/android-5.0.jd   |  10 -
 docs/html/guide/topics/graphics/opengl.jd |   2 -
 3 files changed, 1 insertion(+), 539 deletions(-)

diff --git a/api/system-current.txt b/api/system-current.txt
index f4775611687f9..75b1ed317b9b6 100644
--- a/api/system-current.txt
+++ b/api/system-current.txt
@@ -22220,532 +22220,6 @@ package android.opengl {
     field public static final int GL_WAIT_FAILED = 37149; // 0x911d
   }
 
-  public class GLES31 extends android.opengl.GLES30 {
-    method public static void glActiveShaderProgram(int, int);
-    method public static void glBindImageTexture(int, int, int, boolean, int, int, int);
-    method public static void glBindProgramPipeline(int);
-    method public static void glBindVertexBuffer(int, int, long, int);
-    method public static int glCreateShaderProgramv(int, java.lang.String[]);
-    method public static void glDeleteProgramPipelines(int, int[], int);
-    method public static void glDeleteProgramPipelines(int, java.nio.IntBuffer);
-    method public static void glDispatchCompute(int, int, int);
-    method public static void glDispatchComputeIndirect(long);
-    method public static void glDrawArraysIndirect(int, long);
-    method public static void glDrawElementsIndirect(int, int, long);
-    method public static void glFramebufferParameteri(int, int, int);
-    method public static void glGenProgramPipelines(int, int[], int);
-    method public static void glGenProgramPipelines(int, java.nio.IntBuffer);
-    method public static void glGetBooleani_v(int, int, boolean[], int);
-    method public static void glGetBooleani_v(int, int, java.nio.IntBuffer);
-    method public static void glGetFramebufferParameteriv(int, int, int[], int);
-    method public static void glGetFramebufferParameteriv(int, int, java.nio.IntBuffer);
-    method public static void glGetMultisamplefv(int, int, float[], int);
-    method public static void glGetMultisamplefv(int, int, java.nio.FloatBuffer);
-    method public static void glGetProgramInterfaceiv(int, int, int, int[], int);
-    method public static void glGetProgramInterfaceiv(int, int, int, java.nio.IntBuffer);
-    method public static java.lang.String glGetProgramPipelineInfoLog(int);
-    method public static void glGetProgramPipelineiv(int, int, int[], int);
-    method public static void glGetProgramPipelineiv(int, int, java.nio.IntBuffer);
-    method public static int glGetProgramResourceIndex(int, int, java.lang.String);
-    method public static int glGetProgramResourceLocation(int, int, java.lang.String);
-    method public static java.lang.String glGetProgramResourceName(int, int, int);
-    method public static void glGetProgramResourceiv(int, int, int, int, int[], int, int, int[], int, int[], int);
-    method public static void glGetProgramResourceiv(int, int, int, int, java.nio.IntBuffer, int, java.nio.IntBuffer, java.nio.IntBuffer);
-    method public static void glGetTexLevelParameterfv(int, int, int, float[], int);
-    method public static void glGetTexLevelParameterfv(int, int, int, java.nio.FloatBuffer);
-    method public static void glGetTexLevelParameteriv(int, int, int, int[], int);
-    method public static void glGetTexLevelParameteriv(int, int, int, java.nio.IntBuffer);
-    method public static boolean glIsProgramPipeline(int);
-    method public static void glMemoryBarrier(int);
-    method public static void glMemoryBarrierByRegion(int);
-    method public static void glProgramUniform1f(int, int, float);
-    method public static void glProgramUniform1fv(int, int, int, float[], int);
-    method public static void glProgramUniform1fv(int, int, int, java.nio.FloatBuffer);
-    method public static void glProgramUniform1i(int, int, int);
-    method public static void glProgramUniform1iv(int, int, int, int[], int);
-    method public static void glProgramUniform1iv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniform1ui(int, int, int);
-    method public static void glProgramUniform1uiv(int, int, int, int[], int);
-    method public static void glProgramUniform1uiv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniform2f(int, int, float, float);
-    method public static void glProgramUniform2fv(int, int, int, float[], int);
-    method public static void glProgramUniform2fv(int, int, int, java.nio.FloatBuffer);
-    method public static void glProgramUniform2i(int, int, int, int);
-    method public static void glProgramUniform2iv(int, int, int, int[], int);
-    method public static void glProgramUniform2iv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniform2ui(int, int, int, int);
-    method public static void glProgramUniform2uiv(int, int, int, int[], int);
-    method public static void glProgramUniform2uiv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniform3f(int, int, float, float, float);
-    method public static void glProgramUniform3fv(int, int, int, float[], int);
-    method public static void glProgramUniform3fv(int, int, int, java.nio.FloatBuffer);
-    method public static void glProgramUniform3i(int, int, int, int, int);
-    method public static void glProgramUniform3iv(int, int, int, int[], int);
-    method public static void glProgramUniform3iv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniform3ui(int, int, int, int, int);
-    method public static void glProgramUniform3uiv(int, int, int, int[], int);
-    method public static void glProgramUniform3uiv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniform4f(int, int, float, float, float, float);
-    method public static void glProgramUniform4fv(int, int, int, float[], int);
-    method public static void glProgramUniform4fv(int, int, int, java.nio.FloatBuffer);
-    method public static void glProgramUniform4i(int, int, int, int, int, int);
-    method public static void glProgramUniform4iv(int, int, int, int[], int);
-    method public static void glProgramUniform4iv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniform4ui(int, int, int, int, int, int);
-    method public static void glProgramUniform4uiv(int, int, int, int[], int);
-    method public static void glProgramUniform4uiv(int, int, int, java.nio.IntBuffer);
-    method public static void glProgramUniformMatrix2fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix2fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix2x3fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix2x3fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix2x4fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix2x4fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix3fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix3fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix3x2fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix3x2fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix3x4fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix3x4fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix4fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix4fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix4x2fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix4x2fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glProgramUniformMatrix4x3fv(int, int, int, boolean, float[], int);
-    method public static void glProgramUniformMatrix4x3fv(int, int, int, boolean, java.nio.FloatBuffer);
-    method public static void glSampleMaski(int, int);
-    method public static void glTexStorage2DMultisample(int, int, int, int, int, boolean);
-    method public static void glUseProgramStages(int, int, int);
-    method public static void glValidateProgramPipeline(int);
-    method public static void glVertexAttribBinding(int, int);
-    method public static void glVertexAttribFormat(int, int, int, boolean, int);
-    method public static void glVertexAttribIFormat(int, int, int, int);
-    method public static void glVertexBindingDivisor(int, int);
-    field public static final int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 37593; // 0x92d9
-    field public static final int GL_ACTIVE_PROGRAM = 33369; // 0x8259
-    field public static final int GL_ACTIVE_RESOURCES = 37621; // 0x92f5
-    field public static final int GL_ACTIVE_VARIABLES = 37637; // 0x9305
-    field public static final int GL_ALL_SHADER_BITS = -1; // 0xffffffff
-    field public static final int GL_ARRAY_SIZE = 37627; // 0x92fb
-    field public static final int GL_ARRAY_STRIDE = 37630; // 0x92fe
-    field public static final int GL_ATOMIC_COUNTER_BARRIER_BIT = 4096; // 0x1000
-    field public static final int GL_ATOMIC_COUNTER_BUFFER = 37568; // 0x92c0
-    field public static final int GL_ATOMIC_COUNTER_BUFFER_BINDING = 37569; // 0x92c1
-    field public static final int GL_ATOMIC_COUNTER_BUFFER_INDEX = 37633; // 0x9301
-    field public static final int GL_ATOMIC_COUNTER_BUFFER_SIZE = 37571; // 0x92c3
-    field public static final int GL_ATOMIC_COUNTER_BUFFER_START = 37570; // 0x92c2
-    field public static final int GL_BLOCK_INDEX = 37629; // 0x92fd
-    field public static final int GL_BUFFER_BINDING = 37634; // 0x9302
-    field public static final int GL_BUFFER_DATA_SIZE = 37635; // 0x9303
-    field public static final int GL_BUFFER_UPDATE_BARRIER_BIT = 512; // 0x200
-    field public static final int GL_BUFFER_VARIABLE = 37605; // 0x92e5
-    field public static final int GL_COMMAND_BARRIER_BIT = 64; // 0x40
-    field public static final int GL_COMPUTE_SHADER = 37305; // 0x91b9
-    field public static final int GL_COMPUTE_SHADER_BIT = 32; // 0x20
-    field public static final int GL_COMPUTE_WORK_GROUP_SIZE = 33383; // 0x8267
-    field public static final int GL_DEPTH_STENCIL_TEXTURE_MODE = 37098; // 0x90ea
-    field public static final int GL_DISPATCH_INDIRECT_BUFFER = 37102; // 0x90ee
-    field public static final int GL_DISPATCH_INDIRECT_BUFFER_BINDING = 37103; // 0x90ef
-    field public static final int GL_DRAW_INDIRECT_BUFFER = 36671; // 0x8f3f
-    field public static final int GL_DRAW_INDIRECT_BUFFER_BINDING = 36675; // 0x8f43
-    field public static final int GL_FRAGMENT_SHADER_BIT = 2; // 0x2
-    field public static final int GL_FRAMEBUFFER_BARRIER_BIT = 1024; // 0x400
-    field public static final int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 37652; // 0x9314
-    field public static final int GL_FRAMEBUFFER_DEFAULT_HEIGHT = 37649; // 0x9311
-    field public static final int GL_FRAMEBUFFER_DEFAULT_SAMPLES = 37651; // 0x9313
-    field public static final int GL_FRAMEBUFFER_DEFAULT_WIDTH = 37648; // 0x9310
-    field public static final int GL_IMAGE_2D = 36941; // 0x904d
-    field public static final int GL_IMAGE_2D_ARRAY = 36947; // 0x9053
-    field public static final int GL_IMAGE_3D = 36942; // 0x904e
-    field public static final int GL_IMAGE_BINDING_ACCESS = 36670; // 0x8f3e
-    field public static final int GL_IMAGE_BINDING_FORMAT = 36974; // 0x906e
-    field public static final int GL_IMAGE_BINDING_LAYER = 36669; // 0x8f3d
-    field public static final int GL_IMAGE_BINDING_LAYERED = 36668; // 0x8f3c
-    field public static final int GL_IMAGE_BINDING_LEVEL = 36667; // 0x8f3b
-    field public static final int GL_IMAGE_BINDING_NAME = 36666; // 0x8f3a
-    field public static final int GL_IMAGE_CUBE = 36944; // 0x9050
-    field public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 37065; // 0x90c9
-    field public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 37064; // 0x90c8
-    field public static final int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 37063; // 0x90c7
-    field public static final int GL_INT_IMAGE_2D = 36952; // 0x9058
-    field public static final int GL_INT_IMAGE_2D_ARRAY = 36958; // 0x905e
-    field public static final int GL_INT_IMAGE_3D = 36953; // 0x9059
-    field public static final int GL_INT_IMAGE_CUBE = 36955; // 0x905b
-    field public static final int GL_INT_SAMPLER_2D_MULTISAMPLE = 37129; // 0x9109
-    field public static final int GL_IS_ROW_MAJOR = 37632; // 0x9300
-    field public static final int GL_LOCATION = 37646; // 0x930e
-    field public static final int GL_MATRIX_STRIDE = 37631; // 0x92ff
-    field public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 37596; // 0x92dc
-    field public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 37592; // 0x92d8
-    field public static final int GL_MAX_COLOR_TEXTURE_SAMPLES = 37134; // 0x910e
-    field public static final int GL_MAX_COMBINED_ATOMIC_COUNTERS = 37591; // 0x92d7
-    field public static final int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 37585; // 0x92d1
-    field public static final int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 33382; // 0x8266
-    field public static final int GL_MAX_COMBINED_IMAGE_UNIFORMS = 37071; // 0x90cf
-    field public static final int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 36665; // 0x8f39
-    field public static final int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 37084; // 0x90dc
-    field public static final int GL_MAX_COMPUTE_ATOMIC_COUNTERS = 33381; // 0x8265
-    field public static final int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 33380; // 0x8264
-    field public static final int GL_MAX_COMPUTE_IMAGE_UNIFORMS = 37309; // 0x91bd
-    field public static final int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 37083; // 0x90db
-    field public static final int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 33378; // 0x8262
-    field public static final int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 37308; // 0x91bc
-    field public static final int GL_MAX_COMPUTE_UNIFORM_BLOCKS = 37307; // 0x91bb
-    field public static final int GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 33379; // 0x8263
-    field public static final int GL_MAX_COMPUTE_WORK_GROUP_COUNT = 37310; // 0x91be
-    field public static final int GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 37099; // 0x90eb
-    field public static final int GL_MAX_COMPUTE_WORK_GROUP_SIZE = 37311; // 0x91bf
-    field public static final int GL_MAX_DEPTH_TEXTURE_SAMPLES = 37135; // 0x910f
-    field public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 37590; // 0x92d6
-    field public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 37584; // 0x92d0
-    field public static final int GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 37070; // 0x90ce
-    field public static final int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 37082; // 0x90da
-    field public static final int GL_MAX_FRAMEBUFFER_HEIGHT = 37654; // 0x9316
-    field public static final int GL_MAX_FRAMEBUFFER_SAMPLES = 37656; // 0x9318
-    field public static final int GL_MAX_FRAMEBUFFER_WIDTH = 37653; // 0x9315
-    field public static final int GL_MAX_IMAGE_UNITS = 36664; // 0x8f38
-    field public static final int GL_MAX_INTEGER_SAMPLES = 37136; // 0x9110
-    field public static final int GL_MAX_NAME_LENGTH = 37622; // 0x92f6
-    field public static final int GL_MAX_NUM_ACTIVE_VARIABLES = 37623; // 0x92f7
-    field public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 36447; // 0x8e5f
-    field public static final int GL_MAX_SAMPLE_MASK_WORDS = 36441; // 0x8e59
-    field public static final int GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 37086; // 0x90de
-    field public static final int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 37085; // 0x90dd
-    field public static final int GL_MAX_UNIFORM_LOCATIONS = 33390; // 0x826e
-    field public static final int GL_MAX_VERTEX_ATOMIC_COUNTERS = 37586; // 0x92d2
-    field public static final int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 37580; // 0x92cc
-    field public static final int GL_MAX_VERTEX_ATTRIB_BINDINGS = 33498; // 0x82da
-    field public static final int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 33497; // 0x82d9
-    field public static final int GL_MAX_VERTEX_ATTRIB_STRIDE = 33509; // 0x82e5
-    field public static final int GL_MAX_VERTEX_IMAGE_UNIFORMS = 37066; // 0x90ca
-    field public static final int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 37078; // 0x90d6
-    field public static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 36446; // 0x8e5e
-    field public static final int GL_NAME_LENGTH = 37625; // 0x92f9
-    field public static final int GL_NUM_ACTIVE_VARIABLES = 37636; // 0x9304
-    field public static final int GL_OFFSET = 37628; // 0x92fc
-    field public static final int GL_PIXEL_BUFFER_BARRIER_BIT = 128; // 0x80
-    field public static final int GL_PROGRAM_INPUT = 37603; // 0x92e3
-    field public static final int GL_PROGRAM_OUTPUT = 37604; // 0x92e4
-    field public static final int GL_PROGRAM_PIPELINE_BINDING = 33370; // 0x825a
-    field public static final int GL_PROGRAM_SEPARABLE = 33368; // 0x8258
-    field public static final int GL_READ_ONLY = 35000; // 0x88b8
-    field public static final int GL_READ_WRITE = 35002; // 0x88ba
-    field public static final int GL_REFERENCED_BY_COMPUTE_SHADER = 37643; // 0x930b
-    field public static final int GL_REFERENCED_BY_FRAGMENT_SHADER = 37642; // 0x930a
-    field public static final int GL_REFERENCED_BY_VERTEX_SHADER = 37638; // 0x9306
-    field public static final int GL_SAMPLER_2D_MULTISAMPLE = 37128; // 0x9108
-    field public static final int GL_SAMPLE_MASK = 36433; // 0x8e51
-    field public static final int GL_SAMPLE_MASK_VALUE = 36434; // 0x8e52
-    field public static final int GL_SAMPLE_POSITION = 36432; // 0x8e50
-    field public static final int GL_SHADER_STORAGE_BARRIER_BIT = 8192; // 0x2000
-    field public static final int GL_SHADER_STORAGE_BLOCK = 37606; // 0x92e6
-    field public static final int GL_SHADER_STORAGE_BUFFER = 37074; // 0x90d2
-    field public static final int GL_SHADER_STORAGE_BUFFER_BINDING = 37075; // 0x90d3
-    field public static final int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 37087; // 0x90df
-    field public static final int GL_SHADER_STORAGE_BUFFER_SIZE = 37077; // 0x90d5
-    field public static final int GL_SHADER_STORAGE_BUFFER_START = 37076; // 0x90d4
-    field public static final int GL_STENCIL_INDEX = 6401; // 0x1901
-    field public static final int GL_TEXTURE_2D_MULTISAMPLE = 37120; // 0x9100
-    field public static final int GL_TEXTURE_ALPHA_SIZE = 32863; // 0x805f
-    field public static final int GL_TEXTURE_ALPHA_TYPE = 35859; // 0x8c13
-    field public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE = 37124; // 0x9104
-    field public static final int GL_TEXTURE_BLUE_SIZE = 32862; // 0x805e
-    field public static final int GL_TEXTURE_BLUE_TYPE = 35858; // 0x8c12
-    field public static final int GL_TEXTURE_COMPRESSED = 34465; // 0x86a1
-    field public static final int GL_TEXTURE_DEPTH = 32881; // 0x8071
-    field public static final int GL_TEXTURE_DEPTH_SIZE = 34890; // 0x884a
-    field public static final int GL_TEXTURE_DEPTH_TYPE = 35862; // 0x8c16
-    field public static final int GL_TEXTURE_FETCH_BARRIER_BIT = 8; // 0x8
-    field public static final int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 37127; // 0x9107
-    field public static final int GL_TEXTURE_GREEN_SIZE = 32861; // 0x805d
-    field public static final int GL_TEXTURE_GREEN_TYPE = 35857; // 0x8c11
-    field public static final int GL_TEXTURE_HEIGHT = 4097; // 0x1001
-    field public static final int GL_TEXTURE_INTERNAL_FORMAT = 4099; // 0x1003
-    field public static final int GL_TEXTURE_RED_SIZE = 32860; // 0x805c
-    field public static final int GL_TEXTURE_RED_TYPE = 35856; // 0x8c10
-    field public static final int GL_TEXTURE_SAMPLES = 37126; // 0x9106
-    field public static final int GL_TEXTURE_SHARED_SIZE = 35903; // 0x8c3f
-    field public static final int GL_TEXTURE_STENCIL_SIZE = 35057; // 0x88f1
-    field public static final int GL_TEXTURE_UPDATE_BARRIER_BIT = 256; // 0x100
-    field public static final int GL_TEXTURE_WIDTH = 4096; // 0x1000
-    field public static final int GL_TOP_LEVEL_ARRAY_SIZE = 37644; // 0x930c
-    field public static final int GL_TOP_LEVEL_ARRAY_STRIDE = 37645; // 0x930d
-    field public static final int GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 2048; // 0x800
-    field public static final int GL_TRANSFORM_FEEDBACK_VARYING = 37620; // 0x92f4
-    field public static final int GL_TYPE = 37626; // 0x92fa
-    field public static final int GL_UNIFORM = 37601; // 0x92e1
-    field public static final int GL_UNIFORM_BARRIER_BIT = 4; // 0x4
-    field public static final int GL_UNIFORM_BLOCK = 37602; // 0x92e2
-    field public static final int GL_UNSIGNED_INT_ATOMIC_COUNTER = 37595; // 0x92db
-    field public static final int GL_UNSIGNED_INT_IMAGE_2D = 36963; // 0x9063
-    field public static final int GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 36969; // 0x9069
-    field public static final int GL_UNSIGNED_INT_IMAGE_3D = 36964; // 0x9064
-    field public static final int GL_UNSIGNED_INT_IMAGE_CUBE = 36966; // 0x9066
-    field public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 37130; // 0x910a
-    field public static final int GL_VERTEX_ATTRIB_BINDING = 33492; // 0x82d4
-    field public static final int GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 33493; // 0x82d5
-    field public static final int GL_VERTEX_BINDING_BUFFER = 36687; // 0x8f4f
-    field public static final int GL_VERTEX_BINDING_DIVISOR = 33494; // 0x82d6
-    field public static final int GL_VERTEX_BINDING_OFFSET = 33495; // 0x82d7
-    field public static final int GL_VERTEX_BINDING_STRIDE = 33496; // 0x82d8
-    field public static final int GL_VERTEX_SHADER_BIT = 1; // 0x1
-    field public static final int GL_WRITE_ONLY = 35001; // 0x88b9
-  }
-
-  public class GLES31Ext {
-    method public static void glBlendBarrierKHR();
-    method public static void glBlendEquationSeparateiEXT(int, int, int);
-    method public static void glBlendEquationiEXT(int, int);
-    method public static void glBlendFuncSeparateiEXT(int, int, int, int, int);
-    method public static void glBlendFunciEXT(int, int, int);
-    method public static void glColorMaskiEXT(int, boolean, boolean, boolean, boolean);
-    method public static void glCopyImageSubDataEXT(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int);
-    method public static void glDebugMessageCallbackKHR(android.opengl.GLES31Ext.DebugProcKHR);
-    method public static void glDebugMessageControlKHR(int, int, int, int, int[], int, boolean);
-    method public static void glDebugMessageControlKHR(int, int, int, int, java.nio.IntBuffer, boolean);
-    method public static void glDebugMessageInsertKHR(int, int, int, int, java.lang.String);
-    method public static void glDisableiEXT(int, int);
-    method public static void glEnableiEXT(int, int);
-    method public static void glFramebufferTextureEXT(int, int, int, int);
-    method public static android.opengl.GLES31Ext.DebugProcKHR glGetDebugMessageCallbackKHR();
-    method public static int glGetDebugMessageLogKHR(int, int, int[], int, int[], int, int[], int, int[], int, int[], int, byte[], int);
-    method public static int glGetDebugMessageLogKHR(int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer);
-    method public static java.lang.String[] glGetDebugMessageLogKHR(int, int[], int, int[], int, int[], int, int[], int);
-    method public static java.lang.String[] glGetDebugMessageLogKHR(int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer);
-    method public static java.lang.String glGetObjectLabelKHR(int, int);
-    method public static java.lang.String glGetObjectPtrLabelKHR(long);
-    method public static void glGetSamplerParameterIivEXT(int, int, int[], int);
-    method public static void glGetSamplerParameterIivEXT(int, int, java.nio.IntBuffer);
-    method public static void glGetSamplerParameterIuivEXT(int, int, int[], int);
-    method public static void glGetSamplerParameterIuivEXT(int, int, java.nio.IntBuffer);
-    method public static void glGetTexParameterIivEXT(int, int, int[], int);
-    method public static void glGetTexParameterIivEXT(int, int, java.nio.IntBuffer);
-    method public static void glGetTexParameterIuivEXT(int, int, int[], int);
-    method public static void glGetTexParameterIuivEXT(int, int, java.nio.IntBuffer);
-    method public static boolean glIsEnablediEXT(int, int);
-    method public static void glMinSampleShadingOES(float);
-    method public static void glObjectLabelKHR(int, int, int, java.lang.String);
-    method public static void glObjectPtrLabelKHR(long, java.lang.String);
-    method public static void glPatchParameteriEXT(int, int);
-    method public static void glPopDebugGroupKHR();
-    method public static void glPrimitiveBoundingBoxEXT(float, float, float, float, float, float, float, float);
-    method public static void glPushDebugGroupKHR(int, int, int, java.lang.String);
-    method public static void glSamplerParameterIivEXT(int, int, int[], int);
-    method public static void glSamplerParameterIivEXT(int, int, java.nio.IntBuffer);
-    method public static void glSamplerParameterIuivEXT(int, int, int[], int);
-    method public static void glSamplerParameterIuivEXT(int, int, java.nio.IntBuffer);
-    method public static void glTexBufferEXT(int, int, int);
-    method public static void glTexBufferRangeEXT(int, int, int, int, int);
-    method public static void glTexParameterIivEXT(int, int, int[], int);
-    method public static void glTexParameterIivEXT(int, int, java.nio.IntBuffer);
-    method public static void glTexParameterIuivEXT(int, int, int[], int);
-    method public static void glTexParameterIuivEXT(int, int, java.nio.IntBuffer);
-    method public static void glTexStorage3DMultisampleOES(int, int, int, int, int, int, boolean);
-    field public static final int GL_BLEND_ADVANCED_COHERENT_KHR = 37509; // 0x9285
-    field public static final int GL_BUFFER_KHR = 33504; // 0x82e0
-    field public static final int GL_CLAMP_TO_BORDER_EXT = 33069; // 0x812d
-    field public static final int GL_COLORBURN_KHR = 37530; // 0x929a
-    field public static final int GL_COLORDODGE_KHR = 37529; // 0x9299
-    field public static final int GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 37819; // 0x93bb
-    field public static final int GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 37816; // 0x93b8
-    field public static final int GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 37817; // 0x93b9
-    field public static final int GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 37818; // 0x93ba
-    field public static final int GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 37820; // 0x93bc
-    field public static final int GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 37821; // 0x93bd
-    field public static final int GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 37808; // 0x93b0
-    field public static final int GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 37809; // 0x93b1
-    field public static final int GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 37810; // 0x93b2
-    field public static final int GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 37811; // 0x93b3
-    field public static final int GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 37812; // 0x93b4
-    field public static final int GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 37813; // 0x93b5
-    field public static final int GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 37814; // 0x93b6
-    field public static final int GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 37815; // 0x93b7
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 37851; // 0x93db
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 37848; // 0x93d8
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 37849; // 0x93d9
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 37850; // 0x93da
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 37852; // 0x93dc
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 37853; // 0x93dd
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840; // 0x93d0
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 37841; // 0x93d1
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 37842; // 0x93d2
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 37843; // 0x93d3
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 37844; // 0x93d4
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 37845; // 0x93d5
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 37846; // 0x93d6
-    field public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 37847; // 0x93d7
-    field public static final int GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 2; // 0x2
-    field public static final int GL_DARKEN_KHR = 37527; // 0x9297
-    field public static final int GL_DEBUG_CALLBACK_FUNCTION_KHR = 33348; // 0x8244
-    field public static final int GL_DEBUG_CALLBACK_USER_PARAM_KHR = 33349; // 0x8245
-    field public static final int GL_DEBUG_GROUP_STACK_DEPTH_KHR = 33389; // 0x826d
-    field public static final int GL_DEBUG_LOGGED_MESSAGES_KHR = 37189; // 0x9145
-    field public static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 33347; // 0x8243
-    field public static final int GL_DEBUG_OUTPUT_KHR = 37600; // 0x92e0
-    field public static final int GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 33346; // 0x8242
-    field public static final int GL_DEBUG_SEVERITY_HIGH_KHR = 37190; // 0x9146
-    field public static final int GL_DEBUG_SEVERITY_LOW_KHR = 37192; // 0x9148
-    field public static final int GL_DEBUG_SEVERITY_MEDIUM_KHR = 37191; // 0x9147
-    field public static final int GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 33387; // 0x826b
-    field public static final int GL_DEBUG_SOURCE_API_KHR = 33350; // 0x8246
-    field public static final int GL_DEBUG_SOURCE_APPLICATION_KHR = 33354; // 0x824a
-    field public static final int GL_DEBUG_SOURCE_OTHER_KHR = 33355; // 0x824b
-    field public static final int GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 33352; // 0x8248
-    field public static final int GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 33353; // 0x8249
-    field public static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 33351; // 0x8247
-    field public static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 33357; // 0x824d
-    field public static final int GL_DEBUG_TYPE_ERROR_KHR = 33356; // 0x824c
-    field public static final int GL_DEBUG_TYPE_MARKER_KHR = 33384; // 0x8268
-    field public static final int GL_DEBUG_TYPE_OTHER_KHR = 33361; // 0x8251
-    field public static final int GL_DEBUG_TYPE_PERFORMANCE_KHR = 33360; // 0x8250
-    field public static final int GL_DEBUG_TYPE_POP_GROUP_KHR = 33386; // 0x826a
-    field public static final int GL_DEBUG_TYPE_PORTABILITY_KHR = 33359; // 0x824f
-    field public static final int GL_DEBUG_TYPE_PUSH_GROUP_KHR = 33385; // 0x8269
-    field public static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 33358; // 0x824e
-    field public static final int GL_DECODE_EXT = 35401; // 0x8a49
-    field public static final int GL_DIFFERENCE_KHR = 37534; // 0x929e
-    field public static final int GL_EXCLUSION_KHR = 37536; // 0x92a0
-    field public static final int GL_FIRST_VERTEX_CONVENTION_EXT = 36429; // 0x8e4d
-    field public static final int GL_FRACTIONAL_EVEN_EXT = 36476; // 0x8e7c
-    field public static final int GL_FRACTIONAL_ODD_EXT = 36475; // 0x8e7b
-    field public static final int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 36445; // 0x8e5d
-    field public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 36263; // 0x8da7
-    field public static final int GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 37650; // 0x9312
-    field public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 36264; // 0x8da8
-    field public static final int GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 35095; // 0x8917
-    field public static final int GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 35096; // 0x8918
-    field public static final int GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 35094; // 0x8916
-    field public static final int GL_GEOMETRY_SHADER_BIT_EXT = 4; // 0x4
-    field public static final int GL_GEOMETRY_SHADER_EXT = 36313; // 0x8dd9
-    field public static final int GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 34943; // 0x887f
-    field public static final int GL_HARDLIGHT_KHR = 37531; // 0x929b
-    field public static final int GL_HSL_COLOR_KHR = 37551; // 0x92af
-    field public static final int GL_HSL_HUE_KHR = 37549; // 0x92ad
-    field public static final int GL_HSL_LUMINOSITY_KHR = 37552; // 0x92b0
-    field public static final int GL_HSL_SATURATION_KHR = 37550; // 0x92ae
-    field public static final int GL_IMAGE_BUFFER_EXT = 36945; // 0x9051
-    field public static final int GL_IMAGE_CUBE_MAP_ARRAY_EXT = 36948; // 0x9054
-    field public static final int GL_INT_IMAGE_BUFFER_EXT = 36956; // 0x905c
-    field public static final int GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36959; // 0x905f
-    field public static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37132; // 0x910c
-    field public static final int GL_INT_SAMPLER_BUFFER_EXT = 36304; // 0x8dd0
-    field public static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 36878; // 0x900e
-    field public static final int GL_ISOLINES_EXT = 36474; // 0x8e7a
-    field public static final int GL_IS_PER_PATCH_EXT = 37607; // 0x92e7
-    field public static final int GL_LAST_VERTEX_CONVENTION_EXT = 36430; // 0x8e4e
-    field public static final int GL_LAYER_PROVOKING_VERTEX_EXT = 33374; // 0x825e
-    field public static final int GL_LIGHTEN_KHR = 37528; // 0x9298
-    field public static final int GL_LINES_ADJACENCY_EXT = 10; // 0xa
-    field public static final int GL_LINE_STRIP_ADJACENCY_EXT = 11; // 0xb
-    field public static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 35378; // 0x8a32
-    field public static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36382; // 0x8e1e
-    field public static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36383; // 0x8e1f
-    field public static final int GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 33388; // 0x826c
-    field public static final int GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 37188; // 0x9144
-    field public static final int GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 37187; // 0x9143
-    field public static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 36444; // 0x8e5c
-    field public static final int GL_MAX_FRAMEBUFFER_LAYERS_EXT = 37655; // 0x9317
-    field public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 37589; // 0x92d5
-    field public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 37583; // 0x92cf
-    field public static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 37069; // 0x90cd
-    field public static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 37155; // 0x9123
-    field public static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 37156; // 0x9124
-    field public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 36320; // 0x8de0
-    field public static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 36442; // 0x8e5a
-    field public static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 37079; // 0x90d7
-    field public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 35881; // 0x8c29
-    field public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 36321; // 0x8de1
-    field public static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 35372; // 0x8a2c
-    field public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 36319; // 0x8ddf
-    field public static final int GL_MAX_LABEL_LENGTH_KHR = 33512; // 0x82e8
-    field public static final int GL_MAX_PATCH_VERTICES_EXT = 36477; // 0x8e7d
-    field public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 37587; // 0x92d3
-    field public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 37581; // 0x92cd
-    field public static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 37067; // 0x90cb
-    field public static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 34924; // 0x886c
-    field public static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 36483; // 0x8e83
-    field public static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 37080; // 0x90d8
-    field public static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 36481; // 0x8e81
-    field public static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 36485; // 0x8e85
-    field public static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 36489; // 0x8e89
-    field public static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36479; // 0x8e7f
-    field public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 37588; // 0x92d4
-    field public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 37582; // 0x92ce
-    field public static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 37068; // 0x90cc
-    field public static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 34925; // 0x886d
-    field public static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 36486; // 0x8e86
-    field public static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 37081; // 0x90d9
-    field public static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 36482; // 0x8e82
-    field public static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 36490; // 0x8e8a
-    field public static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36480; // 0x8e80
-    field public static final int GL_MAX_TESS_GEN_LEVEL_EXT = 36478; // 0x8e7e
-    field public static final int GL_MAX_TESS_PATCH_COMPONENTS_EXT = 36484; // 0x8e84
-    field public static final int GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 35883; // 0x8c2b
-    field public static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 36443; // 0x8e5b
-    field public static final int GL_MIN_SAMPLE_SHADING_VALUE_OES = 35895; // 0x8c37
-    field public static final int GL_MULTIPLY_KHR = 37524; // 0x9294
-    field public static final int GL_OVERLAY_KHR = 37526; // 0x9296
-    field public static final int GL_PATCHES_EXT = 14; // 0xe
-    field public static final int GL_PATCH_VERTICES_EXT = 36466; // 0x8e72
-    field public static final int GL_PRIMITIVES_GENERATED_EXT = 35975; // 0x8c87
-    field public static final int GL_PRIMITIVE_BOUNDING_BOX_EXT = 37566; // 0x92be
-    field public static final int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 33313; // 0x8221
-    field public static final int GL_PROGRAM_KHR = 33506; // 0x82e2
-    field public static final int GL_QUADS_EXT = 7; // 0x7
-    field public static final int GL_QUERY_KHR = 33507; // 0x82e3
-    field public static final int GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 37641; // 0x9309
-    field public static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 37639; // 0x9307
-    field public static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 37640; // 0x9308
-    field public static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37131; // 0x910b
-    field public static final int GL_SAMPLER_BUFFER_EXT = 36290; // 0x8dc2
-    field public static final int GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 36876; // 0x900c
-    field public static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 36877; // 0x900d
-    field public static final int GL_SAMPLER_KHR = 33510; // 0x82e6
-    field public static final int GL_SAMPLE_SHADING_OES = 35894; // 0x8c36
-    field public static final int GL_SCREEN_KHR = 37525; // 0x9295
-    field public static final int GL_SHADER_KHR = 33505; // 0x82e1
-    field public static final int GL_SKIP_DECODE_EXT = 35402; // 0x8a4a
-    field public static final int GL_SOFTLIGHT_KHR = 37532; // 0x929c
-    field public static final int GL_STACK_OVERFLOW_KHR = 1283; // 0x503
-    field public static final int GL_STACK_UNDERFLOW_KHR = 1284; // 0x504
-    field public static final int GL_STENCIL_INDEX8_OES = 36168; // 0x8d48
-    field public static final int GL_STENCIL_INDEX_OES = 6401; // 0x1901
-    field public static final int GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 36469; // 0x8e75
-    field public static final int GL_TESS_CONTROL_SHADER_BIT_EXT = 8; // 0x8
-    field public static final int GL_TESS_CONTROL_SHADER_EXT = 36488; // 0x8e88
-    field public static final int GL_TESS_EVALUATION_SHADER_BIT_EXT = 16; // 0x10
-    field public static final int GL_TESS_EVALUATION_SHADER_EXT = 36487; // 0x8e87
-    field public static final int GL_TESS_GEN_MODE_EXT = 36470; // 0x8e76
-    field public static final int GL_TESS_GEN_POINT_MODE_EXT = 36473; // 0x8e79
-    field public static final int GL_TESS_GEN_SPACING_EXT = 36471; // 0x8e77
-    field public static final int GL_TESS_GEN_VERTEX_ORDER_EXT = 36472; // 0x8e78
-    field public static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 37122; // 0x9102
-    field public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 37125; // 0x9105
-    field public static final int GL_TEXTURE_BINDING_BUFFER_EXT = 35884; // 0x8c2c
-    field public static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 36874; // 0x900a
-    field public static final int GL_TEXTURE_BORDER_COLOR_EXT = 4100; // 0x1004
-    field public static final int GL_TEXTURE_BUFFER_BINDING_EXT = 35882; // 0x8c2a
-    field public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 35885; // 0x8c2d
-    field public static final int GL_TEXTURE_BUFFER_EXT = 35882; // 0x8c2a
-    field public static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 37279; // 0x919f
-    field public static final int GL_TEXTURE_BUFFER_OFFSET_EXT = 37277; // 0x919d
-    field public static final int GL_TEXTURE_BUFFER_SIZE_EXT = 37278; // 0x919e
-    field public static final int GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 36873; // 0x9009
-    field public static final int GL_TEXTURE_SRGB_DECODE_EXT = 35400; // 0x8a48
-    field public static final int GL_TRIANGLES_ADJACENCY_EXT = 12; // 0xc
-    field public static final int GL_TRIANGLE_STRIP_ADJACENCY_EXT = 13; // 0xd
-    field public static final int GL_UNDEFINED_VERTEX_EXT = 33376; // 0x8260
-    field public static final int GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 36967; // 0x9067
-    field public static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36970; // 0x906a
-    field public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37133; // 0x910d
-    field public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 36312; // 0x8dd8
-    field public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 36879; // 0x900f
-    field public static final int GL_VERTEX_ARRAY_KHR = 32884; // 0x8074
-  }
-
-  public static abstract interface GLES31Ext.DebugProcKHR {
-    method public abstract void onMessage(int, int, int, int, java.lang.String);
-  }
-
   public class GLException extends java.lang.RuntimeException {
     ctor public GLException(int);
     ctor public GLException(int, java.lang.String);
@@ -30343,11 +29817,11 @@ package android.telecom {
     method public android.telecom.PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String);
     method public android.content.ComponentName getDefaultPhoneApp();
     method public java.lang.String getLine1Number(android.telecom.PhoneAccountHandle);
-    method public java.lang.String getVoiceMailNumber(android.telecom.PhoneAccountHandle);
     method public android.telecom.PhoneAccount getPhoneAccount(android.telecom.PhoneAccountHandle);
     method public java.util.List<android.telecom.PhoneAccountHandle> getPhoneAccountsForPackage();
     method public java.util.List<android.telecom.PhoneAccountHandle> getPhoneAccountsSupportingScheme(java.lang.String);
     method public java.util.List<android.telecom.PhoneAccountHandle> getRegisteredConnectionManagers();
+    method public java.lang.String getVoiceMailNumber(android.telecom.PhoneAccountHandle);
     method public boolean handleMmi(java.lang.String);
     method public boolean handleMmi(android.telecom.PhoneAccountHandle, java.lang.String);
     method public boolean hasMultipleCallCapableAccounts();
diff --git a/docs/html/about/versions/android-5.0.jd b/docs/html/about/versions/android-5.0.jd
index 4caa3ad93ea45..dfb4b75261f0b 100644
--- a/docs/html/about/versions/android-5.0.jd
+++ b/docs/html/about/versions/android-5.0.jd
@@ -349,11 +349,6 @@ ES 3.1. Key new functionality provided in OpenGL ES 3.1 includes:</p>
 <li>Backward compatibility with OpenGL ES 2.0 and 3.0
 </ul>
 
-<p>The Java interface for OpenGL ES 3.1 on Android is provided with
-  {@link android.opengl.GLES31}. When using OpenGL ES 3.1, be sure that you
-  declare it in your manifest file with the
-  <a href="{@docRoot}guide/topics/manifest/uses-feature-element.html">{@code &lt;uses-feature&gt;}</a> tag and the {@code android:glEsVersion} attribute. For example:</p>
-
 <pre>
 &lt;manifest&gt;
     &lt;uses-feature android:glEsVersion="0x00030001" /&gt;
@@ -385,11 +380,6 @@ features with a single {@code #extension} statement.)</p>
 <li>Different blend modes for each color attachment in a frame buffer</li>
 </ul>
 
-<p>The Java interface for the extension pack is provided with
-  {@link android.opengl.GLES31Ext}. In your app manifest, you can declare that
-  your app must be installed only on devices that support the extension pack.
-  For example:</p>
-
 <pre>
 &lt;manifest&gt;
     &lt;uses-feature android:name=“android.hardware.opengles.aep”
diff --git a/docs/html/guide/topics/graphics/opengl.jd b/docs/html/guide/topics/graphics/opengl.jd
index 3e3d569837fe8..d8a1531344393 100644
--- a/docs/html/guide/topics/graphics/opengl.jd
+++ b/docs/html/guide/topics/graphics/opengl.jd
@@ -180,8 +180,6 @@ classes.
 starting with Android 5.0 (API level 21).
       <ul>
       <li>{@link android.opengl.GLES30}</li>
-      <li>{@link android.opengl.GLES31} </li>
-      <li>{@link android.opengl.GLES31Ext} (<a href="#aep">Android Extension Pack</a>)</li>
       </ul>
     </ul>
   </li>

From c43dbffd56c275111cb15370a08394d5c7abb812 Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Sun, 3 Jan 2016 19:41:54 +0100
Subject: [PATCH 09/12] Fix mistake

---
 .../android/systemui/statusbar/phone/PhoneStatusBarPolicy.java  | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java
index fff4652758d74..aaefb0f9261b0 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java
@@ -1,4 +1,4 @@
-﻿/*
+/*
  * Copyright (c) 2014, The Linux Foundation. All rights reserved.
  * Not a Contribution.
  *

From 67b98bfa225b1d05730c384f6d5fa8919e6fc29c Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Mon, 11 Jan 2016 17:01:38 +0100
Subject: [PATCH 10/12] Fix smart cover detection with changed default apps

---
 .../server/am/ActivityStackSupervisor.java    | 31 +++++++++++++++++--
 1 file changed, 29 insertions(+), 2 deletions(-)

diff --git a/services/core/java/com/android/server/am/ActivityStackSupervisor.java b/services/core/java/com/android/server/am/ActivityStackSupervisor.java
index 91200863eada4..56ff4743d4122 100644
--- a/services/core/java/com/android/server/am/ActivityStackSupervisor.java
+++ b/services/core/java/com/android/server/am/ActivityStackSupervisor.java
@@ -289,6 +289,10 @@
     /** Used to keep resumeTopActivityLocked() from being entered recursively */
     boolean inResumeTopActivity;
 
+    /** Used to block browser & mail app opening while opening/closing the smart cover */
+    private String browserPackageName;
+    private String mailPackageName;
+
     /**
      * Description of a request to start a new activity, which has been held
      * due to app switches being disabled.
@@ -1342,9 +1346,32 @@ final int startActivityLocked(IApplicationThread caller,
             }
         }
 
-	if (err == ActivityManager.START_SUCCESS && callingUid == 1000 && (intent.getComponent().flattenToShortString().contains("com.android.browser") || intent.getComponent().flattenToShortString().contains("com.android.email"))) {
+        /* Find default browser & mail app package name */
+        if (browserPackageName == null) {
+            try {
+                Intent browserIntent = new Intent("android.intent.action.VIEW", Uri.parse("http://"));
+                ResolveInfo browserResolveInfo = AppGlobals.getPackageManager().resolveIntent(browserIntent, intent.resolveTypeIfNeeded(mService.mContext.getContentResolver()), PackageManager.MATCH_DEFAULT_ONLY, callingUid);
+                if (browserResolveInfo != null) {
+                    browserPackageName = browserResolveInfo.activityInfo.packageName;
+                }
+            } catch (RemoteException e) {
+            }
+        }
+        if (mailPackageName == null) {
+            try {
+                Intent mailIntent = new Intent("android.intent.action.VIEW", Uri.parse("mailto:"));
+                ResolveInfo mailResolveInfo = AppGlobals.getPackageManager().resolveIntent(mailIntent, intent.resolveTypeIfNeeded(mService.mContext.getContentResolver()), PackageManager.MATCH_DEFAULT_ONLY, callingUid);
+                if (mailResolveInfo != null) {
+                    mailPackageName = mailResolveInfo.activityInfo.packageName;
+                }
+            } catch (RemoteException e) {
+            }
+        }
+
+        /* Block starting of browser or mail app while opening/closing the smart cover */
+        if (err == ActivityManager.START_SUCCESS && callingUid == 1000 && (intent.getComponent().flattenToShortString().contains(browserPackageName) || intent.getComponent().flattenToShortString().contains(mailPackageName))) {
             err = ActivityManager.START_PERMISSION_DENIED;           
-	}
+        }
 
         if (err == ActivityManager.START_SUCCESS) {
             final int userId = aInfo != null ? UserHandle.getUserId(aInfo.applicationInfo.uid) : 0;

From 04337bda6942026096a3ff34c62b5a6cf5ee1b13 Mon Sep 17 00:00:00 2001
From: DerTeufel <dominik-kassel@gmx.de>
Date: Wed, 5 Aug 2015 17:24:54 +0200
Subject: [PATCH 11/12] add support for mtk gps

Change-Id: Ib47a29cb134a118b4ed533da4421651bba341096

Former-commit-id: 6b391f3556fe9ec1231fe2a71d66766f36dc23f1
---
 location/java/android/location/GpsStatus.java | 30 +++++++++
 .../android/location/IGpsStatusListener.aidl  |  3 +
 .../android/location/LocationManager.java     | 16 +++++
 .../server/location/GpsLocationProvider.java  | 65 ++++++++++++++++++-
 .../location/GpsStatusListenerHelper.java     | 27 ++++++++
 ...id_server_location_GpsLocationProvider.cpp | 64 ++++++++++++++++++
 6 files changed, 204 insertions(+), 1 deletion(-)

diff --git a/location/java/android/location/GpsStatus.java b/location/java/android/location/GpsStatus.java
index 4af55a65b0e3a..6eceb8164fa6c 100644
--- a/location/java/android/location/GpsStatus.java
+++ b/location/java/android/location/GpsStatus.java
@@ -178,6 +178,36 @@ void setStatus(GpsStatus status) {
         } 
     }
 
+    /**
+     * Used internally within {@link LocationManager} to copy GNSS status
+     * data from the Location Manager Service to its cached GnssStatus instance.
+     * Is synchronized to ensure that GNSS status updates are atomic.
+     */
+    synchronized void setGnssStatus(int svCount, int[] prns, float[] snrs,
+            float[] elevations, float[] azimuths, boolean[] ephemeris,
+            boolean[] almanac, boolean[] usedInFix) {
+        int i;
+
+        for (i = 0; i < mSatellites.length; i++) {
+            mSatellites[i].mValid = false;
+        }
+
+        for (i = 0; i < svCount; i++) {
+            int prn = prns[i] - 1;
+            if (prn >= 0 && prn < mSatellites.length) {
+                GpsSatellite satellite = mSatellites[prn];
+
+                satellite.mValid = true;
+                satellite.mSnr = snrs[i];
+                satellite.mElevation = elevations[i];
+                satellite.mAzimuth = azimuths[i];
+                satellite.mHasEphemeris = ephemeris[i];
+                satellite.mHasAlmanac = almanac[i];
+                satellite.mUsedInFix = usedInFix[i];
+            }
+        }
+    }
+
     void setTimeToFirstFix(int ttff) {
         mTimeToFirstFix = ttff;
     }
diff --git a/location/java/android/location/IGpsStatusListener.aidl b/location/java/android/location/IGpsStatusListener.aidl
index 62b1c6b9b35c1..9f239276221be 100644
--- a/location/java/android/location/IGpsStatusListener.aidl
+++ b/location/java/android/location/IGpsStatusListener.aidl
@@ -29,5 +29,8 @@ oneway interface IGpsStatusListener
     void onSvStatusChanged(int svCount, in int[] prns, in float[] snrs, 
             in float[] elevations, in float[] azimuths, 
             int ephemerisMask, int almanacMask, int usedInFixMask);
+    void onGnssSvStatusChanged(int svCount, in int[] prns, in float[] snrs, 
+            in float[] elevations, in float[] azimuths, 
+            in boolean[] ephemeris, in boolean[] almanac, in boolean[] usedInFix);
     void onNmeaReceived(long timestamp, String nmea);
 }
diff --git a/location/java/android/location/LocationManager.java b/location/java/android/location/LocationManager.java
index 0eb4fdc6cb237..174038ae390fc 100644
--- a/location/java/android/location/LocationManager.java
+++ b/location/java/android/location/LocationManager.java
@@ -1431,6 +1431,22 @@ public void onFirstFix(int ttff) {
             }
         }
 
+        @Override
+        public void onGnssSvStatusChanged(int svCount, int[] prns, float[] snrs,
+                float[] elevations, float[] azimuths, boolean[] ephemeris,
+                boolean[]  almanac, boolean[]  usedInFix) {
+            if (mListener != null) {
+                mGpsStatus.setGnssStatus(svCount, prns, snrs, elevations, azimuths,
+                        ephemeris, almanac, usedInFix);
+
+                Message msg = Message.obtain();
+                msg.what = GpsStatus.GPS_EVENT_SATELLITE_STATUS;
+                // remove any SV status messages already in the queue
+                mGpsHandler.removeMessages(GpsStatus.GPS_EVENT_SATELLITE_STATUS);
+                mGpsHandler.sendMessage(msg);
+            }
+        }
+
         @Override
         public void onSvStatusChanged(int svCount, int[] prns, float[] snrs,
                 float[] elevations, float[] azimuths, int ephemerisMask,
diff --git a/services/core/java/com/android/server/location/GpsLocationProvider.java b/services/core/java/com/android/server/location/GpsLocationProvider.java
index 4e58c6c2821f3..fa1576173053a 100644
--- a/services/core/java/com/android/server/location/GpsLocationProvider.java
+++ b/services/core/java/com/android/server/location/GpsLocationProvider.java
@@ -1675,6 +1675,55 @@ private void reportStatus(int status) {
         }
     }
 
+    /**
+     * called from native code to update SV info
+     */
+    private void reportGnssSvStatus() {
+        int svCount = native_read_gnss_sv_status(mGnssSvs, mGnssSnrs, mGnssSvElevations
+            , mGnssSvAzimuths, mGnssSvEphemeris, mGnssSvAlmanac, mGnssSvInFix);
+        mListenerHelper.onGnssSvStatusChanged(
+                svCount,
+                mGnssSvs,
+                mGnssSnrs,
+                mGnssSvElevations,
+                mGnssSvAzimuths,
+                mGnssSvEphemeris,
+                mGnssSvAlmanac,
+                mGnssSvInFix);
+
+        if (VERBOSE) {
+            Log.v(TAG, "GNSS SV count: " + svCount +
+                    " ephemerisMask: " + Integer.toHexString(mSvMasks[EPHEMERIS_MASK]) +
+                    " almanacMask: " + Integer.toHexString(mSvMasks[ALMANAC_MASK]));
+            for (int i = 0; i < svCount; i++) {
+                Log.v(TAG, "sv: " + mGnssSvs[i] +
+                        " snr: " + mGnssSnrs[i] / 10 +
+                        " elev: " + mGnssSvElevations[i] +
+                        " azimuth: " + mGnssSvAzimuths[i] +
+                        ((mGnssSvEphemeris[i]) ? " E" : " ") +
+                        ((mGnssSvAlmanac[i]) ? " A" : " ") +
+                        ((mGnssSvInFix[i]) ? " U" : " "));
+            }
+        }
+        int svFixCount = 0;
+        for (boolean value : mGnssSvInFix) {
+            if (value) {
+                svFixCount++;
+            }
+        }
+        updateStatus(mStatus, svFixCount);
+
+
+        if (mNavigating && mStatus == LocationProvider.AVAILABLE && mLastFixTime > 0 &&
+            System.currentTimeMillis() - mLastFixTime > RECENT_FIX_TIMEOUT) {
+            // send an intent to notify that the GPS is no longer receiving fixes.
+            Intent intent = new Intent(LocationManager.GPS_FIX_CHANGE_ACTION);
+            intent.putExtra(LocationManager.EXTRA_GPS_ENABLED, false);
+            mContext.sendBroadcastAsUser(intent, UserHandle.ALL);
+            updateStatus(LocationProvider.TEMPORARILY_UNAVAILABLE, mSvCount);
+        }
+    }
+
     /**
      * called from native code to update SV info
      */
@@ -2348,6 +2397,7 @@ public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
 
     // for GPS SV statistics
     private static final int MAX_SVS = 32;
+    private static final int MAX_GNSS_SVS = 256;
     private static final int EPHEMERIS_MASK = 0;
     private static final int ALMANAC_MASK = 1;
     private static final int USED_FOR_FIX_MASK = 2;
@@ -2359,6 +2409,16 @@ public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
     private float mSvAzimuths[] = new float[MAX_SVS];
     private int mSvMasks[] = new int[3];
     private int mSvCount;
+
+    // preallocated arrays, to avoid memory allocation in reportStatus()
+    private int mGnssSvs[] = new int[MAX_GNSS_SVS];
+    private float mGnssSnrs[] = new float[MAX_GNSS_SVS];
+    private float mGnssSvElevations[] = new float[MAX_GNSS_SVS];
+    private float mGnssSvAzimuths[] = new float[MAX_GNSS_SVS];
+    private boolean mGnssSvEphemeris[] = new boolean[MAX_GNSS_SVS];
+    private boolean mGnssSvAlmanac[] = new boolean[MAX_GNSS_SVS];
+    private boolean mGnssSvInFix[] = new boolean[MAX_GNSS_SVS];
+
     // preallocated to avoid memory allocation in reportNmea()
     private byte[] mNmeaBuffer = new byte[120];
 
@@ -2379,6 +2439,10 @@ private native int native_read_sv_status(int[] svs, float[] snrs,
             float[] elevations, float[] azimuths, int[] masks);
     private native int native_read_nmea(byte[] buffer, int bufferSize);
     private native void native_inject_location(double latitude, double longitude, float accuracy);
+    private native int native_read_gnss_sv_status(int[] svs, float[] snrs,
+            float[] elevations, float[] azimuths, boolean[] ephemeris, boolean[] almanac,
+            boolean[] infix);
+
 
     // XTRA Support
     private native void native_inject_time(long time, long timeReference, int uncertainty);
@@ -2428,4 +2492,3 @@ private static native boolean native_add_geofence(int geofenceId, double latitud
     // GNSS Configuration
     private static native void native_configuration_update(String configData);
 }
-
diff --git a/services/core/java/com/android/server/location/GpsStatusListenerHelper.java b/services/core/java/com/android/server/location/GpsStatusListenerHelper.java
index 376b4a534ff59..371d5e7a5ca13 100644
--- a/services/core/java/com/android/server/location/GpsStatusListenerHelper.java
+++ b/services/core/java/com/android/server/location/GpsStatusListenerHelper.java
@@ -104,6 +104,33 @@ public void execute(IGpsStatusListener listener) throws RemoteException {
         foreach(operation);
     }
 
+    public void onGnssSvStatusChanged(
+            final int svCount,
+            final int[] prns,
+            final float[] snrs,
+            final float[] elevations,
+            final float[] azimuths,
+            final boolean[] ephemeris,
+            final boolean[] almanac,
+            final boolean[] usedInFix) {
+        Operation operation = new Operation() {
+            @Override
+            public void execute(IGpsStatusListener listener) throws RemoteException {
+                listener.onGnssSvStatusChanged(
+                        svCount,
+                        prns,
+                        snrs,
+                        elevations,
+                        azimuths,
+                        ephemeris,
+                        almanac,
+                        usedInFix);
+            }
+        };
+
+        foreach(operation);
+    }
+
     public void onNmeaReceived(final long timestamp, final String nmea) {
         Operation operation = new Operation() {
             @Override
diff --git a/services/core/jni/com_android_server_location_GpsLocationProvider.cpp b/services/core/jni/com_android_server_location_GpsLocationProvider.cpp
index 0d3fdf6ac3827..d83d989d8ef22 100644
--- a/services/core/jni/com_android_server_location_GpsLocationProvider.cpp
+++ b/services/core/jni/com_android_server_location_GpsLocationProvider.cpp
@@ -39,6 +39,7 @@ static jobject mCallbacksObj = NULL;
 static jmethodID method_reportLocation;
 static jmethodID method_reportStatus;
 static jmethodID method_reportSvStatus;
+static jmethodID method_reportGnssSvStatus;
 static jmethodID method_reportAGpsStatus;
 static jmethodID method_reportNmea;
 static jmethodID method_setEngineCapabilities;
@@ -69,6 +70,8 @@ static const GnssConfigurationInterface* sGnssConfigurationInterface = NULL;
 
 // temporary storage for GPS callbacks
 static GpsSvStatus  sGpsSvStatus;
+static GnssSvStatus  sGnssSvStatus;
+
 static const char* sNmeaString;
 static int sNmeaStringLength;
 
@@ -110,6 +113,15 @@ static void sv_status_callback(GpsSvStatus* sv_status)
     checkAndClearExceptionFromCallback(env, __FUNCTION__);
 }
 
+static void gnss_sv_status_callback(GnssSvStatus* sv_status)
+{
+    JNIEnv* env = AndroidRuntime::getJNIEnv();
+    memcpy(&sGnssSvStatus, sv_status, sizeof(sGnssSvStatus));
+    env->CallVoidMethod(mCallbacksObj, method_reportGnssSvStatus);
+    checkAndClearExceptionFromCallback(env, __FUNCTION__);
+}
+
+
 static void nmea_callback(GpsUtcTime timestamp, const char* nmea, int length)
 {
     JNIEnv* env = AndroidRuntime::getJNIEnv();
@@ -156,6 +168,7 @@ GpsCallbacks sGpsCallbacks = {
     location_callback,
     status_callback,
     sv_status_callback,
+    gnss_sv_status_callback,
     nmea_callback,
     set_capabilities_callback,
     acquire_wakelock_callback,
@@ -446,6 +459,7 @@ static void android_location_GpsLocationProvider_class_init_native(JNIEnv* env,
     method_reportLocation = env->GetMethodID(clazz, "reportLocation", "(IDDDFFFJ)V");
     method_reportStatus = env->GetMethodID(clazz, "reportStatus", "(I)V");
     method_reportSvStatus = env->GetMethodID(clazz, "reportSvStatus", "()V");
+    method_reportGnssSvStatus = env->GetMethodID(clazz, "reportGnssSvStatus", "()V");
     method_reportAGpsStatus = env->GetMethodID(clazz, "reportAGpsStatus", "(II[B)V");
     method_reportNmea = env->GetMethodID(clazz, "reportNmea", "(J)V");
     method_setEngineCapabilities = env->GetMethodID(clazz, "setEngineCapabilities", "(I)V");
@@ -602,6 +616,12 @@ static jint android_location_GpsLocationProvider_read_sv_status(JNIEnv* env, job
 {
     // this should only be called from within a call to reportSvStatus
 
+    size_t status_size = sGpsSvStatus.size;
+    if (status_size != sizeof(GpsSvStatus)) {
+		jniThrowException(env, "java/lang/IllegalArgumentException ", "size wrong");
+        return (jint)0;
+    }
+
     jint* prns = env->GetIntArrayElements(prnArray, 0);
     jfloat* snrs = env->GetFloatArrayElements(snrArray, 0);
     jfloat* elev = env->GetFloatArrayElements(elevArray, 0);
@@ -627,6 +647,47 @@ static jint android_location_GpsLocationProvider_read_sv_status(JNIEnv* env, job
     return (jint) num_svs;
 }
 
+static jint android_location_GpsLocationProvider_read_gnss_sv_status(JNIEnv* env, jobject obj,
+        jintArray prnArray, jfloatArray snrArray, jfloatArray elevArray, jfloatArray azumArray,
+        jbooleanArray ephmArray,jbooleanArray almArray,jbooleanArray fixArray)
+{
+    // this should only be called from within a call to reportGnssSvStatus
+    size_t status_size = sGnssSvStatus.size;
+    if (status_size != sizeof(GnssSvStatus)) {
+		jniThrowException(env, "java/lang/IllegalArgumentException ", "size wrong");
+        return (jint)0;
+    }
+	
+    jint* prns = env->GetIntArrayElements(prnArray, 0);
+    jfloat* snrs = env->GetFloatArrayElements(snrArray, 0);
+    jfloat* elev = env->GetFloatArrayElements(elevArray, 0);
+    jfloat* azim = env->GetFloatArrayElements(azumArray, 0);
+    jboolean* ephm = env->GetBooleanArrayElements(ephmArray, 0);
+    jboolean* alm = env->GetBooleanArrayElements(almArray, 0);
+    jboolean* fix = env->GetBooleanArrayElements(fixArray, 0);
+
+    int num_svs = sGnssSvStatus.num_svs;
+    for (int i = 0; i < num_svs; i++) {
+        prns[i] = sGnssSvStatus.sv_list[i].prn;
+        snrs[i] = sGnssSvStatus.sv_list[i].snr;
+        elev[i] = sGnssSvStatus.sv_list[i].elevation;
+        azim[i] = sGnssSvStatus.sv_list[i].azimuth;
+        ephm[i] = sGnssSvStatus.sv_list[i].has_ephemeris;
+        alm[i] = sGnssSvStatus.sv_list[i].has_almanac;
+        fix[i] = sGnssSvStatus.sv_list[i].used_in_fix;
+    }
+
+    env->ReleaseIntArrayElements(prnArray, prns, 0);
+    env->ReleaseFloatArrayElements(snrArray, snrs, 0);
+    env->ReleaseFloatArrayElements(elevArray, elev, 0);
+    env->ReleaseFloatArrayElements(azumArray, azim, 0);
+    env->ReleaseBooleanArrayElements(ephmArray, ephm, 0);
+    env->ReleaseBooleanArrayElements(almArray, alm, 0);
+    env->ReleaseBooleanArrayElements(fixArray, fix, 0);
+    
+    return (jint) num_svs;
+}
+
 static void android_location_GpsLocationProvider_agps_set_reference_location_cellid(JNIEnv* env,
         jobject obj, jint type, jint mcc, jint mnc, jint lac, jint psc, jint cid)
 {
@@ -1517,6 +1578,9 @@ static JNINativeMethod sMethods[] = {
     {"native_configuration_update",
             "(Ljava/lang/String;)V",
             (void*)android_location_GpsLocationProvider_configuration_update},
+    {"native_read_gnss_sv_status",
+	        "([I[F[F[F[Z[Z[Z)I",
+            (void*) android_location_GpsLocationProvider_read_gnss_sv_status},
 };
 
 int register_android_server_location_GpsLocationProvider(JNIEnv* env)

From 4f1e3c39e91b380fbf44c6802dc10d8ff47a0639 Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Wed, 10 Feb 2016 17:33:43 +0100
Subject: [PATCH 12/12] Add missing null checks

---
 .../com/android/server/am/ActivityStackSupervisor.java     | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/services/core/java/com/android/server/am/ActivityStackSupervisor.java b/services/core/java/com/android/server/am/ActivityStackSupervisor.java
index 56ff4743d4122..8813ee2154664 100644
--- a/services/core/java/com/android/server/am/ActivityStackSupervisor.java
+++ b/services/core/java/com/android/server/am/ActivityStackSupervisor.java
@@ -1369,8 +1369,11 @@ final int startActivityLocked(IApplicationThread caller,
         }
 
         /* Block starting of browser or mail app while opening/closing the smart cover */
-        if (err == ActivityManager.START_SUCCESS && callingUid == 1000 && (intent.getComponent().flattenToShortString().contains(browserPackageName) || intent.getComponent().flattenToShortString().contains(mailPackageName))) {
-            err = ActivityManager.START_PERMISSION_DENIED;           
+        if (err == ActivityManager.START_SUCCESS && callingUid == 1000) {
+            if ((mailPackageName != null && intent.getComponent().flattenToShortString().contains(mailPackageName)) ||
+                    (browserPackageName != null && intent.getComponent().flattenToShortString().contains(browserPackageName))) {
+                err = ActivityManager.START_PERMISSION_DENIED;
+            }
         }
 
         if (err == ActivityManager.START_SUCCESS) {


